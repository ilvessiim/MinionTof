
minion_medulla_oblangata.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f34  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800712c  0800712c  0001712c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800718c  0800718c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007194  08007194  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800719c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000010  080071ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  080071ac  00020380  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a781  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b82  00000000  00000000  0003a7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003f830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030008  00000000  00000000  00040b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001baec  00000000  00000000  00070b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001256ef  00000000  00000000  0008c644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b1d33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005628  00000000  00000000  001b1d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08007114 	.word	0x08007114

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08007114 	.word	0x08007114

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <__NVIC_GetPriorityGrouping+0x18>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	0a1b      	lsrs	r3, r3, #8
 800053a:	f003 0307 	and.w	r3, r3, #7
}
 800053e:	4618      	mov	r0, r3
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055a:	2b00      	cmp	r3, #0
 800055c:	db0b      	blt.n	8000576 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	f003 021f 	and.w	r2, r3, #31
 8000564:	4907      	ldr	r1, [pc, #28]	; (8000584 <__NVIC_EnableIRQ+0x38>)
 8000566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056a:	095b      	lsrs	r3, r3, #5
 800056c:	2001      	movs	r0, #1
 800056e:	fa00 f202 	lsl.w	r2, r0, r2
 8000572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000e100 	.word	0xe000e100

08000588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	6039      	str	r1, [r7, #0]
 8000592:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000598:	2b00      	cmp	r3, #0
 800059a:	db0a      	blt.n	80005b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	490c      	ldr	r1, [pc, #48]	; (80005d4 <__NVIC_SetPriority+0x4c>)
 80005a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a6:	0112      	lsls	r2, r2, #4
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	440b      	add	r3, r1
 80005ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005b0:	e00a      	b.n	80005c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	b2da      	uxtb	r2, r3
 80005b6:	4908      	ldr	r1, [pc, #32]	; (80005d8 <__NVIC_SetPriority+0x50>)
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	f003 030f 	and.w	r3, r3, #15
 80005be:	3b04      	subs	r3, #4
 80005c0:	0112      	lsls	r2, r2, #4
 80005c2:	b2d2      	uxtb	r2, r2
 80005c4:	440b      	add	r3, r1
 80005c6:	761a      	strb	r2, [r3, #24]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000e100 	.word	0xe000e100
 80005d8:	e000ed00 	.word	0xe000ed00

080005dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005dc:	b480      	push	{r7}
 80005de:	b089      	sub	sp, #36	; 0x24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	f1c3 0307 	rsb	r3, r3, #7
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	bf28      	it	cs
 80005fa:	2304      	movcs	r3, #4
 80005fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	3304      	adds	r3, #4
 8000602:	2b06      	cmp	r3, #6
 8000604:	d902      	bls.n	800060c <NVIC_EncodePriority+0x30>
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3b03      	subs	r3, #3
 800060a:	e000      	b.n	800060e <NVIC_EncodePriority+0x32>
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000610:	f04f 32ff 	mov.w	r2, #4294967295
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	fa02 f303 	lsl.w	r3, r2, r3
 800061a:	43da      	mvns	r2, r3
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	401a      	ands	r2, r3
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000624:	f04f 31ff 	mov.w	r1, #4294967295
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	fa01 f303 	lsl.w	r3, r1, r3
 800062e:	43d9      	mvns	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	4313      	orrs	r3, r2
         );
}
 8000636:	4618      	mov	r0, r3
 8000638:	3724      	adds	r7, #36	; 0x24
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_DMA_Init+0x68>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <MX_DMA_Init+0x68>)
 8000650:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_DMA_Init+0x68>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000662:	f7ff ff65 	bl	8000530 <__NVIC_GetPriorityGrouping>
 8000666:	4603      	mov	r3, r0
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ffb5 	bl	80005dc <NVIC_EncodePriority>
 8000672:	4603      	mov	r3, r0
 8000674:	4619      	mov	r1, r3
 8000676:	203a      	movs	r0, #58	; 0x3a
 8000678:	f7ff ff86 	bl	8000588 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800067c:	203a      	movs	r0, #58	; 0x3a
 800067e:	f7ff ff65 	bl	800054c <__NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000682:	f7ff ff55 	bl	8000530 <__NVIC_GetPriorityGrouping>
 8000686:	4603      	mov	r3, r0
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffa5 	bl	80005dc <NVIC_EncodePriority>
 8000692:	4603      	mov	r3, r0
 8000694:	4619      	mov	r1, r3
 8000696:	2045      	movs	r0, #69	; 0x45
 8000698:	f7ff ff76 	bl	8000588 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800069c:	2045      	movs	r0, #69	; 0x45
 800069e:	f7ff ff55 	bl	800054c <__NVIC_EnableIRQ>

}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800

080006b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	; 0x30
 80006b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	4b67      	ldr	r3, [pc, #412]	; (8000864 <MX_GPIO_Init+0x1b4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a66      	ldr	r2, [pc, #408]	; (8000864 <MX_GPIO_Init+0x1b4>)
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b64      	ldr	r3, [pc, #400]	; (8000864 <MX_GPIO_Init+0x1b4>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0320 	and.w	r3, r3, #32
 80006da:	61bb      	str	r3, [r7, #24]
 80006dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b61      	ldr	r3, [pc, #388]	; (8000864 <MX_GPIO_Init+0x1b4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a60      	ldr	r2, [pc, #384]	; (8000864 <MX_GPIO_Init+0x1b4>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b5e      	ldr	r3, [pc, #376]	; (8000864 <MX_GPIO_Init+0x1b4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b5b      	ldr	r3, [pc, #364]	; (8000864 <MX_GPIO_Init+0x1b4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a5a      	ldr	r2, [pc, #360]	; (8000864 <MX_GPIO_Init+0x1b4>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b58      	ldr	r3, [pc, #352]	; (8000864 <MX_GPIO_Init+0x1b4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b55      	ldr	r3, [pc, #340]	; (8000864 <MX_GPIO_Init+0x1b4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a54      	ldr	r2, [pc, #336]	; (8000864 <MX_GPIO_Init+0x1b4>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b52      	ldr	r3, [pc, #328]	; (8000864 <MX_GPIO_Init+0x1b4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4b4f      	ldr	r3, [pc, #316]	; (8000864 <MX_GPIO_Init+0x1b4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a4e      	ldr	r2, [pc, #312]	; (8000864 <MX_GPIO_Init+0x1b4>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b4c      	ldr	r3, [pc, #304]	; (8000864 <MX_GPIO_Init+0x1b4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073e:	4b49      	ldr	r3, [pc, #292]	; (8000864 <MX_GPIO_Init+0x1b4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a48      	ldr	r2, [pc, #288]	; (8000864 <MX_GPIO_Init+0x1b4>)
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b46      	ldr	r3, [pc, #280]	; (8000864 <MX_GPIO_Init+0x1b4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0308 	and.w	r3, r3, #8
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	4b43      	ldr	r3, [pc, #268]	; (8000864 <MX_GPIO_Init+0x1b4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a42      	ldr	r2, [pc, #264]	; (8000864 <MX_GPIO_Init+0x1b4>)
 800075c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b40      	ldr	r3, [pc, #256]	; (8000864 <MX_GPIO_Init+0x1b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	483d      	ldr	r0, [pc, #244]	; (8000868 <MX_GPIO_Init+0x1b8>)
 8000774:	f002 fc4c 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_dir_out_Pin|M2_dir_out_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2160      	movs	r1, #96	; 0x60
 800077c:	483b      	ldr	r0, [pc, #236]	; (800086c <MX_GPIO_Init+0x1bc>)
 800077e:	f002 fc47 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_out_Pin|LED2_out_Pin|LED3_out_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 41a8 	mov.w	r1, #21504	; 0x5400
 8000788:	4839      	ldr	r0, [pc, #228]	; (8000870 <MX_GPIO_Init+0x1c0>)
 800078a:	f002 fc41 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000794:	4837      	ldr	r0, [pc, #220]	; (8000874 <MX_GPIO_Init+0x1c4>)
 8000796:	f002 fc3b 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800079a:	2301      	movs	r3, #1
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079e:	2301      	movs	r3, #1
 80007a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	482d      	ldr	r0, [pc, #180]	; (8000868 <MX_GPIO_Init+0x1b8>)
 80007b2:	f002 fa69 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = M1_dir_out_Pin|M2_dir_out_Pin;
 80007b6:	2360      	movs	r3, #96	; 0x60
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4827      	ldr	r0, [pc, #156]	; (800086c <MX_GPIO_Init+0x1bc>)
 80007ce:	f002 fa5b 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = ODO2_V_Pin|ODO1_U_Pin;
 80007d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007dc:	2302      	movs	r3, #2
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	4824      	ldr	r0, [pc, #144]	; (8000878 <MX_GPIO_Init+0x1c8>)
 80007e8:	f002 fa4e 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED1_out_Pin|LED2_out_Pin|LED3_out_Pin;
 80007ec:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	481a      	ldr	r0, [pc, #104]	; (8000870 <MX_GPIO_Init+0x1c0>)
 8000806:	f002 fa3f 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = ODO2_U_Pin|ODO2_W_Pin;
 800080a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800080e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000814:	2302      	movs	r3, #2
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	4814      	ldr	r0, [pc, #80]	; (8000870 <MX_GPIO_Init+0x1c0>)
 8000820:	f002 fa32 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000824:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_GPIO_Init+0x1c4>)
 800083e:	f002 fa23 	bl	8002c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ODO1_W_Pin|ODO1_V_Pin;
 8000842:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800084c:	2302      	movs	r3, #2
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4809      	ldr	r0, [pc, #36]	; (800087c <MX_GPIO_Init+0x1cc>)
 8000858:	f002 fa16 	bl	8002c88 <HAL_GPIO_Init>

}
 800085c:	bf00      	nop
 800085e:	3730      	adds	r7, #48	; 0x30
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020800 	.word	0x40020800
 800086c:	40020000 	.word	0x40020000
 8000870:	40021000 	.word	0x40021000
 8000874:	40020400 	.word	0x40020400
 8000878:	40021400 	.word	0x40021400
 800087c:	40021800 	.word	0x40021800

08000880 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000886:	4a1c      	ldr	r2, [pc, #112]	; (80008f8 <MX_I2C1_Init+0x78>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_I2C1_Init+0x74>)
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <MX_I2C1_Init+0x7c>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_I2C1_Init+0x74>)
 8000898:	2201      	movs	r2, #1
 800089a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ba:	480e      	ldr	r0, [pc, #56]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008bc:	f002 fbc2 	bl	8003044 <HAL_I2C_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008c6:	f000 fcbd 	bl	8001244 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ca:	2100      	movs	r1, #0
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008ce:	f003 f813 	bl	80038f8 <HAL_I2CEx_ConfigAnalogFilter>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008d8:	f000 fcb4 	bl	8001244 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_I2C1_Init+0x74>)
 80008e0:	f003 f855 	bl	800398e <HAL_I2CEx_ConfigDigitalFilter>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ea:	f000 fcab 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000006c 	.word	0x2000006c
 80008f8:	40005400 	.word	0x40005400
 80008fc:	20303e5d 	.word	0x20303e5d

08000900 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MX_I2C2_Init+0x74>)
 8000906:	4a1c      	ldr	r2, [pc, #112]	; (8000978 <MX_I2C2_Init+0x78>)
 8000908:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_I2C2_Init+0x74>)
 800090c:	4a1b      	ldr	r2, [pc, #108]	; (800097c <MX_I2C2_Init+0x7c>)
 800090e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_I2C2_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_I2C2_Init+0x74>)
 8000918:	2201      	movs	r2, #1
 800091a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_I2C2_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_I2C2_Init+0x74>)
 8000924:	2200      	movs	r2, #0
 8000926:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_I2C2_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_I2C2_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_I2C2_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <MX_I2C2_Init+0x74>)
 800093c:	f002 fb82 	bl	8003044 <HAL_I2C_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000946:	f000 fc7d 	bl	8001244 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094a:	2100      	movs	r1, #0
 800094c:	4809      	ldr	r0, [pc, #36]	; (8000974 <MX_I2C2_Init+0x74>)
 800094e:	f002 ffd3 	bl	80038f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000958:	f000 fc74 	bl	8001244 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800095c:	2100      	movs	r1, #0
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_I2C2_Init+0x74>)
 8000960:	f003 f815 	bl	800398e <HAL_I2CEx_ConfigDigitalFilter>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800096a:	f000 fc6b 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000b8 	.word	0x200000b8
 8000978:	40005800 	.word	0x40005800
 800097c:	20303e5d 	.word	0x20303e5d

08000980 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <HAL_I2C_MspInit+0xd8>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d129      	bne.n	80009f6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a2d      	ldr	r2, [pc, #180]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 80009a8:	f043 0302 	orr.w	r3, r3, #2
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c0:	2312      	movs	r3, #18
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009cc:	2304      	movs	r3, #4
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <HAL_I2C_MspInit+0xe0>)
 80009d8:	f002 f956 	bl	8002c88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	4a1e      	ldr	r2, [pc, #120]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 80009e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e6:	6413      	str	r3, [r2, #64]	; 0x40
 80009e8:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80009f4:	e02c      	b.n	8000a50 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <HAL_I2C_MspInit+0xe4>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d127      	bne.n	8000a50 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a00:	4b16      	ldr	r3, [pc, #88]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 8000a06:	f043 0320 	orr.w	r3, r3, #32
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	f003 0320 	and.w	r3, r3, #32
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Sonar_sda_Pin|Sonar_scl_Pin;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1c:	2312      	movs	r3, #18
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <HAL_I2C_MspInit+0xe8>)
 8000a34:	f002 f928 	bl	8002c88 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 8000a3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a42:	6413      	str	r3, [r2, #64]	; 0x40
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_I2C_MspInit+0xdc>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3730      	adds	r7, #48	; 0x30
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40005800 	.word	0x40005800
 8000a68:	40021400 	.word	0x40021400

08000a6c <HAL_UART_RxCpltCallback>:

volatile uint8_t ibus_rx_buffer[40] = { 0 };
volatile uint8_t ibus_rx_flags = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* uart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  // In this example, we use huart2 for iBus. Since this complete callback function
  // is shared between the all of the huarts, we first check which huart is invoking it.
  if (uart == &huart7)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <HAL_UART_RxCpltCallback+0x8c>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d139      	bne.n	8000af0 <HAL_UART_RxCpltCallback+0x84>
	  // chk are checksum bytes.
	  // 32 bytes in total.

	  // Blog posts about reversing this protocol: https://basejunction.wordpress.com/2015/08/23/en-flysky-i6-14-channels-part1/
	  // http://blog.dsp.id.au/posts/2017/10/22/flysky-ibus-protocol/
	  if (!ibus_rx_flags)
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <HAL_UART_RxCpltCallback+0x90>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d114      	bne.n	8000ab0 <HAL_UART_RxCpltCallback+0x44>
	  {
		if (ibus_rx_buffer[0] == 0x20)
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_UART_RxCpltCallback+0x94>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b20      	cmp	r3, #32
 8000a8e:	d109      	bne.n	8000aa4 <HAL_UART_RxCpltCallback+0x38>
		{
		  // have header's first byte, queue the second byte.
		  ibus_rx_flags = IBUS_HAS_2;
 8000a90:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <HAL_UART_RxCpltCallback+0x90>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(uart, ibus_rx_buffer + 1, 1);
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <HAL_UART_RxCpltCallback+0x98>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f004 fce4 	bl	800546a <HAL_UART_Receive_IT>
		// else until main() has read it.
		// Raw message is in the ibus_rx_buffer variable.
		ibus_rx_flags = IBUS_HAS_MESSAGE;
	  }
  }
}
 8000aa2:	e025      	b.n	8000af0 <HAL_UART_RxCpltCallback+0x84>
		  HAL_UART_Receive_IT(uart, ibus_rx_buffer, 1);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	4916      	ldr	r1, [pc, #88]	; (8000b00 <HAL_UART_RxCpltCallback+0x94>)
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f004 fcde 	bl	800546a <HAL_UART_Receive_IT>
}
 8000aae:	e01f      	b.n	8000af0 <HAL_UART_RxCpltCallback+0x84>
	  else if (ibus_rx_flags == IBUS_HAS_2)
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_UART_RxCpltCallback+0x90>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d117      	bne.n	8000aea <HAL_UART_RxCpltCallback+0x7e>
		if (ibus_rx_buffer[1] != 0x40)
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <HAL_UART_RxCpltCallback+0x94>)
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b40      	cmp	r3, #64	; 0x40
 8000ac2:	d008      	beq.n	8000ad6 <HAL_UART_RxCpltCallback+0x6a>
		  ibus_rx_flags = 0;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_UART_RxCpltCallback+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(uart, ibus_rx_buffer, 1);
 8000aca:	2201      	movs	r2, #1
 8000acc:	490c      	ldr	r1, [pc, #48]	; (8000b00 <HAL_UART_RxCpltCallback+0x94>)
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f004 fccb 	bl	800546a <HAL_UART_Receive_IT>
}
 8000ad4:	e00c      	b.n	8000af0 <HAL_UART_RxCpltCallback+0x84>
		  ibus_rx_flags = IBUS_HAS_4;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_UART_RxCpltCallback+0x90>)
 8000ad8:	2202      	movs	r2, #2
 8000ada:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Receive_IT(uart, ibus_rx_buffer + 2, 30);
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <HAL_UART_RxCpltCallback+0x9c>)
 8000ade:	221e      	movs	r2, #30
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f004 fcc1 	bl	800546a <HAL_UART_Receive_IT>
}
 8000ae8:	e002      	b.n	8000af0 <HAL_UART_RxCpltCallback+0x84>
		ibus_rx_flags = IBUS_HAS_MESSAGE;
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <HAL_UART_RxCpltCallback+0x90>)
 8000aec:	2204      	movs	r2, #4
 8000aee:	701a      	strb	r2, [r3, #0]
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000104 	.word	0x20000104
 8000afc:	20000054 	.word	0x20000054
 8000b00:	2000002c 	.word	0x2000002c
 8000b04:	2000002d 	.word	0x2000002d
 8000b08:	2000002e 	.word	0x2000002e

08000b0c <DecodeReceiverState>:

#define JOIN_TO_WORD(arr) ((*(arr)) | (*((arr) + 1) << 8))

ReceiverState_t DecodeReceiverState(uint8_t* buff)
{
 8000b0c:	b490      	push	{r4, r7}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  ReceiverState_t rec = { 0 };
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]

  uint16_t ch1 = JOIN_TO_WORD(buff + 2);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	3302      	adds	r3, #2
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	b21a      	sxth	r2, r3
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	3303      	adds	r3, #3
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t ch2 = JOIN_TO_WORD(buff + 4);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b21a      	sxth	r2, r3
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	3305      	adds	r3, #5
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b21b      	sxth	r3, r3
 8000b50:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t ch3 = JOIN_TO_WORD(buff + 6);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	3306      	adds	r3, #6
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	3307      	adds	r3, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t ch4 = JOIN_TO_WORD(buff + 8);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	3308      	adds	r3, #8
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b21a      	sxth	r2, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	3309      	adds	r3, #9
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	021b      	lsls	r3, r3, #8
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	843b      	strh	r3, [r7, #32]
  uint16_t ch5 = JOIN_TO_WORD(buff + 10);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	330a      	adds	r3, #10
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b21a      	sxth	r2, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	330b      	adds	r3, #11
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	83fb      	strh	r3, [r7, #30]
  uint16_t ch6 = JOIN_TO_WORD(buff + 12);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	330c      	adds	r3, #12
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	330d      	adds	r3, #13
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21b      	sxth	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	83bb      	strh	r3, [r7, #28]
  uint16_t ch7 = JOIN_TO_WORD(buff + 14);
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	330e      	adds	r3, #14
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b21a      	sxth	r2, r3
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	330f      	adds	r3, #15
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b21b      	sxth	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b21b      	sxth	r3, r3
 8000bc8:	837b      	strh	r3, [r7, #26]
  uint16_t ch8 = JOIN_TO_WORD(buff + 16);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	3310      	adds	r3, #16
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	3311      	adds	r3, #17
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	833b      	strh	r3, [r7, #24]

  rec.right_horizontal = ch1;
 8000be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000be4:	81bb      	strh	r3, [r7, #12]
  rec.right_vertical = ch2;
 8000be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000be8:	81fb      	strh	r3, [r7, #14]
  rec.left_vertical = ch3;
 8000bea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000bec:	823b      	strh	r3, [r7, #16]
  rec.left_horizontal = ch4;
 8000bee:	8c3b      	ldrh	r3, [r7, #32]
 8000bf0:	827b      	strh	r3, [r7, #18]

  if (ch5 == REC_SW_UP)
 8000bf2:	8bfb      	ldrh	r3, [r7, #30]
 8000bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bf8:	d102      	bne.n	8000c00 <DecodeReceiverState+0xf4>
    rec.switch_a = ReceiverSwitchUp;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	753b      	strb	r3, [r7, #20]
 8000bfe:	e001      	b.n	8000c04 <DecodeReceiverState+0xf8>
  else
    rec.switch_a = ReceiverSwitchDown;
 8000c00:	2302      	movs	r3, #2
 8000c02:	753b      	strb	r3, [r7, #20]

  if (ch7 == REC_SW_UP)
 8000c04:	8b7b      	ldrh	r3, [r7, #26]
 8000c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c0a:	d102      	bne.n	8000c12 <DecodeReceiverState+0x106>
    rec.switch_b = ReceiverSwitchUp;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	757b      	strb	r3, [r7, #21]
 8000c10:	e001      	b.n	8000c16 <DecodeReceiverState+0x10a>
  else
    rec.switch_b = ReceiverSwitchDown;
 8000c12:	2302      	movs	r3, #2
 8000c14:	757b      	strb	r3, [r7, #21]

  if (ch6 > 0 && ch6 <= 1200)
 8000c16:	8bbb      	ldrh	r3, [r7, #28]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d006      	beq.n	8000c2a <DecodeReceiverState+0x11e>
 8000c1c:	8bbb      	ldrh	r3, [r7, #28]
 8000c1e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000c22:	d802      	bhi.n	8000c2a <DecodeReceiverState+0x11e>
    rec.switch_c = ReceiverSwitchUp;
 8000c24:	2300      	movs	r3, #0
 8000c26:	75bb      	strb	r3, [r7, #22]
 8000c28:	e00d      	b.n	8000c46 <DecodeReceiverState+0x13a>
  else if (ch6 > 1200 && ch6 <= 1700)
 8000c2a:	8bbb      	ldrh	r3, [r7, #28]
 8000c2c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000c30:	d907      	bls.n	8000c42 <DecodeReceiverState+0x136>
 8000c32:	8bbb      	ldrh	r3, [r7, #28]
 8000c34:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d802      	bhi.n	8000c42 <DecodeReceiverState+0x136>
    rec.switch_c = ReceiverSwitchMiddle;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	75bb      	strb	r3, [r7, #22]
 8000c40:	e001      	b.n	8000c46 <DecodeReceiverState+0x13a>
  else
    rec.switch_c = ReceiverSwitchDown;
 8000c42:	2302      	movs	r3, #2
 8000c44:	75bb      	strb	r3, [r7, #22]

  if (ch8 == REC_SW_UP)
 8000c46:	8b3b      	ldrh	r3, [r7, #24]
 8000c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c4c:	d102      	bne.n	8000c54 <DecodeReceiverState+0x148>
    rec.switch_d = ReceiverSwitchUp;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	75fb      	strb	r3, [r7, #23]
 8000c52:	e001      	b.n	8000c58 <DecodeReceiverState+0x14c>
  else
    rec.switch_d = ReceiverSwitchDown;
 8000c54:	2302      	movs	r3, #2
 8000c56:	75fb      	strb	r3, [r7, #23]

  return rec;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	461c      	mov	r4, r3
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c62:	6020      	str	r0, [r4, #0]
 8000c64:	6061      	str	r1, [r4, #4]
 8000c66:	60a2      	str	r2, [r4, #8]
}
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc90      	pop	{r4, r7}
 8000c70:	4770      	bx	lr
	...

08000c74 <HandleReceiverMessage>:

#undef JOIN_TO_WORD

ReceiverState_t HandleReceiverMessage()
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  // Decode the message.
  ReceiverState_t rec = DecodeReceiverState(ibus_rx_buffer);
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	4912      	ldr	r1, [pc, #72]	; (8000ccc <HandleReceiverMessage+0x58>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff ff42 	bl	8000b0c <DecodeReceiverState>

  // Reset the RX ISR flags.
  ibus_rx_flags = 0;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HandleReceiverMessage+0x5c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < 40; i++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	75fb      	strb	r3, [r7, #23]
 8000c92:	e006      	b.n	8000ca2 <HandleReceiverMessage+0x2e>
  {
	// Zero fill the buffer.
    ibus_rx_buffer[i] = 0;
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HandleReceiverMessage+0x58>)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	54d1      	strb	r1, [r2, r3]
  for (uint8_t i = 0; i < 40; i++)
 8000c9c:	7dfb      	ldrb	r3, [r7, #23]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	75fb      	strb	r3, [r7, #23]
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
 8000ca4:	2b27      	cmp	r3, #39	; 0x27
 8000ca6:	d9f5      	bls.n	8000c94 <HandleReceiverMessage+0x20>
  }

  // Start receiving again.
  HAL_UART_Receive_IT(&huart7, ibus_rx_buffer, 1);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <HandleReceiverMessage+0x58>)
 8000cac:	4809      	ldr	r0, [pc, #36]	; (8000cd4 <HandleReceiverMessage+0x60>)
 8000cae:	f004 fbdc 	bl	800546a <HAL_UART_Receive_IT>

  return rec;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	461c      	mov	r4, r3
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000cbc:	6020      	str	r0, [r4, #0]
 8000cbe:	6061      	str	r1, [r4, #4]
 8000cc0:	60a2      	str	r2, [r4, #8]
}
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	371c      	adds	r7, #28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000002c 	.word	0x2000002c
 8000cd0:	20000054 	.word	0x20000054
 8000cd4:	20000104 	.word	0x20000104

08000cd8 <CheckUartInterruptStatus>:

void CheckUartInterruptStatus()
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  uint8_t uart_status = HAL_UART_GetState(&huart7);
 8000cde:	480a      	ldr	r0, [pc, #40]	; (8000d08 <CheckUartInterruptStatus+0x30>)
 8000ce0:	f004 fe2a 	bl	8005938 <HAL_UART_GetState>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]

  if (uart_status == 32)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b20      	cmp	r3, #32
 8000cec:	d107      	bne.n	8000cfe <CheckUartInterruptStatus+0x26>
  {
	// Weird ISR error. Reset state and try again.
	ibus_rx_flags = 0;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <CheckUartInterruptStatus+0x34>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart7, ibus_rx_buffer, 1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4906      	ldr	r1, [pc, #24]	; (8000d10 <CheckUartInterruptStatus+0x38>)
 8000cf8:	4803      	ldr	r0, [pc, #12]	; (8000d08 <CheckUartInterruptStatus+0x30>)
 8000cfa:	f004 fbb6 	bl	800546a <HAL_UART_Receive_IT>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000104 	.word	0x20000104
 8000d0c:	20000054 	.word	0x20000054
 8000d10:	2000002c 	.word	0x2000002c

08000d14 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_IWDG_Init+0x34>)
 8000d1a:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <MX_IWDG_Init+0x38>)
 8000d1c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <MX_IWDG_Init+0x34>)
 8000d20:	2203      	movs	r2, #3
 8000d22:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_IWDG_Init+0x34>)
 8000d26:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000d2a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 99;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_IWDG_Init+0x34>)
 8000d2e:	2263      	movs	r2, #99	; 0x63
 8000d30:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_IWDG_Init+0x34>)
 8000d34:	f002 fe77 	bl	8003a26 <HAL_IWDG_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_IWDG_Init+0x2e>
  {
    Error_Handler();
 8000d3e:	f000 fa81 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000188 	.word	0x20000188
 8000d4c:	40003000 	.word	0x40003000

08000d50 <send_data.14759>:
  int16_t sonar_1 = 0;
  int16_t sonar_2 = 0;
  int16_t sonar_3 = 0;
  int16_t tof_1 = 0;
  uint8_t data_to_send[29];
  void send_data(int32_t tof_1, int32_t odom_2, int16_t sonar_1, int16_t sonar_2, int16_t sonar_3){
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	4611      	mov	r1, r2
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	460b      	mov	r3, r1
 8000d60:	80fb      	strh	r3, [r7, #6]
 8000d62:	4613      	mov	r3, r2
 8000d64:	80bb      	strh	r3, [r7, #4]
 8000d66:	4664      	mov	r4, ip
 8000d68:	f8c7 c000 	str.w	ip, [r7]
  	itoa(tof_1, data_to_send, 10);
 8000d6c:	4623      	mov	r3, r4
 8000d6e:	220a      	movs	r2, #10
 8000d70:	4619      	mov	r1, r3
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f006 f982 	bl	800707c <itoa>
  	itoa(2, data_to_send+8, 10);
 8000d78:	4623      	mov	r3, r4
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	220a      	movs	r2, #10
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2002      	movs	r0, #2
 8000d82:	f006 f97b 	bl	800707c <itoa>
  	itoa(3, data_to_send+16, 10);
 8000d86:	4623      	mov	r3, r4
 8000d88:	3310      	adds	r3, #16
 8000d8a:	220a      	movs	r2, #10
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f006 f974 	bl	800707c <itoa>
  	itoa(5, data_to_send+20, 10);
 8000d94:	4623      	mov	r3, r4
 8000d96:	3314      	adds	r3, #20
 8000d98:	220a      	movs	r2, #10
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	2005      	movs	r0, #5
 8000d9e:	f006 f96d 	bl	800707c <itoa>
  	itoa(6, data_to_send+24, 10);
 8000da2:	4623      	mov	r3, r4
 8000da4:	3318      	adds	r3, #24
 8000da6:	220a      	movs	r2, #10
 8000da8:	4619      	mov	r1, r3
 8000daa:	2006      	movs	r0, #6
 8000dac:	f006 f966 	bl	800707c <itoa>
	/*memcpy(&odom_1, data_to_send, 10);
	memcpy(&odom_2, data_to_send+4, 10);
	memcpy(&sonar_1, data_to_send+8, 10);
	memcpy(&sonar_2, data_to_send+12, 10);
	memcpy(&sonar_3, data_to_send+16, 10);*/
  	data_to_send[28] = '\n';
 8000db0:	230a      	movs	r3, #10
 8000db2:	7723      	strb	r3, [r4, #28]
  	HAL_UART_Transmit (&huart3, data_to_send, 29, 100);
 8000db4:	4621      	mov	r1, r4
 8000db6:	2364      	movs	r3, #100	; 0x64
 8000db8:	221d      	movs	r2, #29
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <send_data.14759+0x78>)
 8000dbc:	f004 fac2 	bl	8005344 <HAL_UART_Transmit>

  }
 8000dc0:	bf00      	nop
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	20000198 	.word	0x20000198

08000dcc <main>:
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b099      	sub	sp, #100	; 0x64
 8000dd0:	af02      	add	r7, sp, #8
int main(void)
 8000dd2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_Init();
 8000dd8:	f001 fd31 	bl	800283e <HAL_Init>
  SystemClock_Config();
 8000ddc:	f000 f998 	bl	8001110 <SystemClock_Config>
  MX_GPIO_Init();
 8000de0:	f7ff fc66 	bl	80006b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000de4:	f7ff fc2e 	bl	8000644 <MX_DMA_Init>
  MX_TIM3_Init();
 8000de8:	f001 fb2c 	bl	8002444 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000dec:	f001 f9bc 	bl	8002168 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000df0:	f001 fb76 	bl	80024e0 <MX_TIM4_Init>
  MX_UART7_Init();
 8000df4:	f001 fc12 	bl	800261c <MX_UART7_Init>
  MX_I2C2_Init();
 8000df8:	f7ff fd82 	bl	8000900 <MX_I2C2_Init>
  MX_IWDG_Init();
 8000dfc:	f7ff ff8a 	bl	8000d14 <MX_IWDG_Init>
  MX_USART3_UART_Init();
 8000e00:	f001 fc3c 	bl	800267c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000e04:	f7ff fd3c 	bl	8000880 <MX_I2C1_Init>
  uint16_t v = 1500;
 8000e08:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000e0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t w = 1500;
 8000e10:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000e14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  int32_t odom_1 = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t odom_2 = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  int16_t sonar_1 = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
  int16_t sonar_2 = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  int16_t sonar_3 = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  int16_t tof_1 = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  void led_3_off()
  {
	  HAL_GPIO_WritePin(LED3_out_GPIO_Port, LED3_out_Pin, 0);
  }
  // initiate the reception of the first byte.
  HAL_UART_Receive_IT(&huart7, ibus_rx_buffer, 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4975      	ldr	r1, [pc, #468]	; (8001010 <main+0x244>)
 8000e3c:	4875      	ldr	r0, [pc, #468]	; (8001014 <main+0x248>)
 8000e3e:	f004 fb14 	bl	800546a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, rec_data, 10);
 8000e42:	220a      	movs	r2, #10
 8000e44:	4974      	ldr	r1, [pc, #464]	; (8001018 <main+0x24c>)
 8000e46:	4875      	ldr	r0, [pc, #468]	; (800101c <main+0x250>)
 8000e48:	f004 fb0f 	bl	800546a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  zero_time1 = HAL_GetTick();
 8000e4c:	f001 fd48 	bl	80028e0 <HAL_GetTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4a73      	ldr	r2, [pc, #460]	; (8001020 <main+0x254>)
 8000e54:	6013      	str	r3, [r2, #0]
  zero_time2 = HAL_GetTick();
 8000e56:	f001 fd43 	bl	80028e0 <HAL_GetTick>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a71      	ldr	r2, [pc, #452]	; (8001024 <main+0x258>)
 8000e5e:	6013      	str	r3, [r2, #0]
  zero_time3 = HAL_GetTick();
 8000e60:	f001 fd3e 	bl	80028e0 <HAL_GetTick>
 8000e64:	4603      	mov	r3, r0
 8000e66:	4a70      	ldr	r2, [pc, #448]	; (8001028 <main+0x25c>)
 8000e68:	6013      	str	r3, [r2, #0]


  while (1)
  {
	  sonar_1 = sonar_s1(sonar_1);
 8000e6a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 fcc6 	bl	8001800 <sonar_s1>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	  sonar_2 = sonar_s2(sonar_2);
 8000e7a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 fd1a 	bl	80018b8 <sonar_s2>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  sonar_3 = sonar_s3(sonar_3);
 8000e8a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fd6e 	bl	8001970 <sonar_s3>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  uint32_t  kaka = HAL_GetTick();
 8000e9a:	f001 fd21 	bl	80028e0 <HAL_GetTick>
 8000e9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	  HAL_IWDG_Refresh(&hiwdg);
 8000ea0:	4862      	ldr	r0, [pc, #392]	; (800102c <main+0x260>)
 8000ea2:	f002 fe0f 	bl	8003ac4 <HAL_IWDG_Refresh>
	  ReceiverState_t message_data = { 0 };
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
	  uint8_t has_new_message = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	  Speeds speed = {0};
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
	  SpeedPercentages sp = {0};
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]

	  if (ibus_rx_flags == IBUS_HAS_MESSAGE)
 8000ec0:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <main+0x264>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d108      	bne.n	8000edc <main+0x110>
	  {
		  //HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
		  message_data = HandleReceiverMessage();
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fed0 	bl	8000c74 <HandleReceiverMessage>
		  has_new_message = 1;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000eda:	e001      	b.n	8000ee0 <main+0x114>
	  }
	  else
	  {
		  // hacky solution to ISR errors.
		  CheckUartInterruptStatus();
 8000edc:	f7ff fefc 	bl	8000cd8 <CheckUartInterruptStatus>
	  }

	  if (has_new_message)
 8000ee0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d062      	beq.n	8000fae <main+0x1e2>
	  {
		  // select mode
		  if(message_data.switch_c == ReceiverSwitchUp) // manual
 8000ee8:	7dbb      	ldrb	r3, [r7, #22]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d12a      	bne.n	8000f44 <main+0x178>
		  {
			  if(sonar_1 > 100 && sonar_2 > 100 && sonar_3 > 100 ){
 8000eee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	dd1d      	ble.n	8000f32 <main+0x166>
 8000ef6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8000efa:	2b64      	cmp	r3, #100	; 0x64
 8000efc:	dd19      	ble.n	8000f32 <main+0x166>
 8000efe:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000f02:	2b64      	cmp	r3, #100	; 0x64
 8000f04:	dd15      	ble.n	8000f32 <main+0x166>
				  led_1_on();
 8000f06:	f107 0318 	add.w	r3, r7, #24
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	f000 f894 	bl	8001038 <led_1_on.14761>
				  led_2_off();
 8000f10:	f107 0318 	add.w	r3, r7, #24
 8000f14:	469c      	mov	ip, r3
 8000f16:	f000 f8c5 	bl	80010a4 <led_2_off.14767>
				  led_3_off();
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	469c      	mov	ip, r3
 8000f20:	f000 f8e4 	bl	80010ec <led_3_off.14771>
				  v = message_data.right_vertical;
 8000f24:	89fb      	ldrh	r3, [r7, #14]
 8000f26:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				  w = message_data.right_horizontal;
 8000f2a:	89bb      	ldrh	r3, [r7, #12]
 8000f2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000f30:	e03d      	b.n	8000fae <main+0x1e2>
			  }

			  else{
				  v=1500;
 8000f32:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000f36:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
				  w=1500;
 8000f3a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000f3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000f42:	e034      	b.n	8000fae <main+0x1e2>
			  }
		  }
		  else if(message_data.switch_c == ReceiverSwitchMiddle) //automatic
 8000f44:	7dbb      	ldrb	r3, [r7, #22]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d11a      	bne.n	8000f80 <main+0x1b4>
		  {
			  led_1_off();
 8000f4a:	f107 0318 	add.w	r3, r7, #24
 8000f4e:	469c      	mov	ip, r3
 8000f50:	f000 f884 	bl	800105c <led_1_off.14763>
			  led_2_on();
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	469c      	mov	ip, r3
 8000f5a:	f000 f891 	bl	8001080 <led_2_on.14765>
			  led_3_off();
 8000f5e:	f107 0318 	add.w	r3, r7, #24
 8000f62:	469c      	mov	ip, r3
 8000f64:	f000 f8c2 	bl	80010ec <led_3_off.14771>
			  speed = automatic(rec_data);
 8000f68:	482b      	ldr	r0, [pc, #172]	; (8001018 <main+0x24c>)
 8000f6a:	f000 fa87 	bl	800147c <automatic>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60bb      	str	r3, [r7, #8]
			  v = speed.v;
 8000f72:	893b      	ldrh	r3, [r7, #8]
 8000f74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			  w = speed.w;
 8000f78:	897b      	ldrh	r3, [r7, #10]
 8000f7a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8000f7e:	e016      	b.n	8000fae <main+0x1e2>
		  }
		  else //armed
		  {
			  v = 1500;
 8000f80:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000f84:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
			  w = 1500;
 8000f88:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000f8c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
			  led_1_off();
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	469c      	mov	ip, r3
 8000f96:	f000 f861 	bl	800105c <led_1_off.14763>
			  led_2_off();
 8000f9a:	f107 0318 	add.w	r3, r7, #24
 8000f9e:	469c      	mov	ip, r3
 8000fa0:	f000 f880 	bl	80010a4 <led_2_off.14767>
			  led_3_on();
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	469c      	mov	ip, r3
 8000faa:	f000 f88d 	bl	80010c8 <led_3_on.14769>
		  ;
		  //v = 1500;
		  //w = 1500;
	  }

	  sp = setThrottle(v, w);
 8000fae:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8000fb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f949 	bl	8001250 <setThrottle>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	607b      	str	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, sp.lv);
 8000fc2:	88ba      	ldrh	r2, [r7, #4]
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <main+0x268>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, sp.rv);
 8000fca:	88fa      	ldrh	r2, [r7, #6]
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <main+0x268>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40

	  odom_1 = odometry_m1(odom_1);
 8000fd2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000fd4:	f000 fadc 	bl	8001590 <odometry_m1>
 8000fd8:	6538      	str	r0, [r7, #80]	; 0x50
	  odom_2 = odometry_m2(odom_2);
 8000fda:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000fdc:	f000 fb74 	bl	80016c8 <odometry_m2>
 8000fe0:	64f8      	str	r0, [r7, #76]	; 0x4c
	  tof_1 = tof_t1();
 8000fe2:	f001 faff 	bl	80025e4 <tof_t1>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	  send_data(tof_1, odom_2, sonar_1, sonar_2, sonar_3);//odometry_m1, odometry_m2, sonars[0], sonars[1], sonars[2]);
 8000fec:	f9b7 0042 	ldrsh.w	r0, [r7, #66]	; 0x42
 8000ff0:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
 8000ff4:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	; 0x4a
 8000ff8:	f107 0418 	add.w	r4, r7, #24
 8000ffc:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	46a4      	mov	ip, r4
 8001004:	460b      	mov	r3, r1
 8001006:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001008:	f7ff fea2 	bl	8000d50 <send_data.14759>
  {
 800100c:	e72d      	b.n	8000e6a <main+0x9e>
 800100e:	bf00      	nop
 8001010:	2000002c 	.word	0x2000002c
 8001014:	20000104 	.word	0x20000104
 8001018:	200002a0 	.word	0x200002a0
 800101c:	20000198 	.word	0x20000198
 8001020:	2000005c 	.word	0x2000005c
 8001024:	20000060 	.word	0x20000060
 8001028:	20000064 	.word	0x20000064
 800102c:	20000188 	.word	0x20000188
 8001030:	20000054 	.word	0x20000054
 8001034:	200002b0 	.word	0x200002b0

08001038 <led_1_on.14761>:
  {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(LED1_out_GPIO_Port, LED1_out_Pin, 1);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001048:	4803      	ldr	r0, [pc, #12]	; (8001058 <led_1_on.14761+0x20>)
 800104a:	f001 ffe1 	bl	8003010 <HAL_GPIO_WritePin>
  }
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40021000 	.word	0x40021000

0800105c <led_1_off.14763>:
  {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(LED1_out_GPIO_Port, LED1_out_Pin, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106c:	4803      	ldr	r0, [pc, #12]	; (800107c <led_1_off.14763+0x20>)
 800106e:	f001 ffcf 	bl	8003010 <HAL_GPIO_WritePin>
  }
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000

08001080 <led_2_on.14765>:
  {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(LED2_out_GPIO_Port, LED2_out_Pin, 1);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <led_2_on.14765+0x20>)
 8001092:	f001 ffbd 	bl	8003010 <HAL_GPIO_WritePin>
  }
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40021000 	.word	0x40021000

080010a4 <led_2_off.14767>:
  {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(LED2_out_GPIO_Port, LED2_out_Pin, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <led_2_off.14767+0x20>)
 80010b6:	f001 ffab 	bl	8003010 <HAL_GPIO_WritePin>
  }
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <led_3_on.14769>:
  {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(LED3_out_GPIO_Port, LED3_out_Pin, 1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <led_3_on.14769+0x20>)
 80010da:	f001 ff99 	bl	8003010 <HAL_GPIO_WritePin>
  }
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <led_3_off.14771>:
  {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	f8c7 c004 	str.w	ip, [r7, #4]
	  HAL_GPIO_WritePin(LED3_out_GPIO_Port, LED3_out_Pin, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <led_3_off.14771+0x20>)
 80010fe:	f001 ff87 	bl	8003010 <HAL_GPIO_WritePin>
  }
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b8      	sub	sp, #224	; 0xe0
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800111a:	2234      	movs	r2, #52	; 0x34
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f005 ffae 	bl	8007080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	2290      	movs	r2, #144	; 0x90
 800113a:	2100      	movs	r1, #0
 800113c:	4618      	mov	r0, r3
 800113e:	f005 ff9f 	bl	8007080 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b3e      	ldr	r3, [pc, #248]	; (800123c <SystemClock_Config+0x12c>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a3d      	ldr	r2, [pc, #244]	; (800123c <SystemClock_Config+0x12c>)
 8001148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b3b      	ldr	r3, [pc, #236]	; (800123c <SystemClock_Config+0x12c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800115a:	4b39      	ldr	r3, [pc, #228]	; (8001240 <SystemClock_Config+0x130>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001162:	4a37      	ldr	r2, [pc, #220]	; (8001240 <SystemClock_Config+0x130>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b35      	ldr	r3, [pc, #212]	; (8001240 <SystemClock_Config+0x130>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001176:	230a      	movs	r3, #10
 8001178:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001182:	2310      	movs	r3, #16
 8001184:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800119a:	2308      	movs	r3, #8
 800119c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80011a0:	2360      	movs	r3, #96	; 0x60
 80011a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 fce4 	bl	8003b84 <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80011c2:	f000 f83f 	bl	8001244 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011c6:	f002 fc8d 	bl	8003ae4 <HAL_PWREx_EnableOverDrive>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011d0:	f000 f838 	bl	8001244 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2302      	movs	r3, #2
 80011dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011f8:	2103      	movs	r1, #3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 ff70 	bl	80040e0 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001206:	f000 f81d 	bl	8001244 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART7
 800120a:	f44f 4351 	mov.w	r3, #53504	; 0xd100
 800120e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001210:	2300      	movs	r3, #0
 8001212:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001214:	2300      	movs	r3, #0
 8001216:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001218:	2300      	movs	r3, #0
 800121a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800121c:	2300      	movs	r3, #0
 800121e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	4618      	mov	r0, r3
 8001226:	f003 f931 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x124>
  {
    Error_Handler();
 8001230:	f000 f808 	bl	8001244 <Error_Handler>
  }
}
 8001234:	bf00      	nop
 8001236:	37e0      	adds	r7, #224	; 0xe0
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001248:	b672      	cpsid	i
}
 800124a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800124c:	e7fe      	b.n	800124c <Error_Handler+0x8>
	...

08001250 <setThrottle>:
#include "minion_drive.h"
#include <stdio.h>
#include <stdlib.h>

SpeedPercentages setThrottle(const uint16_t v, const uint16_t w)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	80fb      	strh	r3, [r7, #6]
 800125c:	4613      	mov	r3, r2
 800125e:	80bb      	strh	r3, [r7, #4]
	SpeedPercentages sp = {0};
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
	float lv;
	float rv;
	float k_w;
	float error = 0;
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
	float v_temp = (v - 1500.0)  / 5;
 800126a:	88fb      	ldrh	r3, [r7, #6]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001274:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8001460 <setThrottle+0x210>
 8001278:	ee37 6b46 	vsub.f64	d6, d7, d6
 800127c:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8001280:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001284:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001288:	edc7 7a06 	vstr	s15, [r7, #24]
	float w_temp = (w - 1500.0)  / 5;
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001296:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8001460 <setThrottle+0x210>
 800129a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800129e:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80012a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012aa:	edc7 7a05 	vstr	s15, [r7, #20]
	k_w = 0.15;
 80012ae:	4b6e      	ldr	r3, [pc, #440]	; (8001468 <setThrottle+0x218>)
 80012b0:	613b      	str	r3, [r7, #16]
	lv = (v_temp +  (k_w/(abs(v_temp/200) + 1) * w_temp));//turning coef 0.2 at high speeds 0.15 at low speeds
 80012b2:	ed97 7a06 	vldr	s14, [r7, #24]
 80012b6:	eddf 6a6d 	vldr	s13, [pc, #436]	; 800146c <setThrottle+0x21c>
 80012ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c2:	ee17 3a90 	vmov	r3, s15
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bfb8      	it	lt
 80012ca:	425b      	neglt	r3, r3
 80012cc:	3301      	adds	r3, #1
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d6:	edd7 6a04 	vldr	s13, [r7, #16]
 80012da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012de:	edd7 7a05 	vldr	s15, [r7, #20]
 80012e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	rv = (v_temp -  (k_w/(abs(v_temp/200) + 1) * w_temp));
 80012f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80012f6:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800146c <setThrottle+0x21c>
 80012fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 3a90 	vmov	r3, s15
 8001306:	2b00      	cmp	r3, #0
 8001308:	bfb8      	it	lt
 800130a:	425b      	neglt	r3, r3
 800130c:	3301      	adds	r3, #1
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001316:	edd7 6a04 	vldr	s13, [r7, #16]
 800131a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800131e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001326:	ed97 7a06 	vldr	s14, [r7, #24]
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	edc7 7a08 	vstr	s15, [r7, #32]

	if (lv < 0)
 8001332:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133e:	d505      	bpl.n	800134c <setThrottle+0xfc>
		{
		HAL_GPIO_WritePin(M1_dir_out_GPIO_Port, M1_dir_out_Pin, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	2120      	movs	r1, #32
 8001344:	484a      	ldr	r0, [pc, #296]	; (8001470 <setThrottle+0x220>)
 8001346:	f001 fe63 	bl	8003010 <HAL_GPIO_WritePin>
 800134a:	e004      	b.n	8001356 <setThrottle+0x106>
		}
	else
		{
		HAL_GPIO_WritePin(M1_dir_out_GPIO_Port, M1_dir_out_Pin, 0);
 800134c:	2200      	movs	r2, #0
 800134e:	2120      	movs	r1, #32
 8001350:	4847      	ldr	r0, [pc, #284]	; (8001470 <setThrottle+0x220>)
 8001352:	f001 fe5d 	bl	8003010 <HAL_GPIO_WritePin>
		}
	if (rv < 0)
 8001356:	edd7 7a08 	vldr	s15, [r7, #32]
 800135a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	d505      	bpl.n	8001370 <setThrottle+0x120>
		{
		HAL_GPIO_WritePin(M2_dir_out_GPIO_Port, M2_dir_out_Pin, 1);
 8001364:	2201      	movs	r2, #1
 8001366:	2140      	movs	r1, #64	; 0x40
 8001368:	4841      	ldr	r0, [pc, #260]	; (8001470 <setThrottle+0x220>)
 800136a:	f001 fe51 	bl	8003010 <HAL_GPIO_WritePin>
 800136e:	e004      	b.n	800137a <setThrottle+0x12a>
		}
	else
		{
		HAL_GPIO_WritePin(M2_dir_out_GPIO_Port, M2_dir_out_Pin, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	483e      	ldr	r0, [pc, #248]	; (8001470 <setThrottle+0x220>)
 8001376:	f001 fe4b 	bl	8003010 <HAL_GPIO_WritePin>
		}

	lv = abs(lv);
 800137a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	2b00      	cmp	r3, #0
 8001388:	bfb8      	it	lt
 800138a:	425b      	neglt	r3, r3
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001394:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	rv = abs(rv);
 8001398:	edd7 7a08 	vldr	s15, [r7, #32]
 800139c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a0:	ee17 3a90 	vmov	r3, s15
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bfb8      	it	lt
 80013a8:	425b      	neglt	r3, r3
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b2:	edc7 7a08 	vstr	s15, [r7, #32]

	if (rv > 100)
 80013b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013ba:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001474 <setThrottle+0x224>
 80013be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c6:	dd11      	ble.n	80013ec <setThrottle+0x19c>
	{
		error = rv - 100;
 80013c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80013cc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001474 <setThrottle+0x224>
 80013d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013d4:	edc7 7a07 	vstr	s15, [r7, #28]
		rv = 100;
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <setThrottle+0x228>)
 80013da:	623b      	str	r3, [r7, #32]
		lv -= error;
 80013dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	}
	if (lv > 100)
 80013ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013f0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001474 <setThrottle+0x224>
 80013f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fc:	dd11      	ble.n	8001422 <setThrottle+0x1d2>
	{
		error = lv - 100;
 80013fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001402:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001474 <setThrottle+0x224>
 8001406:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800140a:	edc7 7a07 	vstr	s15, [r7, #28]
		rv -= error;
 800140e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001412:	edd7 7a07 	vldr	s15, [r7, #28]
 8001416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141a:	edc7 7a08 	vstr	s15, [r7, #32]
		lv = 100;
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <setThrottle+0x228>)
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
	}
	sp.lv = (uint16_t)lv;
 8001422:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800142a:	ee17 3a90 	vmov	r3, s15
 800142e:	b29b      	uxth	r3, r3
 8001430:	813b      	strh	r3, [r7, #8]
	sp.rv = (uint16_t)rv;
 8001432:	edd7 7a08 	vldr	s15, [r7, #32]
 8001436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143a:	ee17 3a90 	vmov	r3, s15
 800143e:	b29b      	uxth	r3, r3
 8001440:	817b      	strh	r3, [r7, #10]
	return sp;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	2300      	movs	r3, #0
 8001448:	89ba      	ldrh	r2, [r7, #12]
 800144a:	f362 030f 	bfi	r3, r2, #0, #16
 800144e:	89fa      	ldrh	r2, [r7, #14]
 8001450:	f362 431f 	bfi	r3, r2, #16, #16

}
 8001454:	4618      	mov	r0, r3
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	f3af 8000 	nop.w
 8001460:	00000000 	.word	0x00000000
 8001464:	40977000 	.word	0x40977000
 8001468:	3e19999a 	.word	0x3e19999a
 800146c:	43480000 	.word	0x43480000
 8001470:	40020000 	.word	0x40020000
 8001474:	42c80000 	.word	0x42c80000
 8001478:	42c80000 	.word	0x42c80000

0800147c <automatic>:
#include "modes.h"



Speeds automatic(uint8_t *data_buf)//takes serial buffer as argument
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]

	Speeds speeds = {0};
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]

	if (data_buf[0] == 'A' && data_buf[1] == 'A')
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b41      	cmp	r3, #65	; 0x41
 800148e:	d169      	bne.n	8001564 <automatic+0xe8>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3301      	adds	r3, #1
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b41      	cmp	r3, #65	; 0x41
 8001498:	d164      	bne.n	8001564 <automatic+0xe8>
	{
		speeds.v = ((int)(*(data_buf+2)) - '0')*1000 + ((int)(*(data_buf+3)) - '0') * 100 +  ((int)(*(data_buf+4)) - '0') * 10 + (int)(*(data_buf+5)) - '0';
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3302      	adds	r3, #2
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	3b30      	subs	r3, #48	; 0x30
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	0152      	lsls	r2, r2, #5
 80014a8:	1ad2      	subs	r2, r2, r3
 80014aa:	0092      	lsls	r2, r2, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3303      	adds	r3, #3
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	3b30      	subs	r3, #48	; 0x30
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	0089      	lsls	r1, r1, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	4619      	mov	r1, r3
 80014c4:	0088      	lsls	r0, r1, #2
 80014c6:	4619      	mov	r1, r3
 80014c8:	4603      	mov	r3, r0
 80014ca:	440b      	add	r3, r1
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	4413      	add	r3, r2
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3304      	adds	r3, #4
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	3b30      	subs	r3, #48	; 0x30
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4619      	mov	r1, r3
 80014e0:	0089      	lsls	r1, r1, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	4413      	add	r3, r2
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3305      	adds	r3, #5
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4413      	add	r3, r2
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3b30      	subs	r3, #48	; 0x30
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	813b      	strh	r3, [r7, #8]
		speeds.w = ((int)(*(data_buf+6)) - '0')*1000 + ((int)(*(data_buf+7)) - '0') * 100 +  ((int)(*(data_buf+8)) - '0') * 10 + (int)(*(data_buf+9)) - '0';
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3306      	adds	r3, #6
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	3b30      	subs	r3, #48	; 0x30
 8001506:	b29b      	uxth	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	0152      	lsls	r2, r2, #5
 800150c:	1ad2      	subs	r2, r2, r3
 800150e:	0092      	lsls	r2, r2, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	b29a      	uxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3307      	adds	r3, #7
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3b30      	subs	r3, #48	; 0x30
 800151e:	b29b      	uxth	r3, r3
 8001520:	4619      	mov	r1, r3
 8001522:	0089      	lsls	r1, r1, #2
 8001524:	440b      	add	r3, r1
 8001526:	4619      	mov	r1, r3
 8001528:	0088      	lsls	r0, r1, #2
 800152a:	4619      	mov	r1, r3
 800152c:	4603      	mov	r3, r0
 800152e:	440b      	add	r3, r1
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	b29b      	uxth	r3, r3
 8001534:	4413      	add	r3, r2
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3308      	adds	r3, #8
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	3b30      	subs	r3, #48	; 0x30
 8001540:	b29b      	uxth	r3, r3
 8001542:	4619      	mov	r1, r3
 8001544:	0089      	lsls	r1, r1, #2
 8001546:	440b      	add	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29a      	uxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3309      	adds	r3, #9
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	4413      	add	r3, r2
 800155a:	b29b      	uxth	r3, r3
 800155c:	3b30      	subs	r3, #48	; 0x30
 800155e:	b29b      	uxth	r3, r3
 8001560:	817b      	strh	r3, [r7, #10]
 8001562:	e005      	b.n	8001570 <automatic+0xf4>
	}
	else
	{
		speeds.v = 1500;
 8001564:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001568:	813b      	strh	r3, [r7, #8]
		speeds.w =1500;
 800156a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800156e:	817b      	strh	r3, [r7, #10]
	}
	return speeds;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	2300      	movs	r3, #0
 8001576:	89ba      	ldrh	r2, [r7, #12]
 8001578:	f362 030f 	bfi	r3, r2, #0, #16
 800157c:	89fa      	ldrh	r2, [r7, #14]
 800157e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8001582:	4618      	mov	r0, r3
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <odometry_m1>:
int8_t dir = 0;
int8_t motor_flip_m1 = 1;  // if dir does not match
int8_t motor_flip_m2 = 1;


int32_t odometry_m1(int32_t step_counter){
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	static uint8_t encoder_pos_previous_m1 = 0;

	//Read 3 hall sensors
	HSU_Val = HAL_GPIO_ReadPin(ODO1_U_GPIO_Port, ODO1_U_Pin);
 8001598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800159c:	483f      	ldr	r0, [pc, #252]	; (800169c <odometry_m1+0x10c>)
 800159e:	f001 fd1f 	bl	8002fe0 <HAL_GPIO_ReadPin>
 80015a2:	4603      	mov	r3, r0
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b3e      	ldr	r3, [pc, #248]	; (80016a0 <odometry_m1+0x110>)
 80015a8:	701a      	strb	r2, [r3, #0]
	HSV_Val = HAL_GPIO_ReadPin(ODO1_V_GPIO_Port, ODO1_V_Pin);
 80015aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ae:	483d      	ldr	r0, [pc, #244]	; (80016a4 <odometry_m1+0x114>)
 80015b0:	f001 fd16 	bl	8002fe0 <HAL_GPIO_ReadPin>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b3b      	ldr	r3, [pc, #236]	; (80016a8 <odometry_m1+0x118>)
 80015ba:	701a      	strb	r2, [r3, #0]
	HSW_Val = HAL_GPIO_ReadPin(ODO1_W_GPIO_Port, ODO1_W_Pin);
 80015bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c0:	4838      	ldr	r0, [pc, #224]	; (80016a4 <odometry_m1+0x114>)
 80015c2:	f001 fd0d 	bl	8002fe0 <HAL_GPIO_ReadPin>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b38      	ldr	r3, [pc, #224]	; (80016ac <odometry_m1+0x11c>)
 80015cc:	701a      	strb	r2, [r3, #0]
	encoder_pos = 4 * HSU_Val + 2 * HSV_Val + 1 * HSW_Val;
 80015ce:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <odometry_m1+0x110>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4a34      	ldr	r2, [pc, #208]	; (80016a8 <odometry_m1+0x118>)
 80015d6:	7812      	ldrb	r2, [r2, #0]
 80015d8:	4413      	add	r3, r2
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <odometry_m1+0x11c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4413      	add	r3, r2
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <odometry_m1+0x120>)
 80015ea:	701a      	strb	r2, [r3, #0]

	encoder_pos_delta = encoder_pos - encoder_pos_previous_m1;
 80015ec:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <odometry_m1+0x120>)
 80015ee:	781a      	ldrb	r2, [r3, #0]
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <odometry_m1+0x124>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	b25a      	sxtb	r2, r3
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <odometry_m1+0x128>)
 80015fc:	701a      	strb	r2, [r3, #0]
	encoder_pos_sum = encoder_pos + encoder_pos_previous_m1;
 80015fe:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <odometry_m1+0x120>)
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <odometry_m1+0x124>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <odometry_m1+0x12c>)
 800160c:	701a      	strb	r2, [r3, #0]

	if (encoder_pos_delta != 0){
 800160e:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <odometry_m1+0x128>)
 8001610:	f993 3000 	ldrsb.w	r3, [r3]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d03b      	beq.n	8001690 <odometry_m1+0x100>
		// Find motor direction
		if (encoder_pos_delta > 0){
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <odometry_m1+0x128>)
 800161a:	f993 3000 	ldrsb.w	r3, [r3]
 800161e:	2b00      	cmp	r3, #0
 8001620:	dd13      	ble.n	800164a <odometry_m1+0xba>
			if (encoder_pos_sum == 8 || encoder_pos_sum == 4 || encoder_pos_sum == 9){
 8001622:	4b26      	ldr	r3, [pc, #152]	; (80016bc <odometry_m1+0x12c>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b08      	cmp	r3, #8
 8001628:	d007      	beq.n	800163a <odometry_m1+0xaa>
 800162a:	4b24      	ldr	r3, [pc, #144]	; (80016bc <odometry_m1+0x12c>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b04      	cmp	r3, #4
 8001630:	d003      	beq.n	800163a <odometry_m1+0xaa>
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <odometry_m1+0x12c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b09      	cmp	r3, #9
 8001638:	d103      	bne.n	8001642 <odometry_m1+0xb2>
				dir = 1;
 800163a:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <odometry_m1+0x130>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	e016      	b.n	8001670 <odometry_m1+0xe0>
			}
			else {
				dir = -1;
 8001642:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <odometry_m1+0x130>)
 8001644:	22ff      	movs	r2, #255	; 0xff
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	e012      	b.n	8001670 <odometry_m1+0xe0>
			}
		}
		else{
			if (encoder_pos_sum == 8 || encoder_pos_sum == 4 || encoder_pos_sum == 9){
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <odometry_m1+0x12c>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b08      	cmp	r3, #8
 8001650:	d007      	beq.n	8001662 <odometry_m1+0xd2>
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <odometry_m1+0x12c>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b04      	cmp	r3, #4
 8001658:	d003      	beq.n	8001662 <odometry_m1+0xd2>
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <odometry_m1+0x12c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b09      	cmp	r3, #9
 8001660:	d103      	bne.n	800166a <odometry_m1+0xda>
				dir = -1;
 8001662:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <odometry_m1+0x130>)
 8001664:	22ff      	movs	r2, #255	; 0xff
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e002      	b.n	8001670 <odometry_m1+0xe0>
			}
			else {
				dir = 1;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <odometry_m1+0x130>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
			}
		}
		encoder_pos_previous_m1 = encoder_pos;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <odometry_m1+0x120>)
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <odometry_m1+0x124>)
 8001676:	701a      	strb	r2, [r3, #0]
		step_counter += dir * motor_flip_m1;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <odometry_m1+0x130>)
 800167a:	f993 3000 	ldrsb.w	r3, [r3]
 800167e:	461a      	mov	r2, r3
 8001680:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <odometry_m1+0x134>)
 8001682:	f993 3000 	ldrsb.w	r3, [r3]
 8001686:	fb03 f302 	mul.w	r3, r3, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	607b      	str	r3, [r7, #4]
	}
	return step_counter;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40021400 	.word	0x40021400
 80016a0:	200002ab 	.word	0x200002ab
 80016a4:	40021800 	.word	0x40021800
 80016a8:	200002aa 	.word	0x200002aa
 80016ac:	200002ad 	.word	0x200002ad
 80016b0:	200002ac 	.word	0x200002ac
 80016b4:	20000058 	.word	0x20000058
 80016b8:	20000055 	.word	0x20000055
 80016bc:	20000056 	.word	0x20000056
 80016c0:	20000057 	.word	0x20000057
 80016c4:	20000000 	.word	0x20000000

080016c8 <odometry_m2>:


int32_t odometry_m2(int32_t step_counter){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	static uint8_t encoder_pos_previous_m2 = 0;

	//Read 3 hall sensors
	HSU_Val = HAL_GPIO_ReadPin(ODO2_U_GPIO_Port, ODO2_U_Pin);
 80016d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d4:	483f      	ldr	r0, [pc, #252]	; (80017d4 <odometry_m2+0x10c>)
 80016d6:	f001 fc83 	bl	8002fe0 <HAL_GPIO_ReadPin>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	4b3e      	ldr	r3, [pc, #248]	; (80017d8 <odometry_m2+0x110>)
 80016e0:	701a      	strb	r2, [r3, #0]
	HSV_Val = HAL_GPIO_ReadPin(ODO2_V_GPIO_Port, ODO2_V_Pin);
 80016e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e6:	483d      	ldr	r0, [pc, #244]	; (80017dc <odometry_m2+0x114>)
 80016e8:	f001 fc7a 	bl	8002fe0 <HAL_GPIO_ReadPin>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <odometry_m2+0x118>)
 80016f2:	701a      	strb	r2, [r3, #0]
	HSW_Val = HAL_GPIO_ReadPin(ODO2_W_GPIO_Port, ODO2_W_Pin);
 80016f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016f8:	4836      	ldr	r0, [pc, #216]	; (80017d4 <odometry_m2+0x10c>)
 80016fa:	f001 fc71 	bl	8002fe0 <HAL_GPIO_ReadPin>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <odometry_m2+0x11c>)
 8001704:	701a      	strb	r2, [r3, #0]
	encoder_pos = 4 * HSU_Val + 2 * HSV_Val + 1 * HSW_Val;
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <odometry_m2+0x110>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4a34      	ldr	r2, [pc, #208]	; (80017e0 <odometry_m2+0x118>)
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	4413      	add	r3, r2
 8001712:	b2db      	uxtb	r3, r3
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <odometry_m2+0x11c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4413      	add	r3, r2
 800171e:	b2da      	uxtb	r2, r3
 8001720:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <odometry_m2+0x120>)
 8001722:	701a      	strb	r2, [r3, #0]

	encoder_pos_delta = encoder_pos - encoder_pos_previous_m2;
 8001724:	4b30      	ldr	r3, [pc, #192]	; (80017e8 <odometry_m2+0x120>)
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	4b30      	ldr	r3, [pc, #192]	; (80017ec <odometry_m2+0x124>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	b25a      	sxtb	r2, r3
 8001732:	4b2f      	ldr	r3, [pc, #188]	; (80017f0 <odometry_m2+0x128>)
 8001734:	701a      	strb	r2, [r3, #0]
	encoder_pos_sum = encoder_pos + encoder_pos_previous_m2;
 8001736:	4b2c      	ldr	r3, [pc, #176]	; (80017e8 <odometry_m2+0x120>)
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <odometry_m2+0x124>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	b2da      	uxtb	r2, r3
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <odometry_m2+0x12c>)
 8001744:	701a      	strb	r2, [r3, #0]

	if (encoder_pos_delta != 0){
 8001746:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <odometry_m2+0x128>)
 8001748:	f993 3000 	ldrsb.w	r3, [r3]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d03b      	beq.n	80017c8 <odometry_m2+0x100>
		// Find motor direction
		if (encoder_pos_delta > 0){
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <odometry_m2+0x128>)
 8001752:	f993 3000 	ldrsb.w	r3, [r3]
 8001756:	2b00      	cmp	r3, #0
 8001758:	dd13      	ble.n	8001782 <odometry_m2+0xba>
			if (encoder_pos_sum == 8 || encoder_pos_sum == 4 || encoder_pos_sum == 9){
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <odometry_m2+0x12c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b08      	cmp	r3, #8
 8001760:	d007      	beq.n	8001772 <odometry_m2+0xaa>
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <odometry_m2+0x12c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b04      	cmp	r3, #4
 8001768:	d003      	beq.n	8001772 <odometry_m2+0xaa>
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <odometry_m2+0x12c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b09      	cmp	r3, #9
 8001770:	d103      	bne.n	800177a <odometry_m2+0xb2>
				dir = 1;
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <odometry_m2+0x130>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e016      	b.n	80017a8 <odometry_m2+0xe0>
			}
			else {
				dir = -1;
 800177a:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <odometry_m2+0x130>)
 800177c:	22ff      	movs	r2, #255	; 0xff
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e012      	b.n	80017a8 <odometry_m2+0xe0>
			}
		}
		else{
			if (encoder_pos_sum == 8 || encoder_pos_sum == 4 || encoder_pos_sum == 9){
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <odometry_m2+0x12c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b08      	cmp	r3, #8
 8001788:	d007      	beq.n	800179a <odometry_m2+0xd2>
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <odometry_m2+0x12c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b04      	cmp	r3, #4
 8001790:	d003      	beq.n	800179a <odometry_m2+0xd2>
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <odometry_m2+0x12c>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b09      	cmp	r3, #9
 8001798:	d103      	bne.n	80017a2 <odometry_m2+0xda>
				dir = -1;
 800179a:	4b17      	ldr	r3, [pc, #92]	; (80017f8 <odometry_m2+0x130>)
 800179c:	22ff      	movs	r2, #255	; 0xff
 800179e:	701a      	strb	r2, [r3, #0]
 80017a0:	e002      	b.n	80017a8 <odometry_m2+0xe0>
			}
			else {
				dir = 1;
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <odometry_m2+0x130>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
			}
		}
		encoder_pos_previous_m2 = encoder_pos;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <odometry_m2+0x120>)
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <odometry_m2+0x124>)
 80017ae:	701a      	strb	r2, [r3, #0]
		step_counter += dir * motor_flip_m2;
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <odometry_m2+0x130>)
 80017b2:	f993 3000 	ldrsb.w	r3, [r3]
 80017b6:	461a      	mov	r2, r3
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <odometry_m2+0x134>)
 80017ba:	f993 3000 	ldrsb.w	r3, [r3]
 80017be:	fb03 f302 	mul.w	r3, r3, r2
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	607b      	str	r3, [r7, #4]
	}
	return step_counter;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	200002ab 	.word	0x200002ab
 80017dc:	40021400 	.word	0x40021400
 80017e0:	200002aa 	.word	0x200002aa
 80017e4:	200002ad 	.word	0x200002ad
 80017e8:	200002ac 	.word	0x200002ac
 80017ec:	20000059 	.word	0x20000059
 80017f0:	20000055 	.word	0x20000055
 80017f4:	20000056 	.word	0x20000056
 80017f8:	20000057 	.word	0x20000057
 80017fc:	20000001 	.word	0x20000001

08001800 <sonar_s1>:
#include "i2c.h"

volatile uint32_t zero_time1 = 0;
volatile uint32_t zero_time2 = 0;
volatile uint32_t zero_time3 = 0;
int16_t sonar_s1(uint32_t range){
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	; 0x28
 8001804:	af02      	add	r7, sp, #8
 8001806:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret;
	uint8_t buf[12];
	int16_t val_high;
	int16_t val_low;
	buf[0] = REG_ADDR;
 8001808:	2351      	movs	r3, #81	; 0x51
 800180a:	733b      	strb	r3, [r7, #12]
	static uint8_t run_once = 0;
	if (run_once == 0)
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <sonar_s1+0xac>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10f      	bne.n	8001834 <sonar_s1+0x34>
	{
		ret = HAL_I2C_Master_Transmit(&hi2c2, Sonar_ADDR1, buf, 1, HAL_MAX_DELAY);
 8001814:	2329      	movs	r3, #41	; 0x29
 8001816:	b299      	uxth	r1, r3
 8001818:	f107 020c 	add.w	r2, r7, #12
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2301      	movs	r3, #1
 8001824:	4822      	ldr	r0, [pc, #136]	; (80018b0 <sonar_s1+0xb0>)
 8001826:	f001 fc9d 	bl	8003164 <HAL_I2C_Master_Transmit>
 800182a:	4603      	mov	r3, r0
 800182c:	77fb      	strb	r3, [r7, #31]
		run_once = 1;
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <sonar_s1+0xac>)
 8001830:	2201      	movs	r2, #1
 8001832:	701a      	strb	r2, [r3, #0]
	}
	if ((HAL_GetTick() - zero_time1) >= 80)
 8001834:	f001 f854 	bl	80028e0 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <sonar_s1+0xb4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b4f      	cmp	r3, #79	; 0x4f
 8001842:	d92d      	bls.n	80018a0 <sonar_s1+0xa0>
	{
		if ( ret != HAL_OK )
 8001844:	7ffb      	ldrb	r3, [r7, #31]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <sonar_s1+0x52>
		{
			range = 707;
 800184a:	f240 23c3 	movw	r3, #707	; 0x2c3
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	e01e      	b.n	8001890 <sonar_s1+0x90>
		}
		else
		{
			ret = HAL_I2C_Master_Receive(&hi2c2, Sonar_ADDR1, buf, 2, HAL_MAX_DELAY);
 8001852:	2329      	movs	r3, #41	; 0x29
 8001854:	b299      	uxth	r1, r3
 8001856:	f107 020c 	add.w	r2, r7, #12
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2302      	movs	r3, #2
 8001862:	4813      	ldr	r0, [pc, #76]	; (80018b0 <sonar_s1+0xb0>)
 8001864:	f001 fd72 	bl	800334c <HAL_I2C_Master_Receive>
 8001868:	4603      	mov	r3, r0
 800186a:	77fb      	strb	r3, [r7, #31]
			if ( ret != HAL_OK )
 800186c:	7ffb      	ldrb	r3, [r7, #31]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <sonar_s1+0x7a>
			{
				range = 707;
 8001872:	f240 23c3 	movw	r3, #707	; 0x2c3
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	e00a      	b.n	8001890 <sonar_s1+0x90>
			}
			else
			{
				val_high = ((int16_t)buf[0]);
 800187a:	7b3b      	ldrb	r3, [r7, #12]
 800187c:	83bb      	strh	r3, [r7, #28]
				val_low = ((int16_t)buf[1]);
 800187e:	7b7b      	ldrb	r3, [r7, #13]
 8001880:	837b      	strh	r3, [r7, #26]
				range = (val_high * 256) + val_low;
 8001882:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001886:	021a      	lsls	r2, r3, #8
 8001888:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800188c:	4413      	add	r3, r2
 800188e:	607b      	str	r3, [r7, #4]
			}
		}
		zero_time1 = HAL_GetTick();
 8001890:	f001 f826 	bl	80028e0 <HAL_GetTick>
 8001894:	4603      	mov	r3, r0
 8001896:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <sonar_s1+0xb4>)
 8001898:	6013      	str	r3, [r2, #0]
		run_once = 0;
 800189a:	4b04      	ldr	r3, [pc, #16]	; (80018ac <sonar_s1+0xac>)
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
	}
	return range;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	b21b      	sxth	r3, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000068 	.word	0x20000068
 80018b0:	200000b8 	.word	0x200000b8
 80018b4:	2000005c 	.word	0x2000005c

080018b8 <sonar_s2>:

int16_t sonar_s2(uint32_t range){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08a      	sub	sp, #40	; 0x28
 80018bc:	af02      	add	r7, sp, #8
 80018be:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t buf[12];
	int16_t val_high;
	int16_t val_low;
	buf[0] = REG_ADDR;
 80018c0:	2351      	movs	r3, #81	; 0x51
 80018c2:	733b      	strb	r3, [r7, #12]
	//static uint32_t current_time2 = HAL_GetTick();
	static uint8_t run_once1 = 0;
	if (run_once1 == 0)
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <sonar_s2+0xac>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10f      	bne.n	80018ec <sonar_s2+0x34>
	{
		ret = HAL_I2C_Master_Transmit(&hi2c2, Sonar_ADDR2, buf, 1, HAL_MAX_DELAY);
 80018cc:	23e4      	movs	r3, #228	; 0xe4
 80018ce:	b299      	uxth	r1, r3
 80018d0:	f107 020c 	add.w	r2, r7, #12
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2301      	movs	r3, #1
 80018dc:	4822      	ldr	r0, [pc, #136]	; (8001968 <sonar_s2+0xb0>)
 80018de:	f001 fc41 	bl	8003164 <HAL_I2C_Master_Transmit>
 80018e2:	4603      	mov	r3, r0
 80018e4:	77fb      	strb	r3, [r7, #31]
		run_once1 = 1;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <sonar_s2+0xac>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
	}
	if ((HAL_GetTick() - zero_time2) >= 80)
 80018ec:	f000 fff8 	bl	80028e0 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <sonar_s2+0xb4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b4f      	cmp	r3, #79	; 0x4f
 80018fa:	d92d      	bls.n	8001958 <sonar_s2+0xa0>
	{
		if ( ret != HAL_OK )
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <sonar_s2+0x52>
		{
			range = 707;
 8001902:	f240 23c3 	movw	r3, #707	; 0x2c3
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	e01e      	b.n	8001948 <sonar_s2+0x90>
		}
		else
		{
			ret = HAL_I2C_Master_Receive(&hi2c2, Sonar_ADDR2, buf, 2, HAL_MAX_DELAY);
 800190a:	23e4      	movs	r3, #228	; 0xe4
 800190c:	b299      	uxth	r1, r3
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2302      	movs	r3, #2
 800191a:	4813      	ldr	r0, [pc, #76]	; (8001968 <sonar_s2+0xb0>)
 800191c:	f001 fd16 	bl	800334c <HAL_I2C_Master_Receive>
 8001920:	4603      	mov	r3, r0
 8001922:	77fb      	strb	r3, [r7, #31]
			if ( ret != HAL_OK )
 8001924:	7ffb      	ldrb	r3, [r7, #31]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <sonar_s2+0x7a>
			{
				range = 707;
 800192a:	f240 23c3 	movw	r3, #707	; 0x2c3
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	e00a      	b.n	8001948 <sonar_s2+0x90>
			}
			else
			{
				val_high = ((int16_t)buf[0]);
 8001932:	7b3b      	ldrb	r3, [r7, #12]
 8001934:	83bb      	strh	r3, [r7, #28]
				val_low = ((int16_t)buf[1]);
 8001936:	7b7b      	ldrb	r3, [r7, #13]
 8001938:	837b      	strh	r3, [r7, #26]
				range = (val_high * 256) + val_low;
 800193a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800193e:	021a      	lsls	r2, r3, #8
 8001940:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001944:	4413      	add	r3, r2
 8001946:	607b      	str	r3, [r7, #4]
			}
		}
		zero_time2 = HAL_GetTick();
 8001948:	f000 ffca 	bl	80028e0 <HAL_GetTick>
 800194c:	4603      	mov	r3, r0
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <sonar_s2+0xb4>)
 8001950:	6013      	str	r3, [r2, #0]
		run_once1 = 0;
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <sonar_s2+0xac>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
	}


	return range;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	b21b      	sxth	r3, r3
}
 800195c:	4618      	mov	r0, r3
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000069 	.word	0x20000069
 8001968:	200000b8 	.word	0x200000b8
 800196c:	20000060 	.word	0x20000060

08001970 <sonar_s3>:

int16_t sonar_s3(uint32_t range){
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af02      	add	r7, sp, #8
 8001976:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	uint8_t buf[12];
	int16_t val_high;
	int16_t val_low;
	buf[0] = REG_ADDR;
 8001978:	2351      	movs	r3, #81	; 0x51
 800197a:	733b      	strb	r3, [r7, #12]
	static uint8_t run_once2 = 0;
	if (run_once2 == 0)
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <sonar_s3+0xac>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10f      	bne.n	80019a4 <sonar_s3+0x34>
	{
		ret = HAL_I2C_Master_Transmit(&hi2c2, Sonar_ADDR3, buf, 1, HAL_MAX_DELAY);
 8001984:	23e2      	movs	r3, #226	; 0xe2
 8001986:	b299      	uxth	r1, r3
 8001988:	f107 020c 	add.w	r2, r7, #12
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2301      	movs	r3, #1
 8001994:	4822      	ldr	r0, [pc, #136]	; (8001a20 <sonar_s3+0xb0>)
 8001996:	f001 fbe5 	bl	8003164 <HAL_I2C_Master_Transmit>
 800199a:	4603      	mov	r3, r0
 800199c:	77fb      	strb	r3, [r7, #31]
		run_once2 = 1;
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <sonar_s3+0xac>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	701a      	strb	r2, [r3, #0]
	}
	if ((HAL_GetTick() - zero_time3) >= 80)
 80019a4:	f000 ff9c 	bl	80028e0 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <sonar_s3+0xb4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b4f      	cmp	r3, #79	; 0x4f
 80019b2:	d92d      	bls.n	8001a10 <sonar_s3+0xa0>
	{
		if ( ret != HAL_OK )
 80019b4:	7ffb      	ldrb	r3, [r7, #31]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <sonar_s3+0x52>
		{
			range = 707;
 80019ba:	f240 23c3 	movw	r3, #707	; 0x2c3
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	e01e      	b.n	8001a00 <sonar_s3+0x90>
		}
		else
		{
			ret = HAL_I2C_Master_Receive(&hi2c2, Sonar_ADDR3, buf, 2, HAL_MAX_DELAY);
 80019c2:	23e2      	movs	r3, #226	; 0xe2
 80019c4:	b299      	uxth	r1, r3
 80019c6:	f107 020c 	add.w	r2, r7, #12
 80019ca:	f04f 33ff 	mov.w	r3, #4294967295
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2302      	movs	r3, #2
 80019d2:	4813      	ldr	r0, [pc, #76]	; (8001a20 <sonar_s3+0xb0>)
 80019d4:	f001 fcba 	bl	800334c <HAL_I2C_Master_Receive>
 80019d8:	4603      	mov	r3, r0
 80019da:	77fb      	strb	r3, [r7, #31]
			if ( ret != HAL_OK )
 80019dc:	7ffb      	ldrb	r3, [r7, #31]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <sonar_s3+0x7a>
			{
				range = 707;
 80019e2:	f240 23c3 	movw	r3, #707	; 0x2c3
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	e00a      	b.n	8001a00 <sonar_s3+0x90>
			}
			else
			{
				val_high = ((int16_t)buf[0]);
 80019ea:	7b3b      	ldrb	r3, [r7, #12]
 80019ec:	83bb      	strh	r3, [r7, #28]
				val_low = ((int16_t)buf[1]);
 80019ee:	7b7b      	ldrb	r3, [r7, #13]
 80019f0:	837b      	strh	r3, [r7, #26]
				range = (val_high * 256) + val_low;
 80019f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019f6:	021a      	lsls	r2, r3, #8
 80019f8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019fc:	4413      	add	r3, r2
 80019fe:	607b      	str	r3, [r7, #4]
			}
		}
		zero_time3 = HAL_GetTick();
 8001a00:	f000 ff6e 	bl	80028e0 <HAL_GetTick>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <sonar_s3+0xb4>)
 8001a08:	6013      	str	r3, [r2, #0]
		run_once2 = 0;
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <sonar_s3+0xac>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
	}


	return range;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	b21b      	sxth	r3, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3720      	adds	r7, #32
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000006a 	.word	0x2000006a
 8001a20:	200000b8 	.word	0x200000b8
 8001a24:	20000064 	.word	0x20000064

08001a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_MspInit+0x44>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <HAL_MspInit+0x44>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_MspInit+0x44>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_MspInit+0x44>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a08      	ldr	r2, [pc, #32]	; (8001a6c <HAL_MspInit+0x44>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_MspInit+0x44>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <NMI_Handler+0x4>

08001a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <MemManage_Handler+0x4>

08001a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a86:	e7fe      	b.n	8001a86 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001abc:	f000 fefc 	bl	80028b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_CC_IRQn 0 */
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <USART3_IRQHandler+0x18>)
 8001b02:	f003 fcef 	bl	80054e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, rec_data, 10);
 8001b06:	220a      	movs	r2, #10
 8001b08:	4903      	ldr	r1, [pc, #12]	; (8001b18 <USART3_IRQHandler+0x1c>)
 8001b0a:	4802      	ldr	r0, [pc, #8]	; (8001b14 <USART3_IRQHandler+0x18>)
 8001b0c:	f003 fcad 	bl	800546a <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000198 	.word	0x20000198
 8001b18:	200002a0 	.word	0x200002a0

08001b1c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream2_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2_Stream6_IRQn 0 */

  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <UART7_IRQHandler+0x10>)
 8001b3e:	f003 fcd1 	bl	80054e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000104 	.word	0x20000104

08001b4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <SystemInit+0x28>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <SystemInit+0x28>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SystemInit+0x28>)
 8001b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b66:	609a      	str	r2, [r3, #8]
#endif
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	; (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	; (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	; (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	; 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	; 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	601a      	str	r2, [r3, #0]
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d028      	beq.n	8001d0e <LL_TIM_OC_DisableFast+0x62>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d023      	beq.n	8001d0a <LL_TIM_OC_DisableFast+0x5e>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b10      	cmp	r3, #16
 8001cc6:	d01e      	beq.n	8001d06 <LL_TIM_OC_DisableFast+0x5a>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b40      	cmp	r3, #64	; 0x40
 8001ccc:	d019      	beq.n	8001d02 <LL_TIM_OC_DisableFast+0x56>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd4:	d013      	beq.n	8001cfe <LL_TIM_OC_DisableFast+0x52>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cdc:	d00d      	beq.n	8001cfa <LL_TIM_OC_DisableFast+0x4e>
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce4:	d007      	beq.n	8001cf6 <LL_TIM_OC_DisableFast+0x4a>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cec:	d101      	bne.n	8001cf2 <LL_TIM_OC_DisableFast+0x46>
 8001cee:	2307      	movs	r3, #7
 8001cf0:	e00e      	b.n	8001d10 <LL_TIM_OC_DisableFast+0x64>
 8001cf2:	2308      	movs	r3, #8
 8001cf4:	e00c      	b.n	8001d10 <LL_TIM_OC_DisableFast+0x64>
 8001cf6:	2306      	movs	r3, #6
 8001cf8:	e00a      	b.n	8001d10 <LL_TIM_OC_DisableFast+0x64>
 8001cfa:	2305      	movs	r3, #5
 8001cfc:	e008      	b.n	8001d10 <LL_TIM_OC_DisableFast+0x64>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	e006      	b.n	8001d10 <LL_TIM_OC_DisableFast+0x64>
 8001d02:	2303      	movs	r3, #3
 8001d04:	e004      	b.n	8001d10 <LL_TIM_OC_DisableFast+0x64>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e002      	b.n	8001d10 <LL_TIM_OC_DisableFast+0x64>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <LL_TIM_OC_DisableFast+0x64>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3318      	adds	r3, #24
 8001d16:	4619      	mov	r1, r3
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <LL_TIM_OC_DisableFast+0x9c>)
 8001d1c:	5cd3      	ldrb	r3, [r2, r3]
 8001d1e:	440b      	add	r3, r1
 8001d20:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	4908      	ldr	r1, [pc, #32]	; (8001d4c <LL_TIM_OC_DisableFast+0xa0>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	2304      	movs	r3, #4
 8001d30:	408b      	lsls	r3, r1
 8001d32:	43db      	mvns	r3, r3
 8001d34:	401a      	ands	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	601a      	str	r2, [r3, #0]

}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	08007144 	.word	0x08007144
 8001d4c:	08007150 	.word	0x08007150

08001d50 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d028      	beq.n	8001db2 <LL_TIM_OC_EnablePreload+0x62>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d023      	beq.n	8001dae <LL_TIM_OC_EnablePreload+0x5e>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d01e      	beq.n	8001daa <LL_TIM_OC_EnablePreload+0x5a>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	2b40      	cmp	r3, #64	; 0x40
 8001d70:	d019      	beq.n	8001da6 <LL_TIM_OC_EnablePreload+0x56>
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d78:	d013      	beq.n	8001da2 <LL_TIM_OC_EnablePreload+0x52>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d80:	d00d      	beq.n	8001d9e <LL_TIM_OC_EnablePreload+0x4e>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d88:	d007      	beq.n	8001d9a <LL_TIM_OC_EnablePreload+0x4a>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d101      	bne.n	8001d96 <LL_TIM_OC_EnablePreload+0x46>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e00e      	b.n	8001db4 <LL_TIM_OC_EnablePreload+0x64>
 8001d96:	2308      	movs	r3, #8
 8001d98:	e00c      	b.n	8001db4 <LL_TIM_OC_EnablePreload+0x64>
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	e00a      	b.n	8001db4 <LL_TIM_OC_EnablePreload+0x64>
 8001d9e:	2305      	movs	r3, #5
 8001da0:	e008      	b.n	8001db4 <LL_TIM_OC_EnablePreload+0x64>
 8001da2:	2304      	movs	r3, #4
 8001da4:	e006      	b.n	8001db4 <LL_TIM_OC_EnablePreload+0x64>
 8001da6:	2303      	movs	r3, #3
 8001da8:	e004      	b.n	8001db4 <LL_TIM_OC_EnablePreload+0x64>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e002      	b.n	8001db4 <LL_TIM_OC_EnablePreload+0x64>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <LL_TIM_OC_EnablePreload+0x64>
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3318      	adds	r3, #24
 8001dba:	4619      	mov	r1, r3
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <LL_TIM_OC_EnablePreload+0x98>)
 8001dc0:	5cd3      	ldrb	r3, [r2, r3]
 8001dc2:	440b      	add	r3, r1
 8001dc4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <LL_TIM_OC_EnablePreload+0x9c>)
 8001dce:	5ccb      	ldrb	r3, [r1, r3]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	408b      	lsls	r3, r1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	601a      	str	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	08007144 	.word	0x08007144
 8001dec:	08007150 	.word	0x08007150

08001df0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <LL_TIM_SetClockSource+0x28>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	431a      	orrs	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	609a      	str	r2, [r3, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	fffebff8 	.word	0xfffebff8

08001e1c <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	605a      	str	r2, [r3, #4]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	605a      	str	r2, [r3, #4]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001e9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40023800 	.word	0x40023800

08001ee8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001ef4:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <LL_DMA_SetDataTransferDirection+0x44>)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	4413      	add	r3, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	461a      	mov	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4413      	add	r3, r2
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f08:	4908      	ldr	r1, [pc, #32]	; (8001f2c <LL_DMA_SetDataTransferDirection+0x44>)
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	440b      	add	r3, r1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	440b      	add	r3, r1
 8001f16:	4619      	mov	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	3714      	adds	r7, #20
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	0800715c 	.word	0x0800715c

08001f30 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <LL_DMA_SetMode+0x44>)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4413      	add	r3, r2
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 8001f50:	4908      	ldr	r1, [pc, #32]	; (8001f74 <LL_DMA_SetMode+0x44>)
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	440b      	add	r3, r1
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	440b      	add	r3, r1
 8001f5e:	4619      	mov	r1, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	0800715c 	.word	0x0800715c

08001f78 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8001f84:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <LL_DMA_SetPeriphIncMode+0x44>)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	4413      	add	r3, r2
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4413      	add	r3, r2
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001f98:	4908      	ldr	r1, [pc, #32]	; (8001fbc <LL_DMA_SetPeriphIncMode+0x44>)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	440b      	add	r3, r1
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	440b      	add	r3, r1
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	0800715c 	.word	0x0800715c

08001fc0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <LL_DMA_SetMemoryIncMode+0x44>)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	4413      	add	r3, r2
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001fe0:	4908      	ldr	r1, [pc, #32]	; (8002004 <LL_DMA_SetMemoryIncMode+0x44>)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	440b      	add	r3, r1
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	440b      	add	r3, r1
 8001fee:	4619      	mov	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	0800715c 	.word	0x0800715c

08002008 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002014:	4a0d      	ldr	r2, [pc, #52]	; (800204c <LL_DMA_SetPeriphSize+0x44>)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4413      	add	r3, r2
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8002028:	4908      	ldr	r1, [pc, #32]	; (800204c <LL_DMA_SetPeriphSize+0x44>)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	440b      	add	r3, r1
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	440b      	add	r3, r1
 8002036:	4619      	mov	r1, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	0800715c 	.word	0x0800715c

08002050 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <LL_DMA_SetMemorySize+0x44>)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4413      	add	r3, r2
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8002070:	4908      	ldr	r1, [pc, #32]	; (8002094 <LL_DMA_SetMemorySize+0x44>)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	440b      	add	r3, r1
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	440b      	add	r3, r1
 800207e:	4619      	mov	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	0800715c 	.word	0x0800715c

08002098 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <LL_DMA_SetStreamPriorityLevel+0x44>)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4413      	add	r3, r2
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4413      	add	r3, r2
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020b8:	4908      	ldr	r1, [pc, #32]	; (80020dc <LL_DMA_SetStreamPriorityLevel+0x44>)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	440b      	add	r3, r1
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	440b      	add	r3, r1
 80020c6:	4619      	mov	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	0800715c 	.word	0x0800715c

080020e0 <LL_DMA_SetChannelSelection>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80020ec:	4a0d      	ldr	r2, [pc, #52]	; (8002124 <LL_DMA_SetChannelSelection+0x44>)
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	4413      	add	r3, r2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	4413      	add	r3, r2
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 52f0 	bic.w	r2, r3, #503316480	; 0x1e000000
 8002100:	4908      	ldr	r1, [pc, #32]	; (8002124 <LL_DMA_SetChannelSelection+0x44>)
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	440b      	add	r3, r1
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	440b      	add	r3, r1
 800210e:	4619      	mov	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	0800715c 	.word	0x0800715c

08002128 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <LL_DMA_DisableFifoMode+0x3c>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4413      	add	r3, r2
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4413      	add	r3, r2
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	4908      	ldr	r1, [pc, #32]	; (8002164 <LL_DMA_DisableFifoMode+0x3c>)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	440a      	add	r2, r1
 8002148:	7812      	ldrb	r2, [r2, #0]
 800214a:	4611      	mov	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	440a      	add	r2, r1
 8002150:	f023 0304 	bic.w	r3, r3, #4
 8002154:	6153      	str	r3, [r2, #20]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	0800715c 	.word	0x0800715c

08002168 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b09e      	sub	sp, #120	; 0x78
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800216e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800217e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002182:	2220      	movs	r2, #32
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f004 ff7a 	bl	8007080 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	2228      	movs	r2, #40	; 0x28
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f004 ff73 	bl	8007080 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7ff fe84 	bl	8001eb8 <LL_APB2_GRP1_EnableClock>

  /* TIM1 DMA Init */

  /* TIM1_CH3 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_6, LL_DMA_CHANNEL_6);
 80021b0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80021b4:	2106      	movs	r1, #6
 80021b6:	489e      	ldr	r0, [pc, #632]	; (8002430 <MX_TIM1_Init+0x2c8>)
 80021b8:	f7ff ff92 	bl	80020e0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80021bc:	2200      	movs	r2, #0
 80021be:	2106      	movs	r1, #6
 80021c0:	489b      	ldr	r0, [pc, #620]	; (8002430 <MX_TIM1_Init+0x2c8>)
 80021c2:	f7ff fe91 	bl	8001ee8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_6, LL_DMA_PRIORITY_LOW);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2106      	movs	r1, #6
 80021ca:	4899      	ldr	r0, [pc, #612]	; (8002430 <MX_TIM1_Init+0x2c8>)
 80021cc:	f7ff ff64 	bl	8002098 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MODE_NORMAL);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2106      	movs	r1, #6
 80021d4:	4896      	ldr	r0, [pc, #600]	; (8002430 <MX_TIM1_Init+0x2c8>)
 80021d6:	f7ff feab 	bl	8001f30 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_PERIPH_NOINCREMENT);
 80021da:	2200      	movs	r2, #0
 80021dc:	2106      	movs	r1, #6
 80021de:	4894      	ldr	r0, [pc, #592]	; (8002430 <MX_TIM1_Init+0x2c8>)
 80021e0:	f7ff feca 	bl	8001f78 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_6, LL_DMA_MEMORY_INCREMENT);
 80021e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e8:	2106      	movs	r1, #6
 80021ea:	4891      	ldr	r0, [pc, #580]	; (8002430 <MX_TIM1_Init+0x2c8>)
 80021ec:	f7ff fee8 	bl	8001fc0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_6, LL_DMA_PDATAALIGN_HALFWORD);
 80021f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f4:	2106      	movs	r1, #6
 80021f6:	488e      	ldr	r0, [pc, #568]	; (8002430 <MX_TIM1_Init+0x2c8>)
 80021f8:	f7ff ff06 	bl	8002008 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_6, LL_DMA_MDATAALIGN_HALFWORD);
 80021fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002200:	2106      	movs	r1, #6
 8002202:	488b      	ldr	r0, [pc, #556]	; (8002430 <MX_TIM1_Init+0x2c8>)
 8002204:	f7ff ff24 	bl	8002050 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_6);
 8002208:	2106      	movs	r1, #6
 800220a:	4889      	ldr	r0, [pc, #548]	; (8002430 <MX_TIM1_Init+0x2c8>)
 800220c:	f7ff ff8c 	bl	8002128 <LL_DMA_DisableFifoMode>

  /* TIM1_CH2 Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_2, LL_DMA_CHANNEL_6);
 8002210:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002214:	2102      	movs	r1, #2
 8002216:	4886      	ldr	r0, [pc, #536]	; (8002430 <MX_TIM1_Init+0x2c8>)
 8002218:	f7ff ff62 	bl	80020e0 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800221c:	2200      	movs	r2, #0
 800221e:	2102      	movs	r1, #2
 8002220:	4883      	ldr	r0, [pc, #524]	; (8002430 <MX_TIM1_Init+0x2c8>)
 8002222:	f7ff fe61 	bl	8001ee8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_2, LL_DMA_PRIORITY_LOW);
 8002226:	2200      	movs	r2, #0
 8002228:	2102      	movs	r1, #2
 800222a:	4881      	ldr	r0, [pc, #516]	; (8002430 <MX_TIM1_Init+0x2c8>)
 800222c:	f7ff ff34 	bl	8002098 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MODE_NORMAL);
 8002230:	2200      	movs	r2, #0
 8002232:	2102      	movs	r1, #2
 8002234:	487e      	ldr	r0, [pc, #504]	; (8002430 <MX_TIM1_Init+0x2c8>)
 8002236:	f7ff fe7b 	bl	8001f30 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_PERIPH_NOINCREMENT);
 800223a:	2200      	movs	r2, #0
 800223c:	2102      	movs	r1, #2
 800223e:	487c      	ldr	r0, [pc, #496]	; (8002430 <MX_TIM1_Init+0x2c8>)
 8002240:	f7ff fe9a 	bl	8001f78 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_2, LL_DMA_MEMORY_INCREMENT);
 8002244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002248:	2102      	movs	r1, #2
 800224a:	4879      	ldr	r0, [pc, #484]	; (8002430 <MX_TIM1_Init+0x2c8>)
 800224c:	f7ff feb8 	bl	8001fc0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_2, LL_DMA_PDATAALIGN_HALFWORD);
 8002250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002254:	2102      	movs	r1, #2
 8002256:	4876      	ldr	r0, [pc, #472]	; (8002430 <MX_TIM1_Init+0x2c8>)
 8002258:	f7ff fed6 	bl	8002008 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_2, LL_DMA_MDATAALIGN_HALFWORD);
 800225c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002260:	2102      	movs	r1, #2
 8002262:	4873      	ldr	r0, [pc, #460]	; (8002430 <MX_TIM1_Init+0x2c8>)
 8002264:	f7ff fef4 	bl	8002050 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_2);
 8002268:	2102      	movs	r1, #2
 800226a:	4871      	ldr	r0, [pc, #452]	; (8002430 <MX_TIM1_Init+0x2c8>)
 800226c:	f7ff ff5c 	bl	8002128 <LL_DMA_DisableFifoMode>

  /* TIM1 interrupt Init */
  NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002270:	f7ff fc82 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8002274:	4603      	mov	r3, r0
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fcd2 	bl	8001c24 <NVIC_EncodePriority>
 8002280:	4603      	mov	r3, r0
 8002282:	4619      	mov	r1, r3
 8002284:	2018      	movs	r0, #24
 8002286:	f7ff fca3 	bl	8001bd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800228a:	2018      	movs	r0, #24
 800228c:	f7ff fc82 	bl	8001b94 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_UP_TIM10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002290:	f7ff fc72 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8002294:	4603      	mov	r3, r0
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fcc2 	bl	8001c24 <NVIC_EncodePriority>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4619      	mov	r1, r3
 80022a4:	2019      	movs	r0, #25
 80022a6:	f7ff fc93 	bl	8001bd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022aa:	2019      	movs	r0, #25
 80022ac:	f7ff fc72 	bl	8001b94 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022b0:	f7ff fc62 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fcb2 	bl	8001c24 <NVIC_EncodePriority>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4619      	mov	r1, r3
 80022c4:	201a      	movs	r0, #26
 80022c6:	f7ff fc83 	bl	8001bd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80022ca:	201a      	movs	r0, #26
 80022cc:	f7ff fc62 	bl	8001b94 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM1_CC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80022d0:	f7ff fc52 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fca2 	bl	8001c24 <NVIC_EncodePriority>
 80022e0:	4603      	mov	r3, r0
 80022e2:	4619      	mov	r1, r3
 80022e4:	201b      	movs	r0, #27
 80022e6:	f7ff fc73 	bl	8001bd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022ea:	201b      	movs	r0, #27
 80022ec:	f7ff fc52 	bl	8001b94 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 48000-LL_TIM_IC_FILTER_FDIV1_N2;
 80022f0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80022f4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80022f8:	2300      	movs	r3, #0
 80022fa:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 2000 -LL_TIM_IC_FILTER_FDIV1_N2;
 80022fc:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <MX_TIM1_Init+0x2cc>)
 80022fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002300:	2300      	movs	r3, #0
 8002302:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002308:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800230c:	4619      	mov	r1, r3
 800230e:	484a      	ldr	r0, [pc, #296]	; (8002438 <MX_TIM1_Init+0x2d0>)
 8002310:	f004 fab4 	bl	800687c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002314:	4848      	ldr	r0, [pc, #288]	; (8002438 <MX_TIM1_Init+0x2d0>)
 8002316:	f7ff fcb8 	bl	8001c8a <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800231a:	2100      	movs	r1, #0
 800231c:	4846      	ldr	r0, [pc, #280]	; (8002438 <MX_TIM1_Init+0x2d0>)
 800231e:	f7ff fd67 	bl	8001df0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 8002322:	2300      	movs	r3, #0
 8002324:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002326:	2300      	movs	r3, #0
 8002328:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800232a:	2300      	movs	r3, #0
 800232c:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002332:	2300      	movs	r3, #0
 8002334:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002336:	2300      	movs	r3, #0
 8002338:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002342:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002346:	461a      	mov	r2, r3
 8002348:	2110      	movs	r1, #16
 800234a:	483b      	ldr	r0, [pc, #236]	; (8002438 <MX_TIM1_Init+0x2d0>)
 800234c:	f004 fb30 	bl	80069b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH2);
 8002350:	2110      	movs	r1, #16
 8002352:	4839      	ldr	r0, [pc, #228]	; (8002438 <MX_TIM1_Init+0x2d0>)
 8002354:	f7ff fcaa 	bl	8001cac <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH3);
 8002358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800235c:	4836      	ldr	r0, [pc, #216]	; (8002438 <MX_TIM1_Init+0x2d0>)
 800235e:	f7ff fcf7 	bl	8001d50 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002362:	2360      	movs	r3, #96	; 0x60
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8002366:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800236a:	461a      	mov	r2, r3
 800236c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002370:	4831      	ldr	r0, [pc, #196]	; (8002438 <MX_TIM1_Init+0x2d0>)
 8002372:	f004 fb1d 	bl	80069b0 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH3);
 8002376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800237a:	482f      	ldr	r0, [pc, #188]	; (8002438 <MX_TIM1_Init+0x2d0>)
 800237c:	f7ff fc96 	bl	8001cac <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002380:	2100      	movs	r1, #0
 8002382:	482d      	ldr	r0, [pc, #180]	; (8002438 <MX_TIM1_Init+0x2d0>)
 8002384:	f7ff fd4a 	bl	8001e1c <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8002388:	2100      	movs	r1, #0
 800238a:	482b      	ldr	r0, [pc, #172]	; (8002438 <MX_TIM1_Init+0x2d0>)
 800238c:	f7ff fd59 	bl	8001e42 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002390:	4829      	ldr	r0, [pc, #164]	; (8002438 <MX_TIM1_Init+0x2d0>)
 8002392:	f7ff fd69 	bl	8001e68 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 800239e:	2300      	movs	r3, #0
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 0;
 80023a2:	2300      	movs	r3, #0
 80023a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80023ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 80023b2:	2300      	movs	r3, #0
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 80023ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023be:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 80023c0:	2300      	movs	r3, #0
 80023c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	4619      	mov	r1, r3
 80023ce:	481a      	ldr	r0, [pc, #104]	; (8002438 <MX_TIM1_Init+0x2d0>)
 80023d0:	f004 fb4e 	bl	8006a70 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80023d4:	2002      	movs	r0, #2
 80023d6:	f7ff fd57 	bl	8001e88 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80023da:	2001      	movs	r0, #1
 80023dc:	f7ff fd54 	bl	8001e88 <LL_AHB1_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PB0     ------> TIM1_CH2N
    PA10     ------> TIM1_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80023e0:	2301      	movs	r3, #1
 80023e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80023e4:	2302      	movs	r3, #2
 80023e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	4619      	mov	r1, r3
 80023fc:	480f      	ldr	r0, [pc, #60]	; (800243c <MX_TIM1_Init+0x2d4>)
 80023fe:	f004 f938 	bl	8006672 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002406:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002408:	2302      	movs	r3, #2
 800240a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002418:	2301      	movs	r3, #1
 800241a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	4619      	mov	r1, r3
 8002420:	4807      	ldr	r0, [pc, #28]	; (8002440 <MX_TIM1_Init+0x2d8>)
 8002422:	f004 f926 	bl	8006672 <LL_GPIO_Init>

}
 8002426:	bf00      	nop
 8002428:	3778      	adds	r7, #120	; 0x78
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40026400 	.word	0x40026400
 8002434:	fff007d0 	.word	0xfff007d0
 8002438:	40010000 	.word	0x40010000
 800243c:	40020400 	.word	0x40020400
 8002440:	40020000 	.word	0x40020000

08002444 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <MX_TIM3_Init+0x94>)
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <MX_TIM3_Init+0x98>)
 8002466:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000 -1;
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <MX_TIM3_Init+0x94>)
 800246a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800246e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002470:	4b19      	ldr	r3, [pc, #100]	; (80024d8 <MX_TIM3_Init+0x94>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250 -1;
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <MX_TIM3_Init+0x94>)
 8002478:	22f9      	movs	r2, #249	; 0xf9
 800247a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <MX_TIM3_Init+0x94>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <MX_TIM3_Init+0x94>)
 8002484:	2280      	movs	r2, #128	; 0x80
 8002486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002488:	4813      	ldr	r0, [pc, #76]	; (80024d8 <MX_TIM3_Init+0x94>)
 800248a:	f002 fc27 	bl	8004cdc <HAL_TIM_Base_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002494:	f7fe fed6 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800249c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800249e:	f107 0310 	add.w	r3, r7, #16
 80024a2:	4619      	mov	r1, r3
 80024a4:	480c      	ldr	r0, [pc, #48]	; (80024d8 <MX_TIM3_Init+0x94>)
 80024a6:	f002 fc71 	bl	8004d8c <HAL_TIM_ConfigClockSource>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80024b0:	f7fe fec8 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4805      	ldr	r0, [pc, #20]	; (80024d8 <MX_TIM3_Init+0x94>)
 80024c2:	f002 fe63 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80024cc:	f7fe feba 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	3720      	adds	r7, #32
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	200002fc 	.word	0x200002fc
 80024dc:	40000400 	.word	0x40000400

080024e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024e6:	f107 0310 	add.w	r3, r7, #16
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
 80024f0:	609a      	str	r2, [r3, #8]
 80024f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	605a      	str	r2, [r3, #4]
 80024fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <MX_TIM4_Init+0x94>)
 8002500:	4a1d      	ldr	r2, [pc, #116]	; (8002578 <MX_TIM4_Init+0x98>)
 8002502:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3840;
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <MX_TIM4_Init+0x94>)
 8002506:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800250a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <MX_TIM4_Init+0x94>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <MX_TIM4_Init+0x94>)
 8002514:	2264      	movs	r2, #100	; 0x64
 8002516:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <MX_TIM4_Init+0x94>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <MX_TIM4_Init+0x94>)
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002524:	4813      	ldr	r0, [pc, #76]	; (8002574 <MX_TIM4_Init+0x94>)
 8002526:	f002 fbd9 	bl	8004cdc <HAL_TIM_Base_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002530:	f7fe fe88 	bl	8001244 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002538:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	4619      	mov	r1, r3
 8002540:	480c      	ldr	r0, [pc, #48]	; (8002574 <MX_TIM4_Init+0x94>)
 8002542:	f002 fc23 	bl	8004d8c <HAL_TIM_ConfigClockSource>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800254c:	f7fe fe7a 	bl	8001244 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002550:	2300      	movs	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	4619      	mov	r1, r3
 800255c:	4805      	ldr	r0, [pc, #20]	; (8002574 <MX_TIM4_Init+0x94>)
 800255e:	f002 fe15 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002568:	f7fe fe6c 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800256c:	bf00      	nop
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200002b0 	.word	0x200002b0
 8002578:	40000800 	.word	0x40000800

0800257c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a13      	ldr	r2, [pc, #76]	; (80025d8 <HAL_TIM_Base_MspInit+0x5c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d10c      	bne.n	80025a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_TIM_Base_MspInit+0x60>)
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	4a12      	ldr	r2, [pc, #72]	; (80025dc <HAL_TIM_Base_MspInit+0x60>)
 8002594:	f043 0302 	orr.w	r3, r3, #2
 8002598:	6413      	str	r3, [r2, #64]	; 0x40
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <HAL_TIM_Base_MspInit+0x60>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80025a6:	e010      	b.n	80025ca <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <HAL_TIM_Base_MspInit+0x64>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d10b      	bne.n	80025ca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025b2:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <HAL_TIM_Base_MspInit+0x60>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <HAL_TIM_Base_MspInit+0x60>)
 80025b8:	f043 0304 	orr.w	r3, r3, #4
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <HAL_TIM_Base_MspInit+0x60>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40000800 	.word	0x40000800

080025e4 <tof_t1>:


#define ARDUINO_PRO_MICRO_I2C_RECEIVE_ADDRESS 0x33<<1
unsigned char ArduinoProMicroI2CData[50];

int16_t tof_t1(){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af02      	add	r7, sp, #8
	while( HAL_I2C_Master_Receive(&hi2c1, ARDUINO_PRO_MICRO_I2C_RECEIVE_ADDRESS , ArduinoProMicroI2CData, 50, 100) != HAL_OK )
 80025ea:	bf00      	nop
 80025ec:	2364      	movs	r3, #100	; 0x64
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	2332      	movs	r3, #50	; 0x32
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <tof_t1+0x30>)
 80025f4:	2166      	movs	r1, #102	; 0x66
 80025f6:	4808      	ldr	r0, [pc, #32]	; (8002618 <tof_t1+0x34>)
 80025f8:	f000 fea8 	bl	800334c <HAL_I2C_Master_Receive>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f4      	bne.n	80025ec <tof_t1+0x8>
	{ }
	HAL_Delay(1000);
 8002602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002606:	f000 f977 	bl	80028f8 <HAL_Delay>
}
 800260a:	bf00      	nop
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000348 	.word	0x20000348
 8002618:	2000006c 	.word	0x2000006c

0800261c <MX_UART7_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart3;

/* UART7 init function */
void MX_UART7_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002620:	4b14      	ldr	r3, [pc, #80]	; (8002674 <MX_UART7_Init+0x58>)
 8002622:	4a15      	ldr	r2, [pc, #84]	; (8002678 <MX_UART7_Init+0x5c>)
 8002624:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <MX_UART7_Init+0x58>)
 8002628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800262c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_UART7_Init+0x58>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <MX_UART7_Init+0x58>)
 8002636:	2200      	movs	r2, #0
 8002638:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MX_UART7_Init+0x58>)
 800263c:	2200      	movs	r2, #0
 800263e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_UART7_Init+0x58>)
 8002642:	220c      	movs	r2, #12
 8002644:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <MX_UART7_Init+0x58>)
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_UART7_Init+0x58>)
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <MX_UART7_Init+0x58>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_UART7_Init+0x58>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800265e:	4805      	ldr	r0, [pc, #20]	; (8002674 <MX_UART7_Init+0x58>)
 8002660:	f002 fe22 	bl	80052a8 <HAL_UART_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800266a:	f7fe fdeb 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000104 	.word	0x20000104
 8002678:	40007800 	.word	0x40007800

0800267c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 8002682:	4a15      	ldr	r2, [pc, #84]	; (80026d8 <MX_USART3_UART_Init+0x5c>)
 8002684:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 8002688:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800268c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800269a:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026a0:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 80026a2:	220c      	movs	r2, #12
 80026a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026b2:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026be:	4805      	ldr	r0, [pc, #20]	; (80026d4 <MX_USART3_UART_Init+0x58>)
 80026c0:	f002 fdf2 	bl	80052a8 <HAL_UART_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80026ca:	f7fe fdbb 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000198 	.word	0x20000198
 80026d8:	40004800 	.word	0x40004800

080026dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08c      	sub	sp, #48	; 0x30
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 031c 	add.w	r3, r7, #28
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a37      	ldr	r2, [pc, #220]	; (80027d8 <HAL_UART_MspInit+0xfc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d131      	bne.n	8002762 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80026fe:	4b37      	ldr	r3, [pc, #220]	; (80027dc <HAL_UART_MspInit+0x100>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a36      	ldr	r2, [pc, #216]	; (80027dc <HAL_UART_MspInit+0x100>)
 8002704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HAL_UART_MspInit+0x100>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002716:	4b31      	ldr	r3, [pc, #196]	; (80027dc <HAL_UART_MspInit+0x100>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a30      	ldr	r2, [pc, #192]	; (80027dc <HAL_UART_MspInit+0x100>)
 800271c:	f043 0310 	orr.w	r3, r3, #16
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b2e      	ldr	r3, [pc, #184]	; (80027dc <HAL_UART_MspInit+0x100>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = Ibus_rx_Pin|Ibus_tx_Pin;
 800272e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002740:	2308      	movs	r3, #8
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	4619      	mov	r1, r3
 800274a:	4825      	ldr	r0, [pc, #148]	; (80027e0 <HAL_UART_MspInit+0x104>)
 800274c:	f000 fa9c 	bl	8002c88 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	2100      	movs	r1, #0
 8002754:	2052      	movs	r0, #82	; 0x52
 8002756:	f000 f9ce 	bl	8002af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800275a:	2052      	movs	r0, #82	; 0x52
 800275c:	f000 f9e7 	bl	8002b2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002760:	e035      	b.n	80027ce <HAL_UART_MspInit+0xf2>
  else if(uartHandle->Instance==USART3)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1f      	ldr	r2, [pc, #124]	; (80027e4 <HAL_UART_MspInit+0x108>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d130      	bne.n	80027ce <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <HAL_UART_MspInit+0x100>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <HAL_UART_MspInit+0x100>)
 8002772:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002776:	6413      	str	r3, [r2, #64]	; 0x40
 8002778:	4b18      	ldr	r3, [pc, #96]	; (80027dc <HAL_UART_MspInit+0x100>)
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <HAL_UART_MspInit+0x100>)
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	4a14      	ldr	r2, [pc, #80]	; (80027dc <HAL_UART_MspInit+0x100>)
 800278a:	f043 0308 	orr.w	r3, r3, #8
 800278e:	6313      	str	r3, [r2, #48]	; 0x30
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_UART_MspInit+0x100>)
 8002792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800279c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027ae:	2307      	movs	r3, #7
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b2:	f107 031c 	add.w	r3, r7, #28
 80027b6:	4619      	mov	r1, r3
 80027b8:	480b      	ldr	r0, [pc, #44]	; (80027e8 <HAL_UART_MspInit+0x10c>)
 80027ba:	f000 fa65 	bl	8002c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	2100      	movs	r1, #0
 80027c2:	2027      	movs	r0, #39	; 0x27
 80027c4:	f000 f997 	bl	8002af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027c8:	2027      	movs	r0, #39	; 0x27
 80027ca:	f000 f9b0 	bl	8002b2e <HAL_NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3730      	adds	r7, #48	; 0x30
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40007800 	.word	0x40007800
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40004800 	.word	0x40004800
 80027e8:	40020c00 	.word	0x40020c00

080027ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002824 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027f2:	e003      	b.n	80027fc <LoopCopyDataInit>

080027f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027fa:	3104      	adds	r1, #4

080027fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027fc:	480b      	ldr	r0, [pc, #44]	; (800282c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002800:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002802:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002804:	d3f6      	bcc.n	80027f4 <CopyDataInit>
  ldr  r2, =_sbss
 8002806:	4a0b      	ldr	r2, [pc, #44]	; (8002834 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002808:	e002      	b.n	8002810 <LoopFillZerobss>

0800280a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800280a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800280c:	f842 3b04 	str.w	r3, [r2], #4

08002810 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002812:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002814:	d3f9      	bcc.n	800280a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002816:	f7ff f999 	bl	8001b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800281a:	f004 fbf3 	bl	8007004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281e:	f7fe fad5 	bl	8000dcc <main>
  bx  lr    
 8002822:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002824:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002828:	0800719c 	.word	0x0800719c
  ldr  r0, =_sdata
 800282c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002830:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002834:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002838:	20000380 	.word	0x20000380

0800283c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800283c:	e7fe      	b.n	800283c <ADC_IRQHandler>

0800283e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002842:	2003      	movs	r0, #3
 8002844:	f000 f94c 	bl	8002ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002848:	2000      	movs	r0, #0
 800284a:	f000 f805 	bl	8002858 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800284e:	f7ff f8eb 	bl	8001a28 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_InitTick+0x54>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_InitTick+0x58>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f967 	bl	8002b4a <HAL_SYSTICK_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e00e      	b.n	80028a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b0f      	cmp	r3, #15
 800288a:	d80a      	bhi.n	80028a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800288c:	2200      	movs	r2, #0
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f000 f92f 	bl	8002af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002898:	4a06      	ldr	r2, [pc, #24]	; (80028b4 <HAL_InitTick+0x5c>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000004 	.word	0x20000004
 80028b0:	2000000c 	.word	0x2000000c
 80028b4:	20000008 	.word	0x20000008

080028b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_IncTick+0x20>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_IncTick+0x24>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_IncTick+0x24>)
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	2000000c 	.word	0x2000000c
 80028dc:	2000037c 	.word	0x2000037c

080028e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return uwTick;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_GetTick+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	2000037c 	.word	0x2000037c

080028f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002900:	f7ff ffee 	bl	80028e0 <HAL_GetTick>
 8002904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d005      	beq.n	800291e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_Delay+0x44>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800291e:	bf00      	nop
 8002920:	f7ff ffde 	bl	80028e0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	429a      	cmp	r2, r3
 800292e:	d8f7      	bhi.n	8002920 <HAL_Delay+0x28>
  {
  }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	2000000c 	.word	0x2000000c

08002940 <__NVIC_SetPriorityGrouping>:
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <__NVIC_SetPriorityGrouping+0x40>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800295c:	4013      	ands	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <__NVIC_SetPriorityGrouping+0x44>)
 800296a:	4313      	orrs	r3, r2
 800296c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296e:	4a04      	ldr	r2, [pc, #16]	; (8002980 <__NVIC_SetPriorityGrouping+0x40>)
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	60d3      	str	r3, [r2, #12]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000ed00 	.word	0xe000ed00
 8002984:	05fa0000 	.word	0x05fa0000

08002988 <__NVIC_GetPriorityGrouping>:
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <__NVIC_GetPriorityGrouping+0x18>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	0a1b      	lsrs	r3, r3, #8
 8002992:	f003 0307 	and.w	r3, r3, #7
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_EnableIRQ>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	db0b      	blt.n	80029ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	f003 021f 	and.w	r2, r3, #31
 80029bc:	4907      	ldr	r1, [pc, #28]	; (80029dc <__NVIC_EnableIRQ+0x38>)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	2001      	movs	r0, #1
 80029c6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000e100 	.word	0xe000e100

080029e0 <__NVIC_SetPriority>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	6039      	str	r1, [r7, #0]
 80029ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	db0a      	blt.n	8002a0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	490c      	ldr	r1, [pc, #48]	; (8002a2c <__NVIC_SetPriority+0x4c>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	440b      	add	r3, r1
 8002a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a08:	e00a      	b.n	8002a20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <__NVIC_SetPriority+0x50>)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	3b04      	subs	r3, #4
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	761a      	strb	r2, [r3, #24]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000e100 	.word	0xe000e100
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <NVIC_EncodePriority>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f1c3 0307 	rsb	r3, r3, #7
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf28      	it	cs
 8002a52:	2304      	movcs	r3, #4
 8002a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d902      	bls.n	8002a64 <NVIC_EncodePriority+0x30>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3b03      	subs	r3, #3
 8002a62:	e000      	b.n	8002a66 <NVIC_EncodePriority+0x32>
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	401a      	ands	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43d9      	mvns	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	4313      	orrs	r3, r2
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aac:	d301      	bcc.n	8002ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00f      	b.n	8002ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <SysTick_Config+0x40>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aba:	210f      	movs	r1, #15
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f7ff ff8e 	bl	80029e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <SysTick_Config+0x40>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <SysTick_Config+0x40>)
 8002acc:	2207      	movs	r2, #7
 8002ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	e000e010 	.word	0xe000e010

08002ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff29 	bl	8002940 <__NVIC_SetPriorityGrouping>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	4603      	mov	r3, r0
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b08:	f7ff ff3e 	bl	8002988 <__NVIC_GetPriorityGrouping>
 8002b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7ff ff8e 	bl	8002a34 <NVIC_EncodePriority>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff5d 	bl	80029e0 <__NVIC_SetPriority>
}
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	4603      	mov	r3, r0
 8002b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff31 	bl	80029a4 <__NVIC_EnableIRQ>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff ffa2 	bl	8002a9c <SysTick_Config>
 8002b58:	4603      	mov	r3, r0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b084      	sub	sp, #16
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b70:	f7ff feb6 	bl	80028e0 <HAL_GetTick>
 8002b74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d008      	beq.n	8002b94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e052      	b.n	8002c3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0216 	bic.w	r2, r2, #22
 8002ba2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d103      	bne.n	8002bc4 <HAL_DMA_Abort+0x62>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0208 	bic.w	r2, r2, #8
 8002bd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 0201 	bic.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002be4:	e013      	b.n	8002c0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002be6:	f7ff fe7b 	bl	80028e0 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d90c      	bls.n	8002c0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2203      	movs	r2, #3
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e015      	b.n	8002c3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1e4      	bne.n	8002be6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	223f      	movs	r2, #63	; 0x3f
 8002c22:	409a      	lsls	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d004      	beq.n	8002c60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2280      	movs	r2, #128	; 0x80
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e00c      	b.n	8002c7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2205      	movs	r2, #5
 8002c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
	...

08002c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e175      	b.n	8002f94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ca8:	2201      	movs	r2, #1
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	f040 8164 	bne.w	8002f8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_GPIO_Init+0x5e>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d007      	beq.n	8002ce6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002cda:	2b11      	cmp	r3, #17
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b12      	cmp	r3, #18
 8002ce4:	d130      	bne.n	8002d48 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 0201 	and.w	r2, r3, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x100>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b12      	cmp	r3, #18
 8002d86:	d123      	bne.n	8002dd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	08da      	lsrs	r2, r3, #3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3208      	adds	r2, #8
 8002d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	220f      	movs	r2, #15
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	08da      	lsrs	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3208      	adds	r2, #8
 8002dca:	69b9      	ldr	r1, [r7, #24]
 8002dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	2203      	movs	r2, #3
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0203 	and.w	r2, r3, #3
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 80be 	beq.w	8002f8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e12:	4b66      	ldr	r3, [pc, #408]	; (8002fac <HAL_GPIO_Init+0x324>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	4a65      	ldr	r2, [pc, #404]	; (8002fac <HAL_GPIO_Init+0x324>)
 8002e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e1e:	4b63      	ldr	r3, [pc, #396]	; (8002fac <HAL_GPIO_Init+0x324>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e2a:	4a61      	ldr	r2, [pc, #388]	; (8002fb0 <HAL_GPIO_Init+0x328>)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3302      	adds	r3, #2
 8002e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	220f      	movs	r2, #15
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_GPIO_Init+0x32c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d037      	beq.n	8002ec6 <HAL_GPIO_Init+0x23e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a57      	ldr	r2, [pc, #348]	; (8002fb8 <HAL_GPIO_Init+0x330>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d031      	beq.n	8002ec2 <HAL_GPIO_Init+0x23a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a56      	ldr	r2, [pc, #344]	; (8002fbc <HAL_GPIO_Init+0x334>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d02b      	beq.n	8002ebe <HAL_GPIO_Init+0x236>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a55      	ldr	r2, [pc, #340]	; (8002fc0 <HAL_GPIO_Init+0x338>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d025      	beq.n	8002eba <HAL_GPIO_Init+0x232>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a54      	ldr	r2, [pc, #336]	; (8002fc4 <HAL_GPIO_Init+0x33c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01f      	beq.n	8002eb6 <HAL_GPIO_Init+0x22e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a53      	ldr	r2, [pc, #332]	; (8002fc8 <HAL_GPIO_Init+0x340>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d019      	beq.n	8002eb2 <HAL_GPIO_Init+0x22a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a52      	ldr	r2, [pc, #328]	; (8002fcc <HAL_GPIO_Init+0x344>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_GPIO_Init+0x226>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a51      	ldr	r2, [pc, #324]	; (8002fd0 <HAL_GPIO_Init+0x348>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00d      	beq.n	8002eaa <HAL_GPIO_Init+0x222>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a50      	ldr	r2, [pc, #320]	; (8002fd4 <HAL_GPIO_Init+0x34c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d007      	beq.n	8002ea6 <HAL_GPIO_Init+0x21e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a4f      	ldr	r2, [pc, #316]	; (8002fd8 <HAL_GPIO_Init+0x350>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d101      	bne.n	8002ea2 <HAL_GPIO_Init+0x21a>
 8002e9e:	2309      	movs	r3, #9
 8002ea0:	e012      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002ea2:	230a      	movs	r3, #10
 8002ea4:	e010      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	e00e      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002eaa:	2307      	movs	r3, #7
 8002eac:	e00c      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002eae:	2306      	movs	r3, #6
 8002eb0:	e00a      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002eb2:	2305      	movs	r3, #5
 8002eb4:	e008      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	e006      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e004      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e002      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <HAL_GPIO_Init+0x240>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	69fa      	ldr	r2, [r7, #28]
 8002eca:	f002 0203 	and.w	r2, r2, #3
 8002ece:	0092      	lsls	r2, r2, #2
 8002ed0:	4093      	lsls	r3, r2
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ed8:	4935      	ldr	r1, [pc, #212]	; (8002fb0 <HAL_GPIO_Init+0x328>)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	3302      	adds	r3, #2
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee6:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f0a:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f10:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	43db      	mvns	r3, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f34:	4a29      	ldr	r2, [pc, #164]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f3a:	4b28      	ldr	r3, [pc, #160]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	43db      	mvns	r3, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4013      	ands	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f64:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <HAL_GPIO_Init+0x354>)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3301      	adds	r3, #1
 8002f92:	61fb      	str	r3, [r7, #28]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	2b0f      	cmp	r3, #15
 8002f98:	f67f ae86 	bls.w	8002ca8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f9c:	bf00      	nop
 8002f9e:	bf00      	nop
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40013800 	.word	0x40013800
 8002fb4:	40020000 	.word	0x40020000
 8002fb8:	40020400 	.word	0x40020400
 8002fbc:	40020800 	.word	0x40020800
 8002fc0:	40020c00 	.word	0x40020c00
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40021400 	.word	0x40021400
 8002fcc:	40021800 	.word	0x40021800
 8002fd0:	40021c00 	.word	0x40021c00
 8002fd4:	40022000 	.word	0x40022000
 8002fd8:	40022400 	.word	0x40022400
 8002fdc:	40013c00 	.word	0x40013c00

08002fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	73fb      	strb	r3, [r7, #15]
 8002ffc:	e001      	b.n	8003002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
 800301c:	4613      	mov	r3, r2
 800301e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003020:	787b      	ldrb	r3, [r7, #1]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003026:	887a      	ldrh	r2, [r7, #2]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800302c:	e003      	b.n	8003036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	041a      	lsls	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	619a      	str	r2, [r3, #24]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
	...

08003044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e07f      	b.n	8003156 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd fc88 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2224      	movs	r2, #36	; 0x24
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003094:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d107      	bne.n	80030be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	e006      	b.n	80030cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d104      	bne.n	80030de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <HAL_I2C_Init+0x11c>)
 80030ea:	430b      	orrs	r3, r1
 80030ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	ea42 0103 	orr.w	r1, r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	021a      	lsls	r2, r3, #8
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69d9      	ldr	r1, [r3, #28]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1a      	ldr	r2, [r3, #32]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	02008000 	.word	0x02008000

08003164 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	607a      	str	r2, [r7, #4]
 800316e:	461a      	mov	r2, r3
 8003170:	460b      	mov	r3, r1
 8003172:	817b      	strh	r3, [r7, #10]
 8003174:	4613      	mov	r3, r2
 8003176:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b20      	cmp	r3, #32
 8003182:	f040 80da 	bne.w	800333a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_I2C_Master_Transmit+0x30>
 8003190:	2302      	movs	r3, #2
 8003192:	e0d3      	b.n	800333c <HAL_I2C_Master_Transmit+0x1d8>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800319c:	f7ff fba0 	bl	80028e0 <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	2319      	movs	r3, #25
 80031a8:	2201      	movs	r2, #1
 80031aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f9e6 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e0be      	b.n	800333c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2221      	movs	r2, #33	; 0x21
 80031c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2210      	movs	r2, #16
 80031ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	893a      	ldrh	r2, [r7, #8]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2bff      	cmp	r3, #255	; 0xff
 80031ee:	d90e      	bls.n	800320e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	22ff      	movs	r2, #255	; 0xff
 80031f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	8979      	ldrh	r1, [r7, #10]
 80031fe:	4b51      	ldr	r3, [pc, #324]	; (8003344 <HAL_I2C_Master_Transmit+0x1e0>)
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fb48 	bl	800389c <I2C_TransferConfig>
 800320c:	e06c      	b.n	80032e8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	b2da      	uxtb	r2, r3
 800321e:	8979      	ldrh	r1, [r7, #10]
 8003220:	4b48      	ldr	r3, [pc, #288]	; (8003344 <HAL_I2C_Master_Transmit+0x1e0>)
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fb37 	bl	800389c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800322e:	e05b      	b.n	80032e8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	6a39      	ldr	r1, [r7, #32]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f000 f9e3 	bl	8003600 <I2C_WaitOnTXISFlagUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e07b      	b.n	800333c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d034      	beq.n	80032e8 <HAL_I2C_Master_Transmit+0x184>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	2b00      	cmp	r3, #0
 8003284:	d130      	bne.n	80032e8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	2200      	movs	r2, #0
 800328e:	2180      	movs	r1, #128	; 0x80
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f975 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e04d      	b.n	800333c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2bff      	cmp	r3, #255	; 0xff
 80032a8:	d90e      	bls.n	80032c8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	22ff      	movs	r2, #255	; 0xff
 80032ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	8979      	ldrh	r1, [r7, #10]
 80032b8:	2300      	movs	r3, #0
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 faeb 	bl	800389c <I2C_TransferConfig>
 80032c6:	e00f      	b.n	80032e8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	8979      	ldrh	r1, [r7, #10]
 80032da:	2300      	movs	r3, #0
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 fada 	bl	800389c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d19e      	bne.n	8003230 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	6a39      	ldr	r1, [r7, #32]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f9c2 	bl	8003680 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e01a      	b.n	800333c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2220      	movs	r2, #32
 800330c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_I2C_Master_Transmit+0x1e4>)
 800331a:	400b      	ands	r3, r1
 800331c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	80002000 	.word	0x80002000
 8003348:	fe00e800 	.word	0xfe00e800

0800334c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	461a      	mov	r2, r3
 8003358:	460b      	mov	r3, r1
 800335a:	817b      	strh	r3, [r7, #10]
 800335c:	4613      	mov	r3, r2
 800335e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b20      	cmp	r3, #32
 800336a:	f040 80db 	bne.w	8003524 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_I2C_Master_Receive+0x30>
 8003378:	2302      	movs	r3, #2
 800337a:	e0d4      	b.n	8003526 <HAL_I2C_Master_Receive+0x1da>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003384:	f7ff faac 	bl	80028e0 <HAL_GetTick>
 8003388:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	2319      	movs	r3, #25
 8003390:	2201      	movs	r2, #1
 8003392:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f000 f8f2 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e0bf      	b.n	8003526 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2222      	movs	r2, #34	; 0x22
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2210      	movs	r2, #16
 80033b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	893a      	ldrh	r2, [r7, #8]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2bff      	cmp	r3, #255	; 0xff
 80033d6:	d90e      	bls.n	80033f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	22ff      	movs	r2, #255	; 0xff
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	8979      	ldrh	r1, [r7, #10]
 80033e6:	4b52      	ldr	r3, [pc, #328]	; (8003530 <HAL_I2C_Master_Receive+0x1e4>)
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fa54 	bl	800389c <I2C_TransferConfig>
 80033f4:	e06d      	b.n	80034d2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	b2da      	uxtb	r2, r3
 8003406:	8979      	ldrh	r1, [r7, #10]
 8003408:	4b49      	ldr	r3, [pc, #292]	; (8003530 <HAL_I2C_Master_Receive+0x1e4>)
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fa43 	bl	800389c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003416:	e05c      	b.n	80034d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	6a39      	ldr	r1, [r7, #32]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 f96b 	bl	80036f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e07c      	b.n	8003526 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	b2d2      	uxtb	r2, r2
 8003438:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29b      	uxth	r3, r3
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d034      	beq.n	80034d2 <HAL_I2C_Master_Receive+0x186>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d130      	bne.n	80034d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f880 	bl	8003580 <I2C_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e04d      	b.n	8003526 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348e:	b29b      	uxth	r3, r3
 8003490:	2bff      	cmp	r3, #255	; 0xff
 8003492:	d90e      	bls.n	80034b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	22ff      	movs	r2, #255	; 0xff
 8003498:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	8979      	ldrh	r1, [r7, #10]
 80034a2:	2300      	movs	r3, #0
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f9f6 	bl	800389c <I2C_TransferConfig>
 80034b0:	e00f      	b.n	80034d2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	8979      	ldrh	r1, [r7, #10]
 80034c4:	2300      	movs	r3, #0
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f9e5 	bl	800389c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d19d      	bne.n	8003418 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	6a39      	ldr	r1, [r7, #32]
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f8cd 	bl	8003680 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e01a      	b.n	8003526 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2220      	movs	r2, #32
 80034f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_I2C_Master_Receive+0x1e8>)
 8003504:	400b      	ands	r3, r1
 8003506:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	80002400 	.word	0x80002400
 8003534:	fe00e800 	.word	0xfe00e800

08003538 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d103      	bne.n	8003556 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2200      	movs	r2, #0
 8003554:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b01      	cmp	r3, #1
 8003562:	d007      	beq.n	8003574 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	619a      	str	r2, [r3, #24]
  }
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003590:	e022      	b.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d01e      	beq.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359a:	f7ff f9a1 	bl	80028e0 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d302      	bcc.n	80035b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d113      	bne.n	80035d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e00f      	b.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4013      	ands	r3, r2
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d0cd      	beq.n	8003592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800360c:	e02c      	b.n	8003668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f8dc 	bl	80037d0 <I2C_IsAcknowledgeFailed>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e02a      	b.n	8003678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d01e      	beq.n	8003668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362a:	f7ff f959 	bl	80028e0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	429a      	cmp	r2, r3
 8003638:	d302      	bcc.n	8003640 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d113      	bne.n	8003668 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b02      	cmp	r3, #2
 8003674:	d1cb      	bne.n	800360e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800368c:	e028      	b.n	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	68b9      	ldr	r1, [r7, #8]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f89c 	bl	80037d0 <I2C_IsAcknowledgeFailed>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e026      	b.n	80036f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a2:	f7ff f91d 	bl	80028e0 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d113      	bne.n	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e007      	b.n	80036f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d1cf      	bne.n	800368e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003704:	e055      	b.n	80037b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f860 	bl	80037d0 <I2C_IsAcknowledgeFailed>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e053      	b.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b20      	cmp	r3, #32
 8003726:	d129      	bne.n	800377c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b04      	cmp	r3, #4
 8003734:	d105      	bne.n	8003742 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e03f      	b.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2220      	movs	r2, #32
 8003748:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6859      	ldr	r1, [r3, #4]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003756:	400b      	ands	r3, r1
 8003758:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e022      	b.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377c:	f7ff f8b0 	bl	80028e0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	429a      	cmp	r2, r3
 800378a:	d302      	bcc.n	8003792 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e007      	b.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d1a2      	bne.n	8003706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	fe00e800 	.word	0xfe00e800

080037d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d151      	bne.n	800388e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ea:	e022      	b.n	8003832 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d01e      	beq.n	8003832 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f4:	f7ff f874 	bl	80028e0 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <I2C_IsAcknowledgeFailed+0x3a>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d113      	bne.n	8003832 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e02e      	b.n	8003890 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b20      	cmp	r3, #32
 800383e:	d1d5      	bne.n	80037ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2210      	movs	r2, #16
 8003846:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2220      	movs	r2, #32
 800384e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff fe71 	bl	8003538 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <I2C_IsAcknowledgeFailed+0xc8>)
 8003862:	400b      	ands	r3, r1
 8003864:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	fe00e800 	.word	0xfe00e800

0800389c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	817b      	strh	r3, [r7, #10]
 80038aa:	4613      	mov	r3, r2
 80038ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	0d5b      	lsrs	r3, r3, #21
 80038b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <I2C_TransferConfig+0x58>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	43db      	mvns	r3, r3
 80038c2:	ea02 0103 	and.w	r1, r2, r3
 80038c6:	897b      	ldrh	r3, [r7, #10]
 80038c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80038cc:	7a7b      	ldrb	r3, [r7, #9]
 80038ce:	041b      	lsls	r3, r3, #16
 80038d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	431a      	orrs	r2, r3
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	431a      	orrs	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	03ff63ff 	.word	0x03ff63ff

080038f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b20      	cmp	r3, #32
 800390c:	d138      	bne.n	8003980 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003918:	2302      	movs	r3, #2
 800391a:	e032      	b.n	8003982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800394a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800398e:	b480      	push	{r7}
 8003990:	b085      	sub	sp, #20
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d139      	bne.n	8003a18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e033      	b.n	8003a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2224      	movs	r2, #36	; 0x24
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0201 	bic.w	r2, r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	021b      	lsls	r3, r3, #8
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0201 	orr.w	r2, r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	e000      	b.n	8003a1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a18:	2302      	movs	r3, #2
  }
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e041      	b.n	8003abc <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003a40:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f245 5255 	movw	r2, #21845	; 0x5555
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6852      	ldr	r2, [r2, #4]
 8003a54:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6892      	ldr	r2, [r2, #8]
 8003a5e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003a60:	f7fe ff3e 	bl	80028e0 <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003a66:	e00f      	b.n	8003a88 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003a68:	f7fe ff3a 	bl	80028e0 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b30      	cmp	r3, #48	; 0x30
 8003a74:	d908      	bls.n	8003a88 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e019      	b.n	8003abc <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1e8      	bne.n	8003a68 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d005      	beq.n	8003ab0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68d2      	ldr	r2, [r2, #12]
 8003aac:	611a      	str	r2, [r3, #16]
 8003aae:	e004      	b.n	8003aba <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003aee:	4b23      	ldr	r3, [pc, #140]	; (8003b7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <HAL_PWREx_EnableOverDrive+0x98>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b06:	4b1e      	ldr	r3, [pc, #120]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b12:	f7fe fee5 	bl	80028e0 <HAL_GetTick>
 8003b16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b18:	e009      	b.n	8003b2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b1a:	f7fe fee1 	bl	80028e0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b28:	d901      	bls.n	8003b2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e022      	b.n	8003b74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3a:	d1ee      	bne.n	8003b1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b3c:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b48:	f7fe feca 	bl	80028e0 <HAL_GetTick>
 8003b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b4e:	e009      	b.n	8003b64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b50:	f7fe fec6 	bl	80028e0 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b5e:	d901      	bls.n	8003b64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e007      	b.n	8003b74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b70:	d1ee      	bne.n	8003b50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000

08003b84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e29b      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8087 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ba8:	4b96      	ldr	r3, [pc, #600]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d00c      	beq.n	8003bce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb4:	4b93      	ldr	r3, [pc, #588]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d112      	bne.n	8003be6 <HAL_RCC_OscConfig+0x62>
 8003bc0:	4b90      	ldr	r3, [pc, #576]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bcc:	d10b      	bne.n	8003be6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bce:	4b8d      	ldr	r3, [pc, #564]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d06c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x130>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d168      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e275      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0x7a>
 8003bf0:	4b84      	ldr	r3, [pc, #528]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a83      	ldr	r2, [pc, #524]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	e02e      	b.n	8003c5c <HAL_RCC_OscConfig+0xd8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x9c>
 8003c06:	4b7f      	ldr	r3, [pc, #508]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7e      	ldr	r2, [pc, #504]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b7c      	ldr	r3, [pc, #496]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7b      	ldr	r2, [pc, #492]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e01d      	b.n	8003c5c <HAL_RCC_OscConfig+0xd8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0xc0>
 8003c2a:	4b76      	ldr	r3, [pc, #472]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a75      	ldr	r2, [pc, #468]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b73      	ldr	r3, [pc, #460]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a72      	ldr	r2, [pc, #456]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0xd8>
 8003c44:	4b6f      	ldr	r3, [pc, #444]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6e      	ldr	r2, [pc, #440]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b6c      	ldr	r3, [pc, #432]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a6b      	ldr	r2, [pc, #428]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fe fe3c 	bl	80028e0 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fe38 	bl	80028e0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e229      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0xe8>
 8003c8a:	e014      	b.n	8003cb6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fe28 	bl	80028e0 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fe fe24 	bl	80028e0 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e215      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	4b57      	ldr	r3, [pc, #348]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x110>
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d069      	beq.n	8003d96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cc2:	4b50      	ldr	r3, [pc, #320]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cce:	4b4d      	ldr	r3, [pc, #308]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d11c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x190>
 8003cda:	4b4a      	ldr	r3, [pc, #296]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d116      	bne.n	8003d14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce6:	4b47      	ldr	r3, [pc, #284]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_RCC_OscConfig+0x17a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e1e9      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfe:	4b41      	ldr	r3, [pc, #260]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	493d      	ldr	r1, [pc, #244]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	e040      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d023      	beq.n	8003d64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d1c:	4b39      	ldr	r3, [pc, #228]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a38      	ldr	r2, [pc, #224]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fe fdda 	bl	80028e0 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d30:	f7fe fdd6 	bl	80028e0 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1c7      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	4b30      	ldr	r3, [pc, #192]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4e:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4929      	ldr	r1, [pc, #164]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]
 8003d62:	e018      	b.n	8003d96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d64:	4b27      	ldr	r3, [pc, #156]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a26      	ldr	r2, [pc, #152]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe fdb6 	bl	80028e0 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d78:	f7fe fdb2 	bl	80028e0 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1a3      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8a:	4b1e      	ldr	r3, [pc, #120]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d038      	beq.n	8003e14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d019      	beq.n	8003dde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dae:	4a15      	ldr	r2, [pc, #84]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db6:	f7fe fd93 	bl	80028e0 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe fd8f 	bl	80028e0 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e180      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x23a>
 8003ddc:	e01a      	b.n	8003e14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003de0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de2:	4a08      	ldr	r2, [pc, #32]	; (8003e04 <HAL_RCC_OscConfig+0x280>)
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dea:	f7fe fd79 	bl	80028e0 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	e00a      	b.n	8003e08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe fd75 	bl	80028e0 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d903      	bls.n	8003e08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e166      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
 8003e04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	4b92      	ldr	r3, [pc, #584]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1ee      	bne.n	8003df2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80a4 	beq.w	8003f6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e22:	4b8c      	ldr	r3, [pc, #560]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10d      	bne.n	8003e4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e2e:	4b89      	ldr	r3, [pc, #548]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	4a88      	ldr	r2, [pc, #544]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e38:	6413      	str	r3, [r2, #64]	; 0x40
 8003e3a:	4b86      	ldr	r3, [pc, #536]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e46:	2301      	movs	r3, #1
 8003e48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4a:	4b83      	ldr	r3, [pc, #524]	; (8004058 <HAL_RCC_OscConfig+0x4d4>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d118      	bne.n	8003e88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e56:	4b80      	ldr	r3, [pc, #512]	; (8004058 <HAL_RCC_OscConfig+0x4d4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a7f      	ldr	r2, [pc, #508]	; (8004058 <HAL_RCC_OscConfig+0x4d4>)
 8003e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e62:	f7fe fd3d 	bl	80028e0 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e6a:	f7fe fd39 	bl	80028e0 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b64      	cmp	r3, #100	; 0x64
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e12a      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7c:	4b76      	ldr	r3, [pc, #472]	; (8004058 <HAL_RCC_OscConfig+0x4d4>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d106      	bne.n	8003e9e <HAL_RCC_OscConfig+0x31a>
 8003e90:	4b70      	ldr	r3, [pc, #448]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a6f      	ldr	r2, [pc, #444]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9c:	e02d      	b.n	8003efa <HAL_RCC_OscConfig+0x376>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x33c>
 8003ea6:	4b6b      	ldr	r3, [pc, #428]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a6a      	ldr	r2, [pc, #424]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb2:	4b68      	ldr	r3, [pc, #416]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb6:	4a67      	ldr	r2, [pc, #412]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003eb8:	f023 0304 	bic.w	r3, r3, #4
 8003ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebe:	e01c      	b.n	8003efa <HAL_RCC_OscConfig+0x376>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x35e>
 8003ec8:	4b62      	ldr	r3, [pc, #392]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a61      	ldr	r2, [pc, #388]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	4b5f      	ldr	r3, [pc, #380]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a5e      	ldr	r2, [pc, #376]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	e00b      	b.n	8003efa <HAL_RCC_OscConfig+0x376>
 8003ee2:	4b5c      	ldr	r3, [pc, #368]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	4a5b      	ldr	r2, [pc, #364]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	6713      	str	r3, [r2, #112]	; 0x70
 8003eee:	4b59      	ldr	r3, [pc, #356]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	4a58      	ldr	r2, [pc, #352]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ef4:	f023 0304 	bic.w	r3, r3, #4
 8003ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d015      	beq.n	8003f2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fe fced 	bl	80028e0 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7fe fce9 	bl	80028e0 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0d8      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	4b4c      	ldr	r3, [pc, #304]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ee      	beq.n	8003f0a <HAL_RCC_OscConfig+0x386>
 8003f2c:	e014      	b.n	8003f58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fe fcd7 	bl	80028e0 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fe fcd3 	bl	80028e0 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e0c2      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4c:	4b41      	ldr	r3, [pc, #260]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ee      	bne.n	8003f36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5e:	4b3d      	ldr	r3, [pc, #244]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f62:	4a3c      	ldr	r2, [pc, #240]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80ae 	beq.w	80040d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f74:	4b37      	ldr	r3, [pc, #220]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d06d      	beq.n	800405c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d14b      	bne.n	8004020 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f88:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a31      	ldr	r2, [pc, #196]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f94:	f7fe fca4 	bl	80028e0 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fe fca0 	bl	80028e0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e091      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	4b29      	ldr	r3, [pc, #164]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	019b      	lsls	r3, r3, #6
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	041b      	lsls	r3, r3, #16
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	061b      	lsls	r3, r3, #24
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe4:	071b      	lsls	r3, r3, #28
 8003fe6:	491b      	ldr	r1, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fec:	4b19      	ldr	r3, [pc, #100]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a18      	ldr	r2, [pc, #96]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fc72 	bl	80028e0 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7fe fc6e 	bl	80028e0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e05f      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	4b10      	ldr	r3, [pc, #64]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x47c>
 800401e:	e057      	b.n	80040d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8004026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800402a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402c:	f7fe fc58 	bl	80028e0 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004034:	f7fe fc54 	bl	80028e0 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e045      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	4b03      	ldr	r3, [pc, #12]	; (8004054 <HAL_RCC_OscConfig+0x4d0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f0      	bne.n	8004034 <HAL_RCC_OscConfig+0x4b0>
 8004052:	e03d      	b.n	80040d0 <HAL_RCC_OscConfig+0x54c>
 8004054:	40023800 	.word	0x40023800
 8004058:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800405c:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <HAL_RCC_OscConfig+0x558>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d030      	beq.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d129      	bne.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	429a      	cmp	r2, r3
 8004084:	d122      	bne.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800408c:	4013      	ands	r3, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004092:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004094:	4293      	cmp	r3, r2
 8004096:	d119      	bne.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	085b      	lsrs	r3, r3, #1
 80040a4:	3b01      	subs	r3, #1
 80040a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d10f      	bne.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40023800 	.word	0x40023800

080040e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e0d0      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b6a      	ldr	r3, [pc, #424]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d910      	bls.n	8004128 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b67      	ldr	r3, [pc, #412]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020f 	bic.w	r2, r3, #15
 800410e:	4965      	ldr	r1, [pc, #404]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b63      	ldr	r3, [pc, #396]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e0b8      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d020      	beq.n	8004176 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004140:	4b59      	ldr	r3, [pc, #356]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	4a58      	ldr	r2, [pc, #352]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800414a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004158:	4b53      	ldr	r3, [pc, #332]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	4a52      	ldr	r2, [pc, #328]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800415e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004162:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004164:	4b50      	ldr	r3, [pc, #320]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	494d      	ldr	r1, [pc, #308]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d040      	beq.n	8004204 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d107      	bne.n	800419a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	4b47      	ldr	r3, [pc, #284]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d115      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e07f      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d107      	bne.n	80041b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a2:	4b41      	ldr	r3, [pc, #260]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d109      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e073      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e06b      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c2:	4b39      	ldr	r3, [pc, #228]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 0203 	bic.w	r2, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	4936      	ldr	r1, [pc, #216]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d4:	f7fe fb84 	bl	80028e0 <HAL_GetTick>
 80041d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	e00a      	b.n	80041f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041dc:	f7fe fb80 	bl	80028e0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e053      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	4b2d      	ldr	r3, [pc, #180]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 020c 	and.w	r2, r3, #12
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	429a      	cmp	r2, r3
 8004202:	d1eb      	bne.n	80041dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004204:	4b27      	ldr	r3, [pc, #156]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 030f 	and.w	r3, r3, #15
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	429a      	cmp	r2, r3
 8004210:	d210      	bcs.n	8004234 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004212:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 020f 	bic.w	r2, r3, #15
 800421a:	4922      	ldr	r1, [pc, #136]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	4313      	orrs	r3, r2
 8004220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e032      	b.n	800429a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d008      	beq.n	8004252 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004240:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4916      	ldr	r1, [pc, #88]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800425e:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	490e      	ldr	r1, [pc, #56]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800426e:	4313      	orrs	r3, r2
 8004270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004272:	f000 f821 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8004276:	4602      	mov	r2, r0
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	091b      	lsrs	r3, r3, #4
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	490a      	ldr	r1, [pc, #40]	; (80042ac <HAL_RCC_ClockConfig+0x1cc>)
 8004284:	5ccb      	ldrb	r3, [r1, r3]
 8004286:	fa22 f303 	lsr.w	r3, r2, r3
 800428a:	4a09      	ldr	r2, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1d0>)
 800428c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800428e:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7fe fae0 	bl	8002858 <HAL_InitTick>

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023c00 	.word	0x40023c00
 80042a8:	40023800 	.word	0x40023800
 80042ac:	0800712c 	.word	0x0800712c
 80042b0:	20000004 	.word	0x20000004
 80042b4:	20000008 	.word	0x20000008

080042b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b8:	b5b0      	push	{r4, r5, r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042be:	2100      	movs	r1, #0
 80042c0:	6079      	str	r1, [r7, #4]
 80042c2:	2100      	movs	r1, #0
 80042c4:	60f9      	str	r1, [r7, #12]
 80042c6:	2100      	movs	r1, #0
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80042ca:	2100      	movs	r1, #0
 80042cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ce:	4952      	ldr	r1, [pc, #328]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 80042d0:	6889      	ldr	r1, [r1, #8]
 80042d2:	f001 010c 	and.w	r1, r1, #12
 80042d6:	2908      	cmp	r1, #8
 80042d8:	d00d      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80042da:	2908      	cmp	r1, #8
 80042dc:	f200 8094 	bhi.w	8004408 <HAL_RCC_GetSysClockFreq+0x150>
 80042e0:	2900      	cmp	r1, #0
 80042e2:	d002      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0x32>
 80042e4:	2904      	cmp	r1, #4
 80042e6:	d003      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x38>
 80042e8:	e08e      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042ea:	4b4c      	ldr	r3, [pc, #304]	; (800441c <HAL_RCC_GetSysClockFreq+0x164>)
 80042ec:	60bb      	str	r3, [r7, #8]
      break;
 80042ee:	e08e      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042f0:	4b4b      	ldr	r3, [pc, #300]	; (8004420 <HAL_RCC_GetSysClockFreq+0x168>)
 80042f2:	60bb      	str	r3, [r7, #8]
      break;
 80042f4:	e08b      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f6:	4948      	ldr	r1, [pc, #288]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 80042f8:	6849      	ldr	r1, [r1, #4]
 80042fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80042fe:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004300:	4945      	ldr	r1, [pc, #276]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 8004302:	6849      	ldr	r1, [r1, #4]
 8004304:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004308:	2900      	cmp	r1, #0
 800430a:	d024      	beq.n	8004356 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430c:	4942      	ldr	r1, [pc, #264]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 800430e:	6849      	ldr	r1, [r1, #4]
 8004310:	0989      	lsrs	r1, r1, #6
 8004312:	4608      	mov	r0, r1
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	f240 14ff 	movw	r4, #511	; 0x1ff
 800431c:	f04f 0500 	mov.w	r5, #0
 8004320:	ea00 0204 	and.w	r2, r0, r4
 8004324:	ea01 0305 	and.w	r3, r1, r5
 8004328:	493d      	ldr	r1, [pc, #244]	; (8004420 <HAL_RCC_GetSysClockFreq+0x168>)
 800432a:	fb01 f003 	mul.w	r0, r1, r3
 800432e:	2100      	movs	r1, #0
 8004330:	fb01 f102 	mul.w	r1, r1, r2
 8004334:	1844      	adds	r4, r0, r1
 8004336:	493a      	ldr	r1, [pc, #232]	; (8004420 <HAL_RCC_GetSysClockFreq+0x168>)
 8004338:	fba2 0101 	umull	r0, r1, r2, r1
 800433c:	1863      	adds	r3, r4, r1
 800433e:	4619      	mov	r1, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	461a      	mov	r2, r3
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	f7fb ff76 	bl	8000238 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4613      	mov	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e04a      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004356:	4b30      	ldr	r3, [pc, #192]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	099b      	lsrs	r3, r3, #6
 800435c:	461a      	mov	r2, r3
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	ea02 0400 	and.w	r4, r2, r0
 800436e:	ea03 0501 	and.w	r5, r3, r1
 8004372:	4620      	mov	r0, r4
 8004374:	4629      	mov	r1, r5
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	014b      	lsls	r3, r1, #5
 8004380:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004384:	0142      	lsls	r2, r0, #5
 8004386:	4610      	mov	r0, r2
 8004388:	4619      	mov	r1, r3
 800438a:	1b00      	subs	r0, r0, r4
 800438c:	eb61 0105 	sbc.w	r1, r1, r5
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	f04f 0300 	mov.w	r3, #0
 8004398:	018b      	lsls	r3, r1, #6
 800439a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800439e:	0182      	lsls	r2, r0, #6
 80043a0:	1a12      	subs	r2, r2, r0
 80043a2:	eb63 0301 	sbc.w	r3, r3, r1
 80043a6:	f04f 0000 	mov.w	r0, #0
 80043aa:	f04f 0100 	mov.w	r1, #0
 80043ae:	00d9      	lsls	r1, r3, #3
 80043b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043b4:	00d0      	lsls	r0, r2, #3
 80043b6:	4602      	mov	r2, r0
 80043b8:	460b      	mov	r3, r1
 80043ba:	1912      	adds	r2, r2, r4
 80043bc:	eb45 0303 	adc.w	r3, r5, r3
 80043c0:	f04f 0000 	mov.w	r0, #0
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	0299      	lsls	r1, r3, #10
 80043ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ce:	0290      	lsls	r0, r2, #10
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	461a      	mov	r2, r3
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	f7fb ff2a 	bl	8000238 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <HAL_RCC_GetSysClockFreq+0x160>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	3301      	adds	r3, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	60bb      	str	r3, [r7, #8]
      break;
 8004406:	e002      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b04      	ldr	r3, [pc, #16]	; (800441c <HAL_RCC_GetSysClockFreq+0x164>)
 800440a:	60bb      	str	r3, [r7, #8]
      break;
 800440c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440e:	68bb      	ldr	r3, [r7, #8]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bdb0      	pop	{r4, r5, r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	00f42400 	.word	0x00f42400
 8004420:	017d7840 	.word	0x017d7840

08004424 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <HAL_RCC_GetHCLKFreq+0x14>)
 800442a:	681b      	ldr	r3, [r3, #0]
}
 800442c:	4618      	mov	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000004 	.word	0x20000004

0800443c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004440:	f7ff fff0 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0a9b      	lsrs	r3, r3, #10
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4903      	ldr	r1, [pc, #12]	; (8004460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	0800713c 	.word	0x0800713c

08004464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004468:	f7ff ffdc 	bl	8004424 <HAL_RCC_GetHCLKFreq>
 800446c:	4602      	mov	r2, r0
 800446e:	4b05      	ldr	r3, [pc, #20]	; (8004484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	0b5b      	lsrs	r3, r3, #13
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	4903      	ldr	r1, [pc, #12]	; (8004488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800447a:	5ccb      	ldrb	r3, [r1, r3]
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40023800 	.word	0x40023800
 8004488:	0800713c 	.word	0x0800713c

0800448c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d012      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044b4:	4b69      	ldr	r3, [pc, #420]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a68      	ldr	r2, [pc, #416]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044be:	6093      	str	r3, [r2, #8]
 80044c0:	4b66      	ldr	r3, [pc, #408]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	4964      	ldr	r1, [pc, #400]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d017      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044e6:	4b5d      	ldr	r3, [pc, #372]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f4:	4959      	ldr	r1, [pc, #356]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004504:	d101      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004506:	2301      	movs	r3, #1
 8004508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004512:	2301      	movs	r3, #1
 8004514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d017      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004522:	4b4e      	ldr	r3, [pc, #312]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004528:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	494a      	ldr	r1, [pc, #296]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004540:	d101      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800454e:	2301      	movs	r3, #1
 8004550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800455e:	2301      	movs	r3, #1
 8004560:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 808b 	beq.w	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	4b3a      	ldr	r3, [pc, #232]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	4a39      	ldr	r2, [pc, #228]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457a:	6413      	str	r3, [r2, #64]	; 0x40
 800457c:	4b37      	ldr	r3, [pc, #220]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004588:	4b35      	ldr	r3, [pc, #212]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a34      	ldr	r2, [pc, #208]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800458e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004594:	f7fe f9a4 	bl	80028e0 <HAL_GetTick>
 8004598:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459c:	f7fe f9a0 	bl	80028e0 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e38f      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045ae:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f0      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045ba:	4b28      	ldr	r3, [pc, #160]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d035      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d02e      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045d8:	4b20      	ldr	r3, [pc, #128]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045e2:	4b1e      	ldr	r3, [pc, #120]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045ee:	4b1b      	ldr	r3, [pc, #108]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f2:	4a1a      	ldr	r2, [pc, #104]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045fa:	4a18      	ldr	r2, [pc, #96]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004600:	4b16      	ldr	r3, [pc, #88]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b01      	cmp	r3, #1
 800460a:	d114      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460c:	f7fe f968 	bl	80028e0 <HAL_GetTick>
 8004610:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004612:	e00a      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fe f964 	bl	80028e0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e351      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0ee      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004642:	d111      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004650:	4b04      	ldr	r3, [pc, #16]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004652:	400b      	ands	r3, r1
 8004654:	4901      	ldr	r1, [pc, #4]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
 800465a:	e00b      	b.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800465c:	40023800 	.word	0x40023800
 8004660:	40007000 	.word	0x40007000
 8004664:	0ffffcff 	.word	0x0ffffcff
 8004668:	4bb3      	ldr	r3, [pc, #716]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	4ab2      	ldr	r2, [pc, #712]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004672:	6093      	str	r3, [r2, #8]
 8004674:	4bb0      	ldr	r3, [pc, #704]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004680:	49ad      	ldr	r1, [pc, #692]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004682:	4313      	orrs	r3, r2
 8004684:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b00      	cmp	r3, #0
 8004690:	d010      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004692:	4ba9      	ldr	r3, [pc, #676]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004698:	4aa7      	ldr	r2, [pc, #668]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800469a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800469e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046a2:	4ba5      	ldr	r3, [pc, #660]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	49a2      	ldr	r1, [pc, #648]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c0:	4b9d      	ldr	r3, [pc, #628]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ce:	499a      	ldr	r1, [pc, #616]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046e2:	4b95      	ldr	r3, [pc, #596]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f0:	4991      	ldr	r1, [pc, #580]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004704:	4b8c      	ldr	r3, [pc, #560]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004712:	4989      	ldr	r1, [pc, #548]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004726:	4b84      	ldr	r3, [pc, #528]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4980      	ldr	r1, [pc, #512]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004748:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f023 0203 	bic.w	r2, r3, #3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004756:	4978      	ldr	r1, [pc, #480]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800476a:	4b73      	ldr	r3, [pc, #460]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004770:	f023 020c 	bic.w	r2, r3, #12
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004778:	496f      	ldr	r1, [pc, #444]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800478c:	4b6a      	ldr	r3, [pc, #424]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	4967      	ldr	r1, [pc, #412]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047ae:	4b62      	ldr	r3, [pc, #392]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047bc:	495e      	ldr	r1, [pc, #376]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00a      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047d0:	4b59      	ldr	r3, [pc, #356]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047de:	4956      	ldr	r1, [pc, #344]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00a      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047f2:	4b51      	ldr	r3, [pc, #324]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	494d      	ldr	r1, [pc, #308]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004814:	4b48      	ldr	r3, [pc, #288]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	4945      	ldr	r1, [pc, #276]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004836:	4b40      	ldr	r3, [pc, #256]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004844:	493c      	ldr	r1, [pc, #240]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004846:	4313      	orrs	r3, r2
 8004848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004858:	4b37      	ldr	r3, [pc, #220]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800485a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004866:	4934      	ldr	r1, [pc, #208]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d011      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800487a:	4b2f      	ldr	r3, [pc, #188]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004888:	492b      	ldr	r1, [pc, #172]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800488a:	4313      	orrs	r3, r2
 800488c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004898:	d101      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800489a:	2301      	movs	r3, #1
 800489c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048aa:	2301      	movs	r3, #1
 80048ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ba:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c8:	491b      	ldr	r1, [pc, #108]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00b      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048dc:	4b16      	ldr	r3, [pc, #88]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ec:	4912      	ldr	r1, [pc, #72]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004906:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004910:	4909      	ldr	r1, [pc, #36]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00f      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004924:	4b04      	ldr	r3, [pc, #16]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	e002      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	4986      	ldr	r1, [pc, #536]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00b      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004950:	4b81      	ldr	r3, [pc, #516]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004956:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004960:	497d      	ldr	r1, [pc, #500]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d006      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 80d6 	beq.w	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800497c:	4b76      	ldr	r3, [pc, #472]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a75      	ldr	r2, [pc, #468]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004988:	f7fd ffaa 	bl	80028e0 <HAL_GetTick>
 800498c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004990:	f7fd ffa6 	bl	80028e0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b64      	cmp	r3, #100	; 0x64
 800499c:	d901      	bls.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e195      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049a2:	4b6d      	ldr	r3, [pc, #436]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d021      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x572>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d11d      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049c2:	4b65      	ldr	r3, [pc, #404]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	f003 0303 	and.w	r3, r3, #3
 80049ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049d0:	4b61      	ldr	r3, [pc, #388]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d6:	0e1b      	lsrs	r3, r3, #24
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	019a      	lsls	r2, r3, #6
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	041b      	lsls	r3, r3, #16
 80049e8:	431a      	orrs	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	061b      	lsls	r3, r3, #24
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	071b      	lsls	r3, r3, #28
 80049f6:	4958      	ldr	r1, [pc, #352]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02e      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a28:	d129      	bne.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a2a:	4b4b      	ldr	r3, [pc, #300]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a38:	4b47      	ldr	r3, [pc, #284]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3e:	0f1b      	lsrs	r3, r3, #28
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	019a      	lsls	r2, r3, #6
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	041b      	lsls	r3, r3, #16
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	061b      	lsls	r3, r3, #24
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	071b      	lsls	r3, r3, #28
 8004a5e:	493e      	ldr	r1, [pc, #248]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a66:	4b3c      	ldr	r3, [pc, #240]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a6c:	f023 021f 	bic.w	r2, r3, #31
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a74:	3b01      	subs	r3, #1
 8004a76:	4938      	ldr	r1, [pc, #224]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01d      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a8a:	4b33      	ldr	r3, [pc, #204]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a90:	0e1b      	lsrs	r3, r3, #24
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a98:	4b2f      	ldr	r3, [pc, #188]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a9e:	0f1b      	lsrs	r3, r3, #28
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	019a      	lsls	r2, r3, #6
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	041b      	lsls	r3, r3, #16
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	061b      	lsls	r3, r3, #24
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	071b      	lsls	r3, r3, #28
 8004abe:	4926      	ldr	r1, [pc, #152]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d011      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	019a      	lsls	r2, r3, #6
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	041b      	lsls	r3, r3, #16
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	061b      	lsls	r3, r3, #24
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	071b      	lsls	r3, r3, #28
 8004aee:	491a      	ldr	r1, [pc, #104]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af0:	4313      	orrs	r3, r2
 8004af2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004af6:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b02:	f7fd feed 	bl	80028e0 <HAL_GetTick>
 8004b06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b08:	e008      	b.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b0a:	f7fd fee9 	bl	80028e0 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b64      	cmp	r3, #100	; 0x64
 8004b16:	d901      	bls.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0d8      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b1c:	4b0e      	ldr	r3, [pc, #56]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	f040 80ce 	bne.w	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3c:	f7fd fed0 	bl	80028e0 <HAL_GetTick>
 8004b40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b42:	e00b      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b44:	f7fd fecc 	bl	80028e0 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	; 0x64
 8004b50:	d904      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e0bb      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b5c:	4b5e      	ldr	r3, [pc, #376]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b68:	d0ec      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d02e      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d12a      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b92:	4b51      	ldr	r3, [pc, #324]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ba0:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	0f1b      	lsrs	r3, r3, #28
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	019a      	lsls	r2, r3, #6
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	041b      	lsls	r3, r3, #16
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	061b      	lsls	r3, r3, #24
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	071b      	lsls	r3, r3, #28
 8004bc6:	4944      	ldr	r1, [pc, #272]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004bce:	4b42      	ldr	r3, [pc, #264]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	021b      	lsls	r3, r3, #8
 8004be0:	493d      	ldr	r1, [pc, #244]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d022      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bfc:	d11d      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bfe:	4b36      	ldr	r3, [pc, #216]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c04:	0e1b      	lsrs	r3, r3, #24
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c0c:	4b32      	ldr	r3, [pc, #200]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c12:	0f1b      	lsrs	r3, r3, #28
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	019a      	lsls	r2, r3, #6
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	431a      	orrs	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	071b      	lsls	r3, r3, #28
 8004c32:	4929      	ldr	r1, [pc, #164]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d028      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004c46:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	0e1b      	lsrs	r3, r3, #24
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c54:	4b20      	ldr	r3, [pc, #128]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	019a      	lsls	r2, r3, #6
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	061b      	lsls	r3, r3, #24
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	071b      	lsls	r3, r3, #28
 8004c7a:	4917      	ldr	r1, [pc, #92]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c82:	4b15      	ldr	r3, [pc, #84]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	4911      	ldr	r1, [pc, #68]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c98:	4b0f      	ldr	r3, [pc, #60]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a0e      	ldr	r2, [pc, #56]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fd fe1c 	bl	80028e0 <HAL_GetTick>
 8004ca8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004caa:	e008      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cac:	f7fd fe18 	bl	80028e0 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b64      	cmp	r3, #100	; 0x64
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e007      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cca:	d1ef      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800

08004cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e049      	b.n	8004d82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d106      	bne.n	8004d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7fd fc3a 	bl	800257c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 f8fc 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
	...

08004d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIM_ConfigClockSource+0x18>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e0b3      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x180>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4b55      	ldr	r3, [pc, #340]	; (8004f14 <HAL_TIM_ConfigClockSource+0x188>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ddc:	d03e      	beq.n	8004e5c <HAL_TIM_ConfigClockSource+0xd0>
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004de2:	f200 8087 	bhi.w	8004ef4 <HAL_TIM_ConfigClockSource+0x168>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	f000 8085 	beq.w	8004ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8004dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004df2:	d87f      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x168>
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d01a      	beq.n	8004e2e <HAL_TIM_ConfigClockSource+0xa2>
 8004df8:	2b70      	cmp	r3, #112	; 0x70
 8004dfa:	d87b      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x168>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d050      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0x116>
 8004e00:	2b60      	cmp	r3, #96	; 0x60
 8004e02:	d877      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x168>
 8004e04:	2b50      	cmp	r3, #80	; 0x50
 8004e06:	d03c      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xf6>
 8004e08:	2b50      	cmp	r3, #80	; 0x50
 8004e0a:	d873      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x168>
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d058      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0x136>
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d86f      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x168>
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d064      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x156>
 8004e18:	2b30      	cmp	r3, #48	; 0x30
 8004e1a:	d86b      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x168>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d060      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x156>
 8004e20:	2b20      	cmp	r3, #32
 8004e22:	d867      	bhi.n	8004ef4 <HAL_TIM_ConfigClockSource+0x168>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d05c      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x156>
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d05a      	beq.n	8004ee2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e2c:	e062      	b.n	8004ef4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	6899      	ldr	r1, [r3, #8]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f000 f985 	bl	800514c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	609a      	str	r2, [r3, #8]
      break;
 8004e5a:	e04e      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6899      	ldr	r1, [r3, #8]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f000 f96e 	bl	800514c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e7e:	609a      	str	r2, [r3, #8]
      break;
 8004e80:	e03b      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6859      	ldr	r1, [r3, #4]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f000 f8e2 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2150      	movs	r1, #80	; 0x50
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 f93b 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004ea0:	e02b      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6859      	ldr	r1, [r3, #4]
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	f000 f901 	bl	80050b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2160      	movs	r1, #96	; 0x60
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 f92b 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004ec0:	e01b      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6859      	ldr	r1, [r3, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f000 f8c2 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2140      	movs	r1, #64	; 0x40
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 f91b 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004ee0:	e00b      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f000 f912 	bl	8005116 <TIM_ITRx_SetConfig>
        break;
 8004ef2:	e002      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ef4:	bf00      	nop
 8004ef6:	e000      	b.n	8004efa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ef8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	fffeff88 	.word	0xfffeff88

08004f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a40      	ldr	r2, [pc, #256]	; (800502c <TIM_Base_SetConfig+0x114>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d013      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d00f      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3d      	ldr	r2, [pc, #244]	; (8005030 <TIM_Base_SetConfig+0x118>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3c      	ldr	r2, [pc, #240]	; (8005034 <TIM_Base_SetConfig+0x11c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a3b      	ldr	r2, [pc, #236]	; (8005038 <TIM_Base_SetConfig+0x120>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a3a      	ldr	r2, [pc, #232]	; (800503c <TIM_Base_SetConfig+0x124>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d108      	bne.n	8004f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	; (800502c <TIM_Base_SetConfig+0x114>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f78:	d027      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <TIM_Base_SetConfig+0x118>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d023      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2b      	ldr	r2, [pc, #172]	; (8005034 <TIM_Base_SetConfig+0x11c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2a      	ldr	r2, [pc, #168]	; (8005038 <TIM_Base_SetConfig+0x120>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <TIM_Base_SetConfig+0x124>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d017      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a28      	ldr	r2, [pc, #160]	; (8005040 <TIM_Base_SetConfig+0x128>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a27      	ldr	r2, [pc, #156]	; (8005044 <TIM_Base_SetConfig+0x12c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a26      	ldr	r2, [pc, #152]	; (8005048 <TIM_Base_SetConfig+0x130>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a25      	ldr	r2, [pc, #148]	; (800504c <TIM_Base_SetConfig+0x134>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a24      	ldr	r2, [pc, #144]	; (8005050 <TIM_Base_SetConfig+0x138>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	; (8005054 <TIM_Base_SetConfig+0x13c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d108      	bne.n	8004fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <TIM_Base_SetConfig+0x114>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_Base_SetConfig+0xf8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a0c      	ldr	r2, [pc, #48]	; (800503c <TIM_Base_SetConfig+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d103      	bne.n	8005018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	615a      	str	r2, [r3, #20]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40010400 	.word	0x40010400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	40001800 	.word	0x40001800
 8005050:	40001c00 	.word	0x40001c00
 8005054:	40002000 	.word	0x40002000

08005058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0210 	bic.w	r2, r3, #16
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	f043 0307 	orr.w	r3, r3, #7
 8005138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	021a      	lsls	r2, r3, #8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	431a      	orrs	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4313      	orrs	r3, r2
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	609a      	str	r2, [r3, #8]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e06d      	b.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a30      	ldr	r2, [pc, #192]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2f      	ldr	r2, [pc, #188]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d108      	bne.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a20      	ldr	r2, [pc, #128]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d022      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005216:	d01d      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a15      	ldr	r2, [pc, #84]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d10c      	bne.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	4313      	orrs	r3, r2
 8005264:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40001800 	.word	0x40001800

080052a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e040      	b.n	800533c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fd fa06 	bl	80026dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2224      	movs	r2, #36	; 0x24
 80052d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0201 	bic.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fb3a 	bl	8005960 <UART_SetConfig>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e022      	b.n	800533c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d002      	beq.n	8005304 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fd90 	bl	8005e24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0201 	orr.w	r2, r2, #1
 8005332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fe17 	bl	8005f68 <UART_CheckIdleState>
 800533a:	4603      	mov	r3, r0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005358:	2b20      	cmp	r3, #32
 800535a:	f040 8081 	bne.w	8005460 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_UART_Transmit+0x26>
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e079      	b.n	8005462 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_UART_Transmit+0x38>
 8005378:	2302      	movs	r3, #2
 800537a:	e072      	b.n	8005462 <HAL_UART_Transmit+0x11e>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2221      	movs	r2, #33	; 0x21
 8005390:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005392:	f7fd faa5 	bl	80028e0 <HAL_GetTick>
 8005396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	88fa      	ldrh	r2, [r7, #6]
 80053a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b0:	d108      	bne.n	80053c4 <HAL_UART_Transmit+0x80>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d104      	bne.n	80053c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	e003      	b.n	80053cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80053d4:	e02c      	b.n	8005430 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	2200      	movs	r2, #0
 80053de:	2180      	movs	r1, #128	; 0x80
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fe0a 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e038      	b.n	8005462 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10b      	bne.n	800540e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005404:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	3302      	adds	r3, #2
 800540a:	61bb      	str	r3, [r7, #24]
 800540c:	e007      	b.n	800541e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	781a      	ldrb	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	3301      	adds	r3, #1
 800541c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005424:	b29b      	uxth	r3, r3
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1cc      	bne.n	80053d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	2140      	movs	r1, #64	; 0x40
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fdd7 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e005      	b.n	8005462 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2220      	movs	r2, #32
 800545a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	e000      	b.n	8005462 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005460:	2302      	movs	r3, #2
  }
}
 8005462:	4618      	mov	r0, r3
 8005464:	3720      	adds	r7, #32
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	4613      	mov	r3, r2
 8005476:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800547c:	2b20      	cmp	r3, #32
 800547e:	d12c      	bne.n	80054da <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_UART_Receive_IT+0x22>
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e025      	b.n	80054dc <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_UART_Receive_IT+0x34>
 800549a:	2302      	movs	r3, #2
 800549c:	e01e      	b.n	80054dc <HAL_UART_Receive_IT+0x72>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80054c8:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	461a      	mov	r2, r3
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fe0f 	bl	80060f4 <UART_Start_Receive_IT>
 80054d6:	4603      	mov	r3, r0
 80054d8:	e000      	b.n	80054dc <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80054da:	2302      	movs	r3, #2
  }
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	f640 030f 	movw	r3, #2063	; 0x80f
 800550a:	4013      	ands	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d113      	bne.n	800553c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00e      	beq.n	800553c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f003 0320 	and.w	r3, r3, #32
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 81cc 	beq.w	80058ca <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3
      }
      return;
 800553a:	e1c6      	b.n	80058ca <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80e3 	beq.w	800570a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d105      	bne.n	800555a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	4ba5      	ldr	r3, [pc, #660]	; (80057e8 <HAL_UART_IRQHandler+0x304>)
 8005552:	4013      	ands	r3, r2
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80d8 	beq.w	800570a <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d010      	beq.n	8005586 <HAL_UART_IRQHandler+0xa2>
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800557c:	f043 0201 	orr.w	r2, r3, #1
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d010      	beq.n	80055b2 <HAL_UART_IRQHandler+0xce>
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2202      	movs	r2, #2
 80055a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a8:	f043 0204 	orr.w	r2, r3, #4
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d010      	beq.n	80055de <HAL_UART_IRQHandler+0xfa>
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2204      	movs	r2, #4
 80055cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055d4:	f043 0202 	orr.w	r2, r3, #2
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f003 0320 	and.w	r3, r3, #32
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00b      	beq.n	8005614 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2208      	movs	r2, #8
 8005602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800560a:	f043 0208 	orr.w	r2, r3, #8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800561a:	2b00      	cmp	r3, #0
 800561c:	d011      	beq.n	8005642 <HAL_UART_IRQHandler+0x15e>
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00c      	beq.n	8005642 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005630:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 8140 	beq.w	80058ce <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005678:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d004      	beq.n	8005692 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800568e:	2b00      	cmp	r3, #0
 8005690:	d031      	beq.n	80056f6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fdb6 	bl	8006204 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b40      	cmp	r3, #64	; 0x40
 80056a4:	d123      	bne.n	80056ee <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d013      	beq.n	80056e6 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a4a      	ldr	r2, [pc, #296]	; (80057ec <HAL_UART_IRQHandler+0x308>)
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fd fab9 	bl	8002c42 <HAL_DMA_Abort_IT>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d017      	beq.n	8005706 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80056e0:	4610      	mov	r0, r2
 80056e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e4:	e00f      	b.n	8005706 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f906 	bl	80058f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ec:	e00b      	b.n	8005706 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f902 	bl	80058f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f4:	e007      	b.n	8005706 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f8fe 	bl	80058f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005704:	e0e3      	b.n	80058ce <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005706:	bf00      	nop
    return;
 8005708:	e0e1      	b.n	80058ce <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 80a7 	bne.w	8005862 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 80a1 	beq.w	8005862 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 809b 	beq.w	8005862 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2210      	movs	r2, #16
 8005732:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573e:	2b40      	cmp	r3, #64	; 0x40
 8005740:	d156      	bne.n	80057f0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800574c:	893b      	ldrh	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f000 80bf 	beq.w	80058d2 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800575a:	893a      	ldrh	r2, [r7, #8]
 800575c:	429a      	cmp	r2, r3
 800575e:	f080 80b8 	bcs.w	80058d2 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	893a      	ldrh	r2, [r7, #8]
 8005766:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005774:	d02a      	beq.n	80057cc <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005784:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a4:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0210 	bic.w	r2, r2, #16
 80057c0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7fd f9cb 	bl	8002b62 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	1ad3      	subs	r3, r2, r3
 80057dc:	b29b      	uxth	r3, r3
 80057de:	4619      	mov	r1, r3
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f893 	bl	800590c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057e6:	e074      	b.n	80058d2 <HAL_UART_IRQHandler+0x3ee>
 80057e8:	04000120 	.word	0x04000120
 80057ec:	08006263 	.word	0x08006263
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d063      	beq.n	80058d6 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 800580e:	897b      	ldrh	r3, [r7, #10]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d060      	beq.n	80058d6 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005822:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0210 	bic.w	r2, r2, #16
 8005854:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005856:	897b      	ldrh	r3, [r7, #10]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f856 	bl	800590c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005860:	e039      	b.n	80058d6 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00d      	beq.n	8005888 <HAL_UART_IRQHandler+0x3a4>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800587e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f84f 	bl	8005924 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005886:	e029      	b.n	80058dc <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00d      	beq.n	80058ae <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005898:	2b00      	cmp	r3, #0
 800589a:	d008      	beq.n	80058ae <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01a      	beq.n	80058da <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	4798      	blx	r3
    }
    return;
 80058ac:	e015      	b.n	80058da <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d011      	beq.n	80058dc <HAL_UART_IRQHandler+0x3f8>
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00c      	beq.n	80058dc <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fce3 	bl	800628e <UART_EndTransmit_IT>
    return;
 80058c8:	e008      	b.n	80058dc <HAL_UART_IRQHandler+0x3f8>
      return;
 80058ca:	bf00      	nop
 80058cc:	e006      	b.n	80058dc <HAL_UART_IRQHandler+0x3f8>
    return;
 80058ce:	bf00      	nop
 80058d0:	e004      	b.n	80058dc <HAL_UART_IRQHandler+0x3f8>
      return;
 80058d2:	bf00      	nop
 80058d4:	e002      	b.n	80058dc <HAL_UART_IRQHandler+0x3f8>
      return;
 80058d6:	bf00      	nop
 80058d8:	e000      	b.n	80058dc <HAL_UART_IRQHandler+0x3f8>
    return;
 80058da:	bf00      	nop
  }

}
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop

080058e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005944:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4313      	orrs	r3, r2
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4ba7      	ldr	r3, [pc, #668]	; (8005c28 <UART_SetConfig+0x2c8>)
 800598c:	4013      	ands	r3, r2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	6979      	ldr	r1, [r7, #20]
 8005994:	430b      	orrs	r3, r1
 8005996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a95      	ldr	r2, [pc, #596]	; (8005c2c <UART_SetConfig+0x2cc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d120      	bne.n	8005a1e <UART_SetConfig+0xbe>
 80059dc:	4b94      	ldr	r3, [pc, #592]	; (8005c30 <UART_SetConfig+0x2d0>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	2b03      	cmp	r3, #3
 80059e8:	d816      	bhi.n	8005a18 <UART_SetConfig+0xb8>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <UART_SetConfig+0x90>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a01 	.word	0x08005a01
 80059f4:	08005a0d 	.word	0x08005a0d
 80059f8:	08005a07 	.word	0x08005a07
 80059fc:	08005a13 	.word	0x08005a13
 8005a00:	2301      	movs	r3, #1
 8005a02:	77fb      	strb	r3, [r7, #31]
 8005a04:	e14f      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005a06:	2302      	movs	r3, #2
 8005a08:	77fb      	strb	r3, [r7, #31]
 8005a0a:	e14c      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005a0c:	2304      	movs	r3, #4
 8005a0e:	77fb      	strb	r3, [r7, #31]
 8005a10:	e149      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005a12:	2308      	movs	r3, #8
 8005a14:	77fb      	strb	r3, [r7, #31]
 8005a16:	e146      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005a18:	2310      	movs	r3, #16
 8005a1a:	77fb      	strb	r3, [r7, #31]
 8005a1c:	e143      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a84      	ldr	r2, [pc, #528]	; (8005c34 <UART_SetConfig+0x2d4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d132      	bne.n	8005a8e <UART_SetConfig+0x12e>
 8005a28:	4b81      	ldr	r3, [pc, #516]	; (8005c30 <UART_SetConfig+0x2d0>)
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2e:	f003 030c 	and.w	r3, r3, #12
 8005a32:	2b0c      	cmp	r3, #12
 8005a34:	d828      	bhi.n	8005a88 <UART_SetConfig+0x128>
 8005a36:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <UART_SetConfig+0xdc>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a71 	.word	0x08005a71
 8005a40:	08005a89 	.word	0x08005a89
 8005a44:	08005a89 	.word	0x08005a89
 8005a48:	08005a89 	.word	0x08005a89
 8005a4c:	08005a7d 	.word	0x08005a7d
 8005a50:	08005a89 	.word	0x08005a89
 8005a54:	08005a89 	.word	0x08005a89
 8005a58:	08005a89 	.word	0x08005a89
 8005a5c:	08005a77 	.word	0x08005a77
 8005a60:	08005a89 	.word	0x08005a89
 8005a64:	08005a89 	.word	0x08005a89
 8005a68:	08005a89 	.word	0x08005a89
 8005a6c:	08005a83 	.word	0x08005a83
 8005a70:	2300      	movs	r3, #0
 8005a72:	77fb      	strb	r3, [r7, #31]
 8005a74:	e117      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005a76:	2302      	movs	r3, #2
 8005a78:	77fb      	strb	r3, [r7, #31]
 8005a7a:	e114      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	77fb      	strb	r3, [r7, #31]
 8005a80:	e111      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005a82:	2308      	movs	r3, #8
 8005a84:	77fb      	strb	r3, [r7, #31]
 8005a86:	e10e      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005a88:	2310      	movs	r3, #16
 8005a8a:	77fb      	strb	r3, [r7, #31]
 8005a8c:	e10b      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a69      	ldr	r2, [pc, #420]	; (8005c38 <UART_SetConfig+0x2d8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d120      	bne.n	8005ada <UART_SetConfig+0x17a>
 8005a98:	4b65      	ldr	r3, [pc, #404]	; (8005c30 <UART_SetConfig+0x2d0>)
 8005a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aa2:	2b30      	cmp	r3, #48	; 0x30
 8005aa4:	d013      	beq.n	8005ace <UART_SetConfig+0x16e>
 8005aa6:	2b30      	cmp	r3, #48	; 0x30
 8005aa8:	d814      	bhi.n	8005ad4 <UART_SetConfig+0x174>
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d009      	beq.n	8005ac2 <UART_SetConfig+0x162>
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d810      	bhi.n	8005ad4 <UART_SetConfig+0x174>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <UART_SetConfig+0x15c>
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d006      	beq.n	8005ac8 <UART_SetConfig+0x168>
 8005aba:	e00b      	b.n	8005ad4 <UART_SetConfig+0x174>
 8005abc:	2300      	movs	r3, #0
 8005abe:	77fb      	strb	r3, [r7, #31]
 8005ac0:	e0f1      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005ac2:	2302      	movs	r3, #2
 8005ac4:	77fb      	strb	r3, [r7, #31]
 8005ac6:	e0ee      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005ac8:	2304      	movs	r3, #4
 8005aca:	77fb      	strb	r3, [r7, #31]
 8005acc:	e0eb      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005ace:	2308      	movs	r3, #8
 8005ad0:	77fb      	strb	r3, [r7, #31]
 8005ad2:	e0e8      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	77fb      	strb	r3, [r7, #31]
 8005ad8:	e0e5      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a57      	ldr	r2, [pc, #348]	; (8005c3c <UART_SetConfig+0x2dc>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d120      	bne.n	8005b26 <UART_SetConfig+0x1c6>
 8005ae4:	4b52      	ldr	r3, [pc, #328]	; (8005c30 <UART_SetConfig+0x2d0>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005aee:	2bc0      	cmp	r3, #192	; 0xc0
 8005af0:	d013      	beq.n	8005b1a <UART_SetConfig+0x1ba>
 8005af2:	2bc0      	cmp	r3, #192	; 0xc0
 8005af4:	d814      	bhi.n	8005b20 <UART_SetConfig+0x1c0>
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d009      	beq.n	8005b0e <UART_SetConfig+0x1ae>
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	d810      	bhi.n	8005b20 <UART_SetConfig+0x1c0>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <UART_SetConfig+0x1a8>
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d006      	beq.n	8005b14 <UART_SetConfig+0x1b4>
 8005b06:	e00b      	b.n	8005b20 <UART_SetConfig+0x1c0>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	77fb      	strb	r3, [r7, #31]
 8005b0c:	e0cb      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	77fb      	strb	r3, [r7, #31]
 8005b12:	e0c8      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005b14:	2304      	movs	r3, #4
 8005b16:	77fb      	strb	r3, [r7, #31]
 8005b18:	e0c5      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	77fb      	strb	r3, [r7, #31]
 8005b1e:	e0c2      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005b20:	2310      	movs	r3, #16
 8005b22:	77fb      	strb	r3, [r7, #31]
 8005b24:	e0bf      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a45      	ldr	r2, [pc, #276]	; (8005c40 <UART_SetConfig+0x2e0>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d125      	bne.n	8005b7c <UART_SetConfig+0x21c>
 8005b30:	4b3f      	ldr	r3, [pc, #252]	; (8005c30 <UART_SetConfig+0x2d0>)
 8005b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b3e:	d017      	beq.n	8005b70 <UART_SetConfig+0x210>
 8005b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b44:	d817      	bhi.n	8005b76 <UART_SetConfig+0x216>
 8005b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b4a:	d00b      	beq.n	8005b64 <UART_SetConfig+0x204>
 8005b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b50:	d811      	bhi.n	8005b76 <UART_SetConfig+0x216>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <UART_SetConfig+0x1fe>
 8005b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b5a:	d006      	beq.n	8005b6a <UART_SetConfig+0x20a>
 8005b5c:	e00b      	b.n	8005b76 <UART_SetConfig+0x216>
 8005b5e:	2300      	movs	r3, #0
 8005b60:	77fb      	strb	r3, [r7, #31]
 8005b62:	e0a0      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005b64:	2302      	movs	r3, #2
 8005b66:	77fb      	strb	r3, [r7, #31]
 8005b68:	e09d      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	77fb      	strb	r3, [r7, #31]
 8005b6e:	e09a      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005b70:	2308      	movs	r3, #8
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e097      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005b76:	2310      	movs	r3, #16
 8005b78:	77fb      	strb	r3, [r7, #31]
 8005b7a:	e094      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a30      	ldr	r2, [pc, #192]	; (8005c44 <UART_SetConfig+0x2e4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d125      	bne.n	8005bd2 <UART_SetConfig+0x272>
 8005b86:	4b2a      	ldr	r3, [pc, #168]	; (8005c30 <UART_SetConfig+0x2d0>)
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b94:	d017      	beq.n	8005bc6 <UART_SetConfig+0x266>
 8005b96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b9a:	d817      	bhi.n	8005bcc <UART_SetConfig+0x26c>
 8005b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba0:	d00b      	beq.n	8005bba <UART_SetConfig+0x25a>
 8005ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba6:	d811      	bhi.n	8005bcc <UART_SetConfig+0x26c>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <UART_SetConfig+0x254>
 8005bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb0:	d006      	beq.n	8005bc0 <UART_SetConfig+0x260>
 8005bb2:	e00b      	b.n	8005bcc <UART_SetConfig+0x26c>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e075      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	77fb      	strb	r3, [r7, #31]
 8005bbe:	e072      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	77fb      	strb	r3, [r7, #31]
 8005bc4:	e06f      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005bc6:	2308      	movs	r3, #8
 8005bc8:	77fb      	strb	r3, [r7, #31]
 8005bca:	e06c      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005bcc:	2310      	movs	r3, #16
 8005bce:	77fb      	strb	r3, [r7, #31]
 8005bd0:	e069      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1c      	ldr	r2, [pc, #112]	; (8005c48 <UART_SetConfig+0x2e8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d137      	bne.n	8005c4c <UART_SetConfig+0x2ec>
 8005bdc:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <UART_SetConfig+0x2d0>)
 8005bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005be6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bea:	d017      	beq.n	8005c1c <UART_SetConfig+0x2bc>
 8005bec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bf0:	d817      	bhi.n	8005c22 <UART_SetConfig+0x2c2>
 8005bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf6:	d00b      	beq.n	8005c10 <UART_SetConfig+0x2b0>
 8005bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfc:	d811      	bhi.n	8005c22 <UART_SetConfig+0x2c2>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d003      	beq.n	8005c0a <UART_SetConfig+0x2aa>
 8005c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c06:	d006      	beq.n	8005c16 <UART_SetConfig+0x2b6>
 8005c08:	e00b      	b.n	8005c22 <UART_SetConfig+0x2c2>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e04a      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005c10:	2302      	movs	r3, #2
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e047      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005c16:	2304      	movs	r3, #4
 8005c18:	77fb      	strb	r3, [r7, #31]
 8005c1a:	e044      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005c1c:	2308      	movs	r3, #8
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	e041      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005c22:	2310      	movs	r3, #16
 8005c24:	77fb      	strb	r3, [r7, #31]
 8005c26:	e03e      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005c28:	efff69f3 	.word	0xefff69f3
 8005c2c:	40011000 	.word	0x40011000
 8005c30:	40023800 	.word	0x40023800
 8005c34:	40004400 	.word	0x40004400
 8005c38:	40004800 	.word	0x40004800
 8005c3c:	40004c00 	.word	0x40004c00
 8005c40:	40005000 	.word	0x40005000
 8005c44:	40011400 	.word	0x40011400
 8005c48:	40007800 	.word	0x40007800
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a71      	ldr	r2, [pc, #452]	; (8005e18 <UART_SetConfig+0x4b8>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d125      	bne.n	8005ca2 <UART_SetConfig+0x342>
 8005c56:	4b71      	ldr	r3, [pc, #452]	; (8005e1c <UART_SetConfig+0x4bc>)
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c64:	d017      	beq.n	8005c96 <UART_SetConfig+0x336>
 8005c66:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c6a:	d817      	bhi.n	8005c9c <UART_SetConfig+0x33c>
 8005c6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c70:	d00b      	beq.n	8005c8a <UART_SetConfig+0x32a>
 8005c72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c76:	d811      	bhi.n	8005c9c <UART_SetConfig+0x33c>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <UART_SetConfig+0x324>
 8005c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c80:	d006      	beq.n	8005c90 <UART_SetConfig+0x330>
 8005c82:	e00b      	b.n	8005c9c <UART_SetConfig+0x33c>
 8005c84:	2300      	movs	r3, #0
 8005c86:	77fb      	strb	r3, [r7, #31]
 8005c88:	e00d      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	77fb      	strb	r3, [r7, #31]
 8005c8e:	e00a      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005c90:	2304      	movs	r3, #4
 8005c92:	77fb      	strb	r3, [r7, #31]
 8005c94:	e007      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005c96:	2308      	movs	r3, #8
 8005c98:	77fb      	strb	r3, [r7, #31]
 8005c9a:	e004      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e001      	b.n	8005ca6 <UART_SetConfig+0x346>
 8005ca2:	2310      	movs	r3, #16
 8005ca4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cae:	d15b      	bne.n	8005d68 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005cb0:	7ffb      	ldrb	r3, [r7, #31]
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d827      	bhi.n	8005d06 <UART_SetConfig+0x3a6>
 8005cb6:	a201      	add	r2, pc, #4	; (adr r2, 8005cbc <UART_SetConfig+0x35c>)
 8005cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbc:	08005ce1 	.word	0x08005ce1
 8005cc0:	08005ce9 	.word	0x08005ce9
 8005cc4:	08005cf1 	.word	0x08005cf1
 8005cc8:	08005d07 	.word	0x08005d07
 8005ccc:	08005cf7 	.word	0x08005cf7
 8005cd0:	08005d07 	.word	0x08005d07
 8005cd4:	08005d07 	.word	0x08005d07
 8005cd8:	08005d07 	.word	0x08005d07
 8005cdc:	08005cff 	.word	0x08005cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce0:	f7fe fbac 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8005ce4:	61b8      	str	r0, [r7, #24]
        break;
 8005ce6:	e013      	b.n	8005d10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ce8:	f7fe fbbc 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 8005cec:	61b8      	str	r0, [r7, #24]
        break;
 8005cee:	e00f      	b.n	8005d10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf0:	4b4b      	ldr	r3, [pc, #300]	; (8005e20 <UART_SetConfig+0x4c0>)
 8005cf2:	61bb      	str	r3, [r7, #24]
        break;
 8005cf4:	e00c      	b.n	8005d10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cf6:	f7fe fadf 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8005cfa:	61b8      	str	r0, [r7, #24]
        break;
 8005cfc:	e008      	b.n	8005d10 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d02:	61bb      	str	r3, [r7, #24]
        break;
 8005d04:	e004      	b.n	8005d10 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	77bb      	strb	r3, [r7, #30]
        break;
 8005d0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d074      	beq.n	8005e00 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	005a      	lsls	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	085b      	lsrs	r3, r3, #1
 8005d20:	441a      	add	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b0f      	cmp	r3, #15
 8005d32:	d916      	bls.n	8005d62 <UART_SetConfig+0x402>
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d3a:	d212      	bcs.n	8005d62 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	f023 030f 	bic.w	r3, r3, #15
 8005d44:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	085b      	lsrs	r3, r3, #1
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f003 0307 	and.w	r3, r3, #7
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	89fb      	ldrh	r3, [r7, #14]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	89fa      	ldrh	r2, [r7, #14]
 8005d5e:	60da      	str	r2, [r3, #12]
 8005d60:	e04e      	b.n	8005e00 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	77bb      	strb	r3, [r7, #30]
 8005d66:	e04b      	b.n	8005e00 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d68:	7ffb      	ldrb	r3, [r7, #31]
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d827      	bhi.n	8005dbe <UART_SetConfig+0x45e>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0x414>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d99 	.word	0x08005d99
 8005d78:	08005da1 	.word	0x08005da1
 8005d7c:	08005da9 	.word	0x08005da9
 8005d80:	08005dbf 	.word	0x08005dbf
 8005d84:	08005daf 	.word	0x08005daf
 8005d88:	08005dbf 	.word	0x08005dbf
 8005d8c:	08005dbf 	.word	0x08005dbf
 8005d90:	08005dbf 	.word	0x08005dbf
 8005d94:	08005db7 	.word	0x08005db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d98:	f7fe fb50 	bl	800443c <HAL_RCC_GetPCLK1Freq>
 8005d9c:	61b8      	str	r0, [r7, #24]
        break;
 8005d9e:	e013      	b.n	8005dc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da0:	f7fe fb60 	bl	8004464 <HAL_RCC_GetPCLK2Freq>
 8005da4:	61b8      	str	r0, [r7, #24]
        break;
 8005da6:	e00f      	b.n	8005dc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da8:	4b1d      	ldr	r3, [pc, #116]	; (8005e20 <UART_SetConfig+0x4c0>)
 8005daa:	61bb      	str	r3, [r7, #24]
        break;
 8005dac:	e00c      	b.n	8005dc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dae:	f7fe fa83 	bl	80042b8 <HAL_RCC_GetSysClockFreq>
 8005db2:	61b8      	str	r0, [r7, #24]
        break;
 8005db4:	e008      	b.n	8005dc8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dba:	61bb      	str	r3, [r7, #24]
        break;
 8005dbc:	e004      	b.n	8005dc8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	77bb      	strb	r3, [r7, #30]
        break;
 8005dc6:	bf00      	nop
    }

    if (pclk != 0U)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d018      	beq.n	8005e00 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	085a      	lsrs	r2, r3, #1
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	441a      	add	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b0f      	cmp	r3, #15
 8005de8:	d908      	bls.n	8005dfc <UART_SetConfig+0x49c>
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df0:	d204      	bcs.n	8005dfc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	60da      	str	r2, [r3, #12]
 8005dfa:	e001      	b.n	8005e00 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3720      	adds	r7, #32
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	40007c00 	.word	0x40007c00
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	00f42400 	.word	0x00f42400

08005e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	f003 0308 	and.w	r3, r3, #8
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d01a      	beq.n	8005f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f22:	d10a      	bne.n	8005f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	605a      	str	r2, [r3, #4]
  }
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f78:	f7fc fcb2 	bl	80028e0 <HAL_GetTick>
 8005f7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0308 	and.w	r3, r3, #8
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d10e      	bne.n	8005faa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f82d 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e023      	b.n	8005ff2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d10e      	bne.n	8005fd6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fbc:	9300      	str	r3, [sp, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f817 	bl	8005ffa <UART_WaitOnFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e00d      	b.n	8005ff2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	60f8      	str	r0, [r7, #12]
 8006002:	60b9      	str	r1, [r7, #8]
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	4613      	mov	r3, r2
 8006008:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600a:	e05e      	b.n	80060ca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d05a      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006014:	f7fc fc64 	bl	80028e0 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <UART_WaitOnFlagUntilTimeout+0x30>
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d11b      	bne.n	8006062 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006038:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 0201 	bic.w	r2, r2, #1
 8006048:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e043      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d02c      	beq.n	80060ca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800607a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800607e:	d124      	bne.n	80060ca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006088:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006098:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0201 	bic.w	r2, r2, #1
 80060a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e00f      	b.n	80060ea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69da      	ldr	r2, [r3, #28]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	4013      	ands	r3, r2
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	bf0c      	ite	eq
 80060da:	2301      	moveq	r3, #1
 80060dc:	2300      	movne	r3, #0
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	461a      	mov	r2, r3
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d091      	beq.n	800600c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	88fa      	ldrh	r2, [r7, #6]
 800610c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	88fa      	ldrh	r2, [r7, #6]
 8006114:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006126:	d10e      	bne.n	8006146 <UART_Start_Receive_IT+0x52>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <UART_Start_Receive_IT+0x48>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800613a:	e02d      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	22ff      	movs	r2, #255	; 0xff
 8006140:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006144:	e028      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10d      	bne.n	800616a <UART_Start_Receive_IT+0x76>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <UART_Start_Receive_IT+0x6c>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	22ff      	movs	r2, #255	; 0xff
 800615a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800615e:	e01b      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	227f      	movs	r2, #127	; 0x7f
 8006164:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006168:	e016      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006172:	d10d      	bne.n	8006190 <UART_Start_Receive_IT+0x9c>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <UART_Start_Receive_IT+0x92>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	227f      	movs	r2, #127	; 0x7f
 8006180:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006184:	e008      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	223f      	movs	r2, #63	; 0x3f
 800618a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800618e:	e003      	b.n	8006198 <UART_Start_Receive_IT+0xa4>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2222      	movs	r2, #34	; 0x22
 80061a4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061be:	d107      	bne.n	80061d0 <UART_Start_Receive_IT+0xdc>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d103      	bne.n	80061d0 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <UART_Start_Receive_IT+0x108>)
 80061cc:	665a      	str	r2, [r3, #100]	; 0x64
 80061ce:	e002      	b.n	80061d6 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a0b      	ldr	r2, [pc, #44]	; (8006200 <UART_Start_Receive_IT+0x10c>)
 80061d4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80061ec:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	08006395 	.word	0x08006395
 8006200:	080062c1 	.word	0x080062c1

08006204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800621a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006230:	2b01      	cmp	r3, #1
 8006232:	d107      	bne.n	8006244 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0210 	bic.w	r2, r2, #16
 8006242:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006256:	bf00      	nop
 8006258:	370c      	adds	r7, #12
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff fb39 	bl	80058f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006286:	bf00      	nop
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}

0800628e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fb16 	bl	80058e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80062ce:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d4:	2b22      	cmp	r3, #34	; 0x22
 80062d6:	d151      	bne.n	800637c <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062e0:	89bb      	ldrh	r3, [r7, #12]
 80062e2:	b2d9      	uxtb	r1, r3
 80062e4:	89fb      	ldrh	r3, [r7, #14]
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ec:	400a      	ands	r2, r1
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f6:	1c5a      	adds	r2, r3, #1
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006302:	b29b      	uxth	r3, r3
 8006304:	3b01      	subs	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006314:	b29b      	uxth	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d138      	bne.n	800638c <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006328:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800634a:	2b01      	cmp	r3, #1
 800634c:	d10f      	bne.n	800636e <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0210 	bic.w	r2, r2, #16
 800635c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff fad0 	bl	800590c <HAL_UARTEx_RxEventCallback>
 800636c:	e002      	b.n	8006374 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fa fb7c 	bl	8000a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800637a:	e007      	b.n	800638c <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f042 0208 	orr.w	r2, r2, #8
 800638a:	619a      	str	r2, [r3, #24]
}
 800638c:	bf00      	nop
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80063a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063a8:	2b22      	cmp	r3, #34	; 0x22
 80063aa:	d151      	bne.n	8006450 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80063ba:	89ba      	ldrh	r2, [r7, #12]
 80063bc:	89fb      	ldrh	r3, [r7, #14]
 80063be:	4013      	ands	r3, r2
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ca:	1c9a      	adds	r2, r3, #2
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	3b01      	subs	r3, #1
 80063da:	b29a      	uxth	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d138      	bne.n	8006460 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063fc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0201 	bic.w	r2, r2, #1
 800640c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800641e:	2b01      	cmp	r3, #1
 8006420:	d10f      	bne.n	8006442 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0210 	bic.w	r2, r2, #16
 8006430:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff fa66 	bl	800590c <HAL_UARTEx_RxEventCallback>
 8006440:	e002      	b.n	8006448 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fa fb12 	bl	8000a6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800644e:	e007      	b.n	8006460 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0208 	orr.w	r2, r2, #8
 800645e:	619a      	str	r2, [r3, #24]
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006468:	b480      	push	{r7}
 800646a:	b089      	sub	sp, #36	; 0x24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	fa93 f3a3 	rbit	r3, r3
 8006482:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	fab3 f383 	clz	r3, r3
 800648a:	b2db      	uxtb	r3, r3
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	2103      	movs	r1, #3
 8006490:	fa01 f303 	lsl.w	r3, r1, r3
 8006494:	43db      	mvns	r3, r3
 8006496:	401a      	ands	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	fa93 f3a3 	rbit	r3, r3
 80064a2:	61bb      	str	r3, [r7, #24]
  return result;
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	fab3 f383 	clz	r3, r3
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	fa01 f303 	lsl.w	r3, r1, r3
 80064b4:	431a      	orrs	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	601a      	str	r2, [r3, #0]
}
 80064ba:	bf00      	nop
 80064bc:	3724      	adds	r7, #36	; 0x24
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b085      	sub	sp, #20
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	43db      	mvns	r3, r3
 80064da:	401a      	ands	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	fb01 f303 	mul.w	r3, r1, r3
 80064e4:	431a      	orrs	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	605a      	str	r2, [r3, #4]
}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b089      	sub	sp, #36	; 0x24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	60f8      	str	r0, [r7, #12]
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	fa93 f3a3 	rbit	r3, r3
 8006510:	613b      	str	r3, [r7, #16]
  return result;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	fab3 f383 	clz	r3, r3
 8006518:	b2db      	uxtb	r3, r3
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	2103      	movs	r1, #3
 800651e:	fa01 f303 	lsl.w	r3, r1, r3
 8006522:	43db      	mvns	r3, r3
 8006524:	401a      	ands	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	fa93 f3a3 	rbit	r3, r3
 8006530:	61bb      	str	r3, [r7, #24]
  return result;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	fab3 f383 	clz	r3, r3
 8006538:	b2db      	uxtb	r3, r3
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	fa01 f303 	lsl.w	r3, r1, r3
 8006542:	431a      	orrs	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006548:	bf00      	nop
 800654a:	3724      	adds	r7, #36	; 0x24
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006554:	b480      	push	{r7}
 8006556:	b089      	sub	sp, #36	; 0x24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	fa93 f3a3 	rbit	r3, r3
 800656e:	613b      	str	r3, [r7, #16]
  return result;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	fab3 f383 	clz	r3, r3
 8006576:	b2db      	uxtb	r3, r3
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	2103      	movs	r1, #3
 800657c:	fa01 f303 	lsl.w	r3, r1, r3
 8006580:	43db      	mvns	r3, r3
 8006582:	401a      	ands	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	fa93 f3a3 	rbit	r3, r3
 800658e:	61bb      	str	r3, [r7, #24]
  return result;
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	fab3 f383 	clz	r3, r3
 8006596:	b2db      	uxtb	r3, r3
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	fa01 f303 	lsl.w	r3, r1, r3
 80065a0:	431a      	orrs	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	60da      	str	r2, [r3, #12]
}
 80065a6:	bf00      	nop
 80065a8:	3724      	adds	r7, #36	; 0x24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr

080065b2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b089      	sub	sp, #36	; 0x24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	60f8      	str	r0, [r7, #12]
 80065ba:	60b9      	str	r1, [r7, #8]
 80065bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a1a      	ldr	r2, [r3, #32]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	fa93 f3a3 	rbit	r3, r3
 80065cc:	613b      	str	r3, [r7, #16]
  return result;
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	fab3 f383 	clz	r3, r3
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	210f      	movs	r1, #15
 80065da:	fa01 f303 	lsl.w	r3, r1, r3
 80065de:	43db      	mvns	r3, r3
 80065e0:	401a      	ands	r2, r3
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	fa93 f3a3 	rbit	r3, r3
 80065ec:	61bb      	str	r3, [r7, #24]
  return result;
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	fab3 f383 	clz	r3, r3
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	fa01 f303 	lsl.w	r3, r1, r3
 80065fe:	431a      	orrs	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006604:	bf00      	nop
 8006606:	3724      	adds	r7, #36	; 0x24
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006610:	b480      	push	{r7}
 8006612:	b089      	sub	sp, #36	; 0x24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	0a1b      	lsrs	r3, r3, #8
 8006624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	fa93 f3a3 	rbit	r3, r3
 800662c:	613b      	str	r3, [r7, #16]
  return result;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	fab3 f383 	clz	r3, r3
 8006634:	b2db      	uxtb	r3, r3
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	210f      	movs	r1, #15
 800663a:	fa01 f303 	lsl.w	r3, r1, r3
 800663e:	43db      	mvns	r3, r3
 8006640:	401a      	ands	r2, r3
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	0a1b      	lsrs	r3, r3, #8
 8006646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	fa93 f3a3 	rbit	r3, r3
 800664e:	61bb      	str	r3, [r7, #24]
  return result;
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	fab3 f383 	clz	r3, r3
 8006656:	b2db      	uxtb	r3, r3
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	6879      	ldr	r1, [r7, #4]
 800665c:	fa01 f303 	lsl.w	r3, r1, r3
 8006660:	431a      	orrs	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006666:	bf00      	nop
 8006668:	3724      	adds	r7, #36	; 0x24
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b088      	sub	sp, #32
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800667c:	2300      	movs	r3, #0
 800667e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006680:	2300      	movs	r3, #0
 8006682:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	fa93 f3a3 	rbit	r3, r3
 8006690:	613b      	str	r3, [r7, #16]
  return result;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	fab3 f383 	clz	r3, r3
 8006698:	b2db      	uxtb	r3, r3
 800669a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800669c:	e051      	b.n	8006742 <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	2101      	movs	r1, #1
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	fa01 f303 	lsl.w	r3, r1, r3
 80066aa:	4013      	ands	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d043      	beq.n	800673c <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d003      	beq.n	80066c4 <LL_GPIO_Init+0x52>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d10e      	bne.n	80066e2 <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	461a      	mov	r2, r3
 80066ca:	69b9      	ldr	r1, [r7, #24]
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff ff12 	bl	80064f6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6819      	ldr	r1, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	461a      	mov	r2, r3
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f7ff fef2 	bl	80064c6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	461a      	mov	r2, r3
 80066e8:	69b9      	ldr	r1, [r7, #24]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f7ff ff32 	bl	8006554 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d11a      	bne.n	800672e <LL_GPIO_Init+0xbc>
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	fa93 f3a3 	rbit	r3, r3
 8006702:	60bb      	str	r3, [r7, #8]
  return result;
 8006704:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006706:	fab3 f383 	clz	r3, r3
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b07      	cmp	r3, #7
 800670e:	d807      	bhi.n	8006720 <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	461a      	mov	r2, r3
 8006716:	69b9      	ldr	r1, [r7, #24]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7ff ff4a 	bl	80065b2 <LL_GPIO_SetAFPin_0_7>
 800671e:	e006      	b.n	800672e <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	461a      	mov	r2, r3
 8006726:	69b9      	ldr	r1, [r7, #24]
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff71 	bl	8006610 <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	461a      	mov	r2, r3
 8006734:	69b9      	ldr	r1, [r7, #24]
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f7ff fe96 	bl	8006468 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	3301      	adds	r3, #1
 8006740:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	fa22 f303 	lsr.w	r3, r2, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1a6      	bne.n	800669e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <LL_TIM_SetPrescaler>:
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	629a      	str	r2, [r3, #40]	; 0x28
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <LL_TIM_SetAutoReload>:
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
 800677e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <LL_TIM_SetRepetitionCounter>:
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <LL_TIM_OC_SetCompareCH1>:
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <LL_TIM_OC_SetCompareCH2>:
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr

080067e6 <LL_TIM_OC_SetCompareCH3>:
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <LL_TIM_OC_SetCompareCH4>:
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006812:	bf00      	nop
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <LL_TIM_OC_SetCompareCH5>:
{
 800681e:	b480      	push	{r7}
 8006820:	b083      	sub	sp, #12
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	659a      	str	r2, [r3, #88]	; 0x58
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <LL_TIM_OC_SetCompareCH6>:
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f043 0201 	orr.w	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	615a      	str	r2, [r3, #20]
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a3d      	ldr	r2, [pc, #244]	; (8006984 <LL_TIM_Init+0x108>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d013      	beq.n	80068bc <LL_TIM_Init+0x40>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689a:	d00f      	beq.n	80068bc <LL_TIM_Init+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a3a      	ldr	r2, [pc, #232]	; (8006988 <LL_TIM_Init+0x10c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00b      	beq.n	80068bc <LL_TIM_Init+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a39      	ldr	r2, [pc, #228]	; (800698c <LL_TIM_Init+0x110>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d007      	beq.n	80068bc <LL_TIM_Init+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a38      	ldr	r2, [pc, #224]	; (8006990 <LL_TIM_Init+0x114>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d003      	beq.n	80068bc <LL_TIM_Init+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a37      	ldr	r2, [pc, #220]	; (8006994 <LL_TIM_Init+0x118>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d106      	bne.n	80068ca <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a2d      	ldr	r2, [pc, #180]	; (8006984 <LL_TIM_Init+0x108>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d02b      	beq.n	800692a <LL_TIM_Init+0xae>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068d8:	d027      	beq.n	800692a <LL_TIM_Init+0xae>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a2a      	ldr	r2, [pc, #168]	; (8006988 <LL_TIM_Init+0x10c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d023      	beq.n	800692a <LL_TIM_Init+0xae>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a29      	ldr	r2, [pc, #164]	; (800698c <LL_TIM_Init+0x110>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d01f      	beq.n	800692a <LL_TIM_Init+0xae>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a28      	ldr	r2, [pc, #160]	; (8006990 <LL_TIM_Init+0x114>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d01b      	beq.n	800692a <LL_TIM_Init+0xae>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a27      	ldr	r2, [pc, #156]	; (8006994 <LL_TIM_Init+0x118>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d017      	beq.n	800692a <LL_TIM_Init+0xae>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a26      	ldr	r2, [pc, #152]	; (8006998 <LL_TIM_Init+0x11c>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d013      	beq.n	800692a <LL_TIM_Init+0xae>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a25      	ldr	r2, [pc, #148]	; (800699c <LL_TIM_Init+0x120>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d00f      	beq.n	800692a <LL_TIM_Init+0xae>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a24      	ldr	r2, [pc, #144]	; (80069a0 <LL_TIM_Init+0x124>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d00b      	beq.n	800692a <LL_TIM_Init+0xae>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a23      	ldr	r2, [pc, #140]	; (80069a4 <LL_TIM_Init+0x128>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d007      	beq.n	800692a <LL_TIM_Init+0xae>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a22      	ldr	r2, [pc, #136]	; (80069a8 <LL_TIM_Init+0x12c>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d003      	beq.n	800692a <LL_TIM_Init+0xae>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a21      	ldr	r2, [pc, #132]	; (80069ac <LL_TIM_Init+0x130>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d106      	bne.n	8006938 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4313      	orrs	r3, r2
 8006936:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	4619      	mov	r1, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f7ff ff16 	bl	8006776 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	881b      	ldrh	r3, [r3, #0]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff ff02 	bl	800675a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a0a      	ldr	r2, [pc, #40]	; (8006984 <LL_TIM_Init+0x108>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d003      	beq.n	8006966 <LL_TIM_Init+0xea>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a0c      	ldr	r2, [pc, #48]	; (8006994 <LL_TIM_Init+0x118>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d105      	bne.n	8006972 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff10 	bl	8006792 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff ff71 	bl	800685a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40010000 	.word	0x40010000
 8006988:	40000400 	.word	0x40000400
 800698c:	40000800 	.word	0x40000800
 8006990:	40000c00 	.word	0x40000c00
 8006994:	40010400 	.word	0x40010400
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800
 80069a4:	40001800 	.word	0x40001800
 80069a8:	40001c00 	.word	0x40001c00
 80069ac:	40002000 	.word	0x40002000

080069b0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c6:	d045      	beq.n	8006a54 <LL_TIM_OC_Init+0xa4>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ce:	d848      	bhi.n	8006a62 <LL_TIM_OC_Init+0xb2>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d6:	d036      	beq.n	8006a46 <LL_TIM_OC_Init+0x96>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069de:	d840      	bhi.n	8006a62 <LL_TIM_OC_Init+0xb2>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e6:	d027      	beq.n	8006a38 <LL_TIM_OC_Init+0x88>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ee:	d838      	bhi.n	8006a62 <LL_TIM_OC_Init+0xb2>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f6:	d018      	beq.n	8006a2a <LL_TIM_OC_Init+0x7a>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069fe:	d830      	bhi.n	8006a62 <LL_TIM_OC_Init+0xb2>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d003      	beq.n	8006a0e <LL_TIM_OC_Init+0x5e>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b10      	cmp	r3, #16
 8006a0a:	d007      	beq.n	8006a1c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8006a0c:	e029      	b.n	8006a62 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 f8a7 	bl	8006b64 <OC1Config>
 8006a16:	4603      	mov	r3, r0
 8006a18:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1a:	e023      	b.n	8006a64 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 f90e 	bl	8006c40 <OC2Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	75fb      	strb	r3, [r7, #23]
      break;
 8006a28:	e01c      	b.n	8006a64 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f000 f979 	bl	8006d24 <OC3Config>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]
      break;
 8006a36:	e015      	b.n	8006a64 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f9e4 	bl	8006e08 <OC4Config>
 8006a40:	4603      	mov	r3, r0
 8006a42:	75fb      	strb	r3, [r7, #23]
      break;
 8006a44:	e00e      	b.n	8006a64 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fa37 	bl	8006ebc <OC5Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75fb      	strb	r3, [r7, #23]
      break;
 8006a52:	e007      	b.n	8006a64 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8006a54:	6879      	ldr	r1, [r7, #4]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 fa82 	bl	8006f60 <OC6Config>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a60:	e000      	b.n	8006a64 <LL_TIM_OC_Init+0xb4>
      break;
 8006a62:	bf00      	nop
  }

  return result;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	7b12      	ldrb	r2, [r2, #12]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	89d2      	ldrh	r2, [r2, #14]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, TIM_BDTRInitStruct->AutomaticOutput);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_ADVANCED_INSTANCE(TIMx))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a1a      	ldr	r2, [pc, #104]	; (8006b5c <LL_TIM_BDTR_Init+0xec>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <LL_TIM_BDTR_Init+0x8e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a19      	ldr	r2, [pc, #100]	; (8006b60 <LL_TIM_BDTR_Init+0xf0>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d106      	bne.n	8006b0c <LL_TIM_BDTR_Init+0x9c>
  {
    assert_param(IS_LL_TIM_BREAK_FILTER(TIM_BDTRInitStruct->BreakFilter));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a13      	ldr	r2, [pc, #76]	; (8006b5c <LL_TIM_BDTR_Init+0xec>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d003      	beq.n	8006b1c <LL_TIM_BDTR_Init+0xac>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a12      	ldr	r2, [pc, #72]	; (8006b60 <LL_TIM_BDTR_Init+0xf0>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d114      	bne.n	8006b46 <LL_TIM_BDTR_Init+0xd6>
    assert_param(IS_LL_TIM_BREAK2_STATE(TIM_BDTRInitStruct->Break2State));
    assert_param(IS_LL_TIM_BREAK2_POLARITY(TIM_BDTRInitStruct->Break2Polarity));
    assert_param(IS_LL_TIM_BREAK2_FILTER(TIM_BDTRInitStruct->Break2Filter));

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	69db      	ldr	r3, [r3, #28]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40010400 	.word	0x40010400

08006b64 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f023 0201 	bic.w	r2, r3, #1
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0303 	bic.w	r3, r3, #3
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4b27      	ldr	r3, [pc, #156]	; (8006c34 <OC1Config+0xd0>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f023 0202 	bic.w	r2, r3, #2
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f023 0201 	bic.w	r2, r3, #1
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a1d      	ldr	r2, [pc, #116]	; (8006c38 <OC1Config+0xd4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d003      	beq.n	8006bce <OC1Config+0x6a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a1c      	ldr	r2, [pc, #112]	; (8006c3c <OC1Config+0xd8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d11e      	bne.n	8006c0c <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f023 0208 	bic.w	r2, r3, #8
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f023 0204 	bic.w	r2, r3, #4
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff fdc5 	bl	80067ae <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	fffeff8f 	.word	0xfffeff8f
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40010400 	.word	0x40010400

08006c40 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f023 0210 	bic.w	r2, r3, #16
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4b29      	ldr	r3, [pc, #164]	; (8006d18 <OC2Config+0xd8>)
 8006c74:	4013      	ands	r3, r2
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	6812      	ldr	r2, [r2, #0]
 8006c7a:	0212      	lsls	r2, r2, #8
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f023 0220 	bic.w	r2, r3, #32
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f023 0210 	bic.w	r2, r3, #16
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a1e      	ldr	r2, [pc, #120]	; (8006d1c <OC2Config+0xdc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <OC2Config+0x70>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a1d      	ldr	r2, [pc, #116]	; (8006d20 <OC2Config+0xe0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d11f      	bne.n	8006cf0 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	695b      	ldr	r3, [r3, #20]
 8006cba:	019b      	lsls	r3, r3, #6
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	019b      	lsls	r3, r3, #6
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fd61 	bl	80067ca <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	feff8fff 	.word	0xfeff8fff
 8006d1c:	40010000 	.word	0x40010000
 8006d20:	40010400 	.word	0x40010400

08006d24 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
 8006d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0303 	bic.w	r3, r3, #3
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <OC3Config+0xd8>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	6812      	ldr	r2, [r2, #0]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	021b      	lsls	r3, r3, #8
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a1e      	ldr	r2, [pc, #120]	; (8006e00 <OC3Config+0xdc>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <OC3Config+0x6e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <OC3Config+0xe0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d11f      	bne.n	8006dd2 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	029b      	lsls	r3, r3, #10
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	029b      	lsls	r3, r3, #10
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	69db      	ldr	r3, [r3, #28]
 8006dcc:	015b      	lsls	r3, r3, #5
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff fcfe 	bl	80067e6 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	fffeff8f 	.word	0xfffeff8f
 8006e00:	40010000 	.word	0x40010000
 8006e04:	40010400 	.word	0x40010400

08006e08 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	69db      	ldr	r3, [r3, #28]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	4b1d      	ldr	r3, [pc, #116]	; (8006eb0 <OC4Config+0xa8>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	6812      	ldr	r2, [r2, #0]
 8006e42:	0212      	lsls	r2, r2, #8
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	031b      	lsls	r3, r3, #12
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	031b      	lsls	r3, r3, #12
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a12      	ldr	r2, [pc, #72]	; (8006eb4 <OC4Config+0xac>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d003      	beq.n	8006e78 <OC4Config+0x70>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a11      	ldr	r2, [pc, #68]	; (8006eb8 <OC4Config+0xb0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d107      	bne.n	8006e88 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	019b      	lsls	r3, r3, #6
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fcb1 	bl	8006802 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3718      	adds	r7, #24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	feff8fff 	.word	0xfeff8fff
 8006eb4:	40010000 	.word	0x40010000
 8006eb8:	40010400 	.word	0x40010400

08006ebc <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006edc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	4b1c      	ldr	r3, [pc, #112]	; (8006f54 <OC5Config+0x98>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	6812      	ldr	r2, [r2, #0]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	041b      	lsls	r3, r3, #16
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	041b      	lsls	r3, r3, #16
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a12      	ldr	r2, [pc, #72]	; (8006f58 <OC5Config+0x9c>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d003      	beq.n	8006f1c <OC5Config+0x60>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a11      	ldr	r2, [pc, #68]	; (8006f5c <OC5Config+0xa0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d109      	bne.n	8006f30 <OC5Config+0x74>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	021b      	lsls	r3, r3, #8
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff fc6e 	bl	800681e <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	fffeff8f 	.word	0xfffeff8f
 8006f58:	40010000 	.word	0x40010000
 8006f5c:	40010400 	.word	0x40010400

08006f60 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f80:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	4b1c      	ldr	r3, [pc, #112]	; (8006ff8 <OC6Config+0x98>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	6812      	ldr	r2, [r2, #0]
 8006f8c:	0212      	lsls	r2, r2, #8
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	051b      	lsls	r3, r3, #20
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	051b      	lsls	r3, r3, #20
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a11      	ldr	r2, [pc, #68]	; (8006ffc <OC6Config+0x9c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d003      	beq.n	8006fc2 <OC6Config+0x62>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a10      	ldr	r2, [pc, #64]	; (8007000 <OC6Config+0xa0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d109      	bne.n	8006fd6 <OC6Config+0x76>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	029b      	lsls	r3, r3, #10
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7ff fc2b 	bl	800683e <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	feff8fff 	.word	0xfeff8fff
 8006ffc:	40010000 	.word	0x40010000
 8007000:	40010400 	.word	0x40010400

08007004 <__libc_init_array>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	4d0d      	ldr	r5, [pc, #52]	; (800703c <__libc_init_array+0x38>)
 8007008:	4c0d      	ldr	r4, [pc, #52]	; (8007040 <__libc_init_array+0x3c>)
 800700a:	1b64      	subs	r4, r4, r5
 800700c:	10a4      	asrs	r4, r4, #2
 800700e:	2600      	movs	r6, #0
 8007010:	42a6      	cmp	r6, r4
 8007012:	d109      	bne.n	8007028 <__libc_init_array+0x24>
 8007014:	4d0b      	ldr	r5, [pc, #44]	; (8007044 <__libc_init_array+0x40>)
 8007016:	4c0c      	ldr	r4, [pc, #48]	; (8007048 <__libc_init_array+0x44>)
 8007018:	f000 f87c 	bl	8007114 <_init>
 800701c:	1b64      	subs	r4, r4, r5
 800701e:	10a4      	asrs	r4, r4, #2
 8007020:	2600      	movs	r6, #0
 8007022:	42a6      	cmp	r6, r4
 8007024:	d105      	bne.n	8007032 <__libc_init_array+0x2e>
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	f855 3b04 	ldr.w	r3, [r5], #4
 800702c:	4798      	blx	r3
 800702e:	3601      	adds	r6, #1
 8007030:	e7ee      	b.n	8007010 <__libc_init_array+0xc>
 8007032:	f855 3b04 	ldr.w	r3, [r5], #4
 8007036:	4798      	blx	r3
 8007038:	3601      	adds	r6, #1
 800703a:	e7f2      	b.n	8007022 <__libc_init_array+0x1e>
 800703c:	08007194 	.word	0x08007194
 8007040:	08007194 	.word	0x08007194
 8007044:	08007194 	.word	0x08007194
 8007048:	08007198 	.word	0x08007198

0800704c <__itoa>:
 800704c:	1e93      	subs	r3, r2, #2
 800704e:	2b22      	cmp	r3, #34	; 0x22
 8007050:	b510      	push	{r4, lr}
 8007052:	460c      	mov	r4, r1
 8007054:	d904      	bls.n	8007060 <__itoa+0x14>
 8007056:	2300      	movs	r3, #0
 8007058:	700b      	strb	r3, [r1, #0]
 800705a:	461c      	mov	r4, r3
 800705c:	4620      	mov	r0, r4
 800705e:	bd10      	pop	{r4, pc}
 8007060:	2a0a      	cmp	r2, #10
 8007062:	d109      	bne.n	8007078 <__itoa+0x2c>
 8007064:	2800      	cmp	r0, #0
 8007066:	da07      	bge.n	8007078 <__itoa+0x2c>
 8007068:	232d      	movs	r3, #45	; 0x2d
 800706a:	700b      	strb	r3, [r1, #0]
 800706c:	4240      	negs	r0, r0
 800706e:	2101      	movs	r1, #1
 8007070:	4421      	add	r1, r4
 8007072:	f000 f80d 	bl	8007090 <__utoa>
 8007076:	e7f1      	b.n	800705c <__itoa+0x10>
 8007078:	2100      	movs	r1, #0
 800707a:	e7f9      	b.n	8007070 <__itoa+0x24>

0800707c <itoa>:
 800707c:	f7ff bfe6 	b.w	800704c <__itoa>

08007080 <memset>:
 8007080:	4402      	add	r2, r0
 8007082:	4603      	mov	r3, r0
 8007084:	4293      	cmp	r3, r2
 8007086:	d100      	bne.n	800708a <memset+0xa>
 8007088:	4770      	bx	lr
 800708a:	f803 1b01 	strb.w	r1, [r3], #1
 800708e:	e7f9      	b.n	8007084 <memset+0x4>

08007090 <__utoa>:
 8007090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007092:	4c1f      	ldr	r4, [pc, #124]	; (8007110 <__utoa+0x80>)
 8007094:	b08b      	sub	sp, #44	; 0x2c
 8007096:	4605      	mov	r5, r0
 8007098:	460b      	mov	r3, r1
 800709a:	466e      	mov	r6, sp
 800709c:	f104 0c20 	add.w	ip, r4, #32
 80070a0:	6820      	ldr	r0, [r4, #0]
 80070a2:	6861      	ldr	r1, [r4, #4]
 80070a4:	4637      	mov	r7, r6
 80070a6:	c703      	stmia	r7!, {r0, r1}
 80070a8:	3408      	adds	r4, #8
 80070aa:	4564      	cmp	r4, ip
 80070ac:	463e      	mov	r6, r7
 80070ae:	d1f7      	bne.n	80070a0 <__utoa+0x10>
 80070b0:	7921      	ldrb	r1, [r4, #4]
 80070b2:	7139      	strb	r1, [r7, #4]
 80070b4:	1e91      	subs	r1, r2, #2
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	6038      	str	r0, [r7, #0]
 80070ba:	2922      	cmp	r1, #34	; 0x22
 80070bc:	f04f 0100 	mov.w	r1, #0
 80070c0:	d904      	bls.n	80070cc <__utoa+0x3c>
 80070c2:	7019      	strb	r1, [r3, #0]
 80070c4:	460b      	mov	r3, r1
 80070c6:	4618      	mov	r0, r3
 80070c8:	b00b      	add	sp, #44	; 0x2c
 80070ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070cc:	1e58      	subs	r0, r3, #1
 80070ce:	4684      	mov	ip, r0
 80070d0:	fbb5 f7f2 	udiv	r7, r5, r2
 80070d4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80070d8:	fb02 5617 	mls	r6, r2, r7, r5
 80070dc:	4476      	add	r6, lr
 80070de:	460c      	mov	r4, r1
 80070e0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80070e4:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80070e8:	462e      	mov	r6, r5
 80070ea:	42b2      	cmp	r2, r6
 80070ec:	f101 0101 	add.w	r1, r1, #1
 80070f0:	463d      	mov	r5, r7
 80070f2:	d9ed      	bls.n	80070d0 <__utoa+0x40>
 80070f4:	2200      	movs	r2, #0
 80070f6:	545a      	strb	r2, [r3, r1]
 80070f8:	1919      	adds	r1, r3, r4
 80070fa:	1aa5      	subs	r5, r4, r2
 80070fc:	42aa      	cmp	r2, r5
 80070fe:	dae2      	bge.n	80070c6 <__utoa+0x36>
 8007100:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007104:	780e      	ldrb	r6, [r1, #0]
 8007106:	7006      	strb	r6, [r0, #0]
 8007108:	3201      	adds	r2, #1
 800710a:	f801 5901 	strb.w	r5, [r1], #-1
 800710e:	e7f4      	b.n	80070fa <__utoa+0x6a>
 8007110:	08007164 	.word	0x08007164

08007114 <_init>:
 8007114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007116:	bf00      	nop
 8007118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800711a:	bc08      	pop	{r3}
 800711c:	469e      	mov	lr, r3
 800711e:	4770      	bx	lr

08007120 <_fini>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr
