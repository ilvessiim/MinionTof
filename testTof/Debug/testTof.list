
testTof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b88c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800ba90  0800ba90  0001ba90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bedc  0800bedc  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bedc  0800bedc  0001bedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee4  0800bee4  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee4  0800bee4  0001bee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bee8  0800bee8  0001bee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800beec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000020c  0800c0f8  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800c0f8  00020418  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002860a  00000000  00000000  0002023a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003309  00000000  00000000  00048844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f8  00000000  00000000  0004bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0004ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ddbc  00000000  00000000  0004e008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178a3  00000000  00000000  0007bdc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001133c3  00000000  00000000  00093667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a6a2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fac  00000000  00000000  001a6a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000020c 	.word	0x2000020c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ba74 	.word	0x0800ba74

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000210 	.word	0x20000210
 800023c:	0800ba74 	.word	0x0800ba74

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 80005ee:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	uint8_t buff[50];  //DID
	VL53L1_RangingMeasurementData_t RangingData;
	VL53L1_Dev_t  vl53l1_c; // center module
	VL53L1_DEV    Dev = &vl53l1_c; //DID
 80005f0:	463b      	mov	r3, r7
 80005f2:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fbea 	bl	8000dce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f8fb 	bl	80007f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f9e5 	bl	80009cc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000602:	f000 f973 	bl	80008ec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000606:	f000 f9b1 	bl	800096c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // initialize vl53l1x communication parameters
  Dev->I2cHandle = &hi2c1; //DID
 800060a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800060e:	4a76      	ldr	r2, [pc, #472]	; (80007e8 <main+0x200>)
 8000610:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev->I2cDevAddr = 0x41;
 8000614:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000618:	2241      	movs	r2, #65	; 0x41
 800061a:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

  /*** Initialize GPIO expanders ***/
  // Unused GPIO should be configured as outputs to minimize the power consumption
  buff[0] = 0x14; // GPDR (GPIO set direction register)
 800061e:	2314      	movs	r3, #20
 8000620:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
  buff[1] = 0xFF; // GPIO_0 - GPIO_7
 8000624:	23ff      	movs	r3, #255	; 0xff
 8000626:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
  buff[2] = 0xFF; // GPIO_8 - GPIO_15
 800062a:	23ff      	movs	r3, #255	; 0xff
 800062c:	f887 33c2 	strb.w	r3, [r7, #962]	; 0x3c2
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 3, 0xFFFF );
 8000630:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8000634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	2184      	movs	r1, #132	; 0x84
 800063e:	486a      	ldr	r0, [pc, #424]	; (80007e8 <main+0x200>)
 8000640:	f000 ff68 	bl	8001514 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_2_ADDR, buff, 3, 0xFFFF );
 8000644:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8000648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2303      	movs	r3, #3
 8000650:	2186      	movs	r1, #134	; 0x86
 8000652:	4865      	ldr	r0, [pc, #404]	; (80007e8 <main+0x200>)
 8000654:	f000 ff5e 	bl	8001514 <HAL_I2C_Master_Transmit>

  // clear XSHUT (disable center module) -> expander 1, GPIO_15
  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8000658:	2313      	movs	r3, #19
 800065a:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
 800065e:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8000662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2301      	movs	r3, #1
 800066a:	2184      	movs	r1, #132	; 0x84
 800066c:	485e      	ldr	r0, [pc, #376]	; (80007e8 <main+0x200>)
 800066e:	f000 ff51 	bl	8001514 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
 8000672:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 8000676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2301      	movs	r3, #1
 800067e:	2184      	movs	r1, #132	; 0x84
 8000680:	4859      	ldr	r0, [pc, #356]	; (80007e8 <main+0x200>)
 8000682:	f001 f83b 	bl	80016fc <HAL_I2C_Master_Receive>
  buff[1] = buff[0] & ~( 1 << ( 15 - 8 ) ); // clear GPIO_15
 8000686:	f897 33c0 	ldrb.w	r3, [r7, #960]	; 0x3c0
 800068a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 8000694:	2313      	movs	r3, #19
 8000696:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );
 800069a:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 800069e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a2:	9300      	str	r3, [sp, #0]
 80006a4:	2302      	movs	r3, #2
 80006a6:	2184      	movs	r1, #132	; 0x84
 80006a8:	484f      	ldr	r0, [pc, #316]	; (80007e8 <main+0x200>)
 80006aa:	f000 ff33 	bl	8001514 <HAL_I2C_Master_Transmit>

  HAL_Delay( 2 ); // 2ms reset time
 80006ae:	2002      	movs	r0, #2
 80006b0:	f000 fbea 	bl	8000e88 <HAL_Delay>

  // set XSHUT (enable center module) -> expander 1, GPIO_15
  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state)
 80006b4:	2313      	movs	r3, #19
 80006b6:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
 80006ba:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80006be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	2184      	movs	r1, #132	; 0x84
 80006c8:	4847      	ldr	r0, [pc, #284]	; (80007e8 <main+0x200>)
 80006ca:	f000 ff23 	bl	8001514 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive( &hi2c1, EXPANDER_1_ADDR, buff, 1, 0xFFFF );
 80006ce:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80006d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2301      	movs	r3, #1
 80006da:	2184      	movs	r1, #132	; 0x84
 80006dc:	4842      	ldr	r0, [pc, #264]	; (80007e8 <main+0x200>)
 80006de:	f001 f80d 	bl	80016fc <HAL_I2C_Master_Receive>
  buff[1] = buff[0] | ( 1 << ( 15 - 8 ) ); // set GPIO_15
 80006e2:	f897 33c0 	ldrb.w	r3, [r7, #960]	; 0x3c0
 80006e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	f887 33c1 	strb.w	r3, [r7, #961]	; 0x3c1
  buff[0] = 0x13; // GPSR + 1 ( GPIO set pin state register)
 80006f0:	2313      	movs	r3, #19
 80006f2:	f887 33c0 	strb.w	r3, [r7, #960]	; 0x3c0
  HAL_I2C_Master_Transmit( &hi2c1, EXPANDER_1_ADDR, buff, 2, 0xFFFF );
 80006f6:	f507 7270 	add.w	r2, r7, #960	; 0x3c0
 80006fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2302      	movs	r3, #2
 8000702:	2184      	movs	r1, #132	; 0x84
 8000704:	4838      	ldr	r0, [pc, #224]	; (80007e8 <main+0x200>)
 8000706:	f000 ff05 	bl	8001514 <HAL_I2C_Master_Transmit>

  HAL_Delay( 2 );
 800070a:	2002      	movs	r0, #2
 800070c:	f000 fbbc 	bl	8000e88 <HAL_Delay>

  /*** VL53L1X Initialization ***/
  VL53L1_WaitDeviceBooted( Dev );
 8000710:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000714:	f003 f90f 	bl	8003936 <VL53L1_WaitDeviceBooted>
  VL53L1_DataInit( Dev );
 8000718:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 800071c:	f003 f8b3 	bl	8003886 <VL53L1_DataInit>
  VL53L1_StaticInit( Dev );
 8000720:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000724:	f003 f8e8 	bl	80038f8 <VL53L1_StaticInit>
  VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 8000728:	2103      	movs	r1, #3
 800072a:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 800072e:	f003 fa33 	bl	8003b98 <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 8000732:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000736:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 800073a:	f003 faa3 	bl	8003c84 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 800073e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000742:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000746:	f003 fc29 	bl	8003f9c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
  VL53L1_StartMeasurement( Dev );  //DID
 800074a:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 800074e:	f003 fd63 	bl	8004218 <VL53L1_StartMeasurement>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	VL53L1_WaitMeasurementDataReady( Dev );
 8000752:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000756:	f003 fde1 	bl	800431c <VL53L1_WaitMeasurementDataReady>

	VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 800075a:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800075e:	4619      	mov	r1, r3
 8000760:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000764:	f003 ff96 	bl	8004694 <VL53L1_GetRangingMeasurementData>

  	sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 8000768:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 800076c:	461a      	mov	r2, r3
 800076e:	f9b7 33bc 	ldrsh.w	r3, [r7, #956]	; 0x3bc
  			( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
 8000772:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
  	sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 8000776:	ee07 1a90 	vmov	s15, r1
 800077a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800077e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80007d8 <main+0x1f0>
 8000782:	ee86 7b05 	vdiv.f64	d7, d6, d5
  			( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
 8000786:	f8d7 13b0 	ldr.w	r1, [r7, #944]	; 0x3b0
  	sprintf( (char*)buff, "%d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 800078a:	ee06 1a90 	vmov	s13, r1
 800078e:	eeb8 5b66 	vcvt.f64.u32	d5, s13
 8000792:	ed9f 4b13 	vldr	d4, [pc, #76]	; 80007e0 <main+0x1f8>
 8000796:	ee85 6b04 	vdiv.f64	d6, d5, d4
 800079a:	f507 7070 	add.w	r0, r7, #960	; 0x3c0
 800079e:	ed8d 6b02 	vstr	d6, [sp, #8]
 80007a2:	ed8d 7b00 	vstr	d7, [sp]
 80007a6:	4911      	ldr	r1, [pc, #68]	; (80007ec <main+0x204>)
 80007a8:	f008 ffa0 	bl	80096ec <siprintf>
	HAL_UART_Transmit( &huart2, buff, strlen( (char*)buff ), 0xFFFF );
 80007ac:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff fd45 	bl	8000240 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f507 7170 	add.w	r1, r7, #960	; 0x3c0
 80007be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <main+0x208>)
 80007c4:	f002 fc02 	bl	8002fcc <HAL_UART_Transmit>

  	VL53L1_ClearInterruptAndStartMeasurement( Dev );
 80007c8:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 80007cc:	f003 fd90 	bl	80042f0 <VL53L1_ClearInterruptAndStartMeasurement>
	VL53L1_WaitMeasurementDataReady( Dev );
 80007d0:	e7bf      	b.n	8000752 <main+0x16a>
 80007d2:	bf00      	nop
 80007d4:	f3af 8000 	nop.w
 80007d8:	00000000 	.word	0x00000000
 80007dc:	40f00000 	.word	0x40f00000
 80007e0:	00000000 	.word	0x00000000
 80007e4:	40efe700 	.word	0x40efe700
 80007e8:	20000234 	.word	0x20000234
 80007ec:	0800ba90 	.word	0x0800ba90
 80007f0:	20000280 	.word	0x20000280

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b0b8      	sub	sp, #224	; 0xe0
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007fe:	2234      	movs	r2, #52	; 0x34
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f008 fb28 	bl	8008e58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000818:	f107 0308 	add.w	r3, r7, #8
 800081c:	2290      	movs	r2, #144	; 0x90
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f008 fb19 	bl	8008e58 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <SystemClock_Config+0xf0>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a2e      	ldr	r2, [pc, #184]	; (80008e4 <SystemClock_Config+0xf0>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <SystemClock_Config+0xf0>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800083e:	4b2a      	ldr	r3, [pc, #168]	; (80008e8 <SystemClock_Config+0xf4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000846:	4a28      	ldr	r2, [pc, #160]	; (80008e8 <SystemClock_Config+0xf4>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0xf4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000866:	2310      	movs	r3, #16
 8000868:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000876:	4618      	mov	r0, r3
 8000878:	f001 faae 	bl	8001dd8 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000882:	f000 f8c7 	bl	8000a14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f001 fd42 	bl	8002334 <HAL_RCC_ClockConfig>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008b6:	f000 f8ad 	bl	8000a14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80008ba:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008be:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c8:	f107 0308 	add.w	r3, r7, #8
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 ff07 	bl	80026e0 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80008d8:	f000 f89c 	bl	8000a14 <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	37e0      	adds	r7, #224	; 0xe0
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_I2C1_Init+0x74>)
 80008f2:	4a1c      	ldr	r2, [pc, #112]	; (8000964 <MX_I2C1_Init+0x78>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_I2C1_Init+0x74>)
 80008f8:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <MX_I2C1_Init+0x7c>)
 80008fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_I2C1_Init+0x74>)
 8000904:	2201      	movs	r2, #1
 8000906:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_I2C1_Init+0x74>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000926:	480e      	ldr	r0, [pc, #56]	; (8000960 <MX_I2C1_Init+0x74>)
 8000928:	f000 fd64 	bl	80013f4 <HAL_I2C_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000932:	f000 f86f 	bl	8000a14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000936:	2100      	movs	r1, #0
 8000938:	4809      	ldr	r0, [pc, #36]	; (8000960 <MX_I2C1_Init+0x74>)
 800093a:	f001 f9b5 	bl	8001ca8 <HAL_I2CEx_ConfigAnalogFilter>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000944:	f000 f866 	bl	8000a14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000948:	2100      	movs	r1, #0
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_I2C1_Init+0x74>)
 800094c:	f001 f9f7 	bl	8001d3e <HAL_I2CEx_ConfigDigitalFilter>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000956:	f000 f85d 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000234 	.word	0x20000234
 8000964:	40005400 	.word	0x40005400
 8000968:	00303d5b 	.word	0x00303d5b

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART2_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009b0:	f002 fabe 	bl	8002f30 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f82b 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000280 	.word	0x20000280
 80009c8:	40004400 	.word	0x40004400

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_GPIO_Init+0x44>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_MspInit+0x44>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <HAL_MspInit+0x44>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <HAL_MspInit+0x44>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x44>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x44>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x44>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_I2C_MspInit+0x7c>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d128      	bne.n	8000adc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <HAL_I2C_MspInit+0x80>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <HAL_I2C_MspInit+0x80>)
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <HAL_I2C_MspInit+0x80>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa8:	2312      	movs	r3, #18
 8000aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	480b      	ldr	r0, [pc, #44]	; (8000aec <HAL_I2C_MspInit+0x84>)
 8000ac0:	f000 faec 	bl	800109c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_I2C_MspInit+0x80>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_I2C_MspInit+0x80>)
 8000aca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ace:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_I2C_MspInit+0x80>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020400 	.word	0x40020400

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0x7c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d127      	bne.n	8000b62 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b42:	230c      	movs	r3, #12
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b52:	2307      	movs	r3, #7
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_UART_MspInit+0x84>)
 8000b5e:	f000 fa9d 	bl	800109c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f940 	bl	8000e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
	return 1;
 8000bd0:	2301      	movs	r3, #1
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <_kill>:

int _kill(int pid, int sig)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000be6:	f008 f8ff 	bl	8008de8 <__errno>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2216      	movs	r2, #22
 8000bee:	601a      	str	r2, [r3, #0]
	return -1;
 8000bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_exit>:

void _exit (int status)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c04:	f04f 31ff 	mov.w	r1, #4294967295
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ffe7 	bl	8000bdc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c0e:	e7fe      	b.n	8000c0e <_exit+0x12>

08000c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	e00a      	b.n	8000c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c22:	f3af 8000 	nop.w
 8000c26:	4601      	mov	r1, r0
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	1c5a      	adds	r2, r3, #1
 8000c2c:	60ba      	str	r2, [r7, #8]
 8000c2e:	b2ca      	uxtb	r2, r1
 8000c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3301      	adds	r3, #1
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	dbf0      	blt.n	8000c22 <_read+0x12>
	}

return len;
 8000c40:	687b      	ldr	r3, [r7, #4]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	e009      	b.n	8000c70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	60ba      	str	r2, [r7, #8]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbf1      	blt.n	8000c5c <_write+0x12>
	}
	return len;
 8000c78:	687b      	ldr	r3, [r7, #4]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_close>:

int _close(int file)
{
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
	return -1;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
 8000ca2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000caa:	605a      	str	r2, [r3, #4]
	return 0;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_isatty>:

int _isatty(int file)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	return 1;
 8000cc2:	2301      	movs	r3, #1
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
	return 0;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f008 f864 	bl	8008de8 <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20080000 	.word	0x20080000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	20000228 	.word	0x20000228
 8000d54:	20000418 	.word	0x20000418

08000d58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d82:	490e      	ldr	r1, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d98:	4c0b      	ldr	r4, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ffd7 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f008 f823 	bl	8008df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fc1b 	bl	80005e8 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8000dc0:	0800beec 	.word	0x0800beec
  ldr r2, =_sbss
 8000dc4:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8000dc8:	20000418 	.word	0x20000418

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>

08000dce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f000 f92e 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd8:	200f      	movs	r0, #15
 8000dda:	f000 f805 	bl	8000de8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000dde:	f7ff fe1f 	bl	8000a20 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_InitTick+0x54>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x58>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f93b 	bl	8001082 <HAL_SYSTICK_Config>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e00e      	b.n	8000e34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2b0f      	cmp	r3, #15
 8000e1a:	d80a      	bhi.n	8000e32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	f04f 30ff 	mov.w	r0, #4294967295
 8000e24:	f000 f911 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <HAL_InitTick+0x5c>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	e000      	b.n	8000e34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000004 	.word	0x20000004

08000e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_IncTick+0x20>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	461a      	mov	r2, r3
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x24>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <HAL_IncTick+0x24>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000304 	.word	0x20000304

08000e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return uwTick;
 8000e74:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <HAL_GetTick+0x14>)
 8000e76:	681b      	ldr	r3, [r3, #0]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000304 	.word	0x20000304

08000e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff ffee 	bl	8000e70 <HAL_GetTick>
 8000e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea0:	d005      	beq.n	8000eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_Delay+0x44>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eae:	bf00      	nop
 8000eb0:	f7ff ffde 	bl	8000e70 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d8f7      	bhi.n	8000eb0 <HAL_Delay+0x28>
  {
  }
}
 8000ec0:	bf00      	nop
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <__NVIC_SetPriorityGrouping+0x40>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <__NVIC_SetPriorityGrouping+0x40>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	05fa0000 	.word	0x05fa0000

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff47 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff5c 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffb0 	bl	8000ff0 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	; 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	e175      	b.n	80013a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010bc:	2201      	movs	r2, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	f040 8164 	bne.w	80013a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d00b      	beq.n	80010fa <HAL_GPIO_Init+0x5e>
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ee:	2b11      	cmp	r3, #17
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b12      	cmp	r3, #18
 80010f8:	d130      	bne.n	800115c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x100>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b12      	cmp	r3, #18
 800119a:	d123      	bne.n	80011e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	69b9      	ldr	r1, [r7, #24]
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0203 	and.w	r2, r3, #3
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80be 	beq.w	80013a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b66      	ldr	r3, [pc, #408]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a65      	ldr	r2, [pc, #404]	; (80013c0 <HAL_GPIO_Init+0x324>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b63      	ldr	r3, [pc, #396]	; (80013c0 <HAL_GPIO_Init+0x324>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800123e:	4a61      	ldr	r2, [pc, #388]	; (80013c4 <HAL_GPIO_Init+0x328>)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	220f      	movs	r2, #15
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <HAL_GPIO_Init+0x32c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d037      	beq.n	80012da <HAL_GPIO_Init+0x23e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a57      	ldr	r2, [pc, #348]	; (80013cc <HAL_GPIO_Init+0x330>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d031      	beq.n	80012d6 <HAL_GPIO_Init+0x23a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a56      	ldr	r2, [pc, #344]	; (80013d0 <HAL_GPIO_Init+0x334>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d02b      	beq.n	80012d2 <HAL_GPIO_Init+0x236>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a55      	ldr	r2, [pc, #340]	; (80013d4 <HAL_GPIO_Init+0x338>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d025      	beq.n	80012ce <HAL_GPIO_Init+0x232>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a54      	ldr	r2, [pc, #336]	; (80013d8 <HAL_GPIO_Init+0x33c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d01f      	beq.n	80012ca <HAL_GPIO_Init+0x22e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a53      	ldr	r2, [pc, #332]	; (80013dc <HAL_GPIO_Init+0x340>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d019      	beq.n	80012c6 <HAL_GPIO_Init+0x22a>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a52      	ldr	r2, [pc, #328]	; (80013e0 <HAL_GPIO_Init+0x344>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d013      	beq.n	80012c2 <HAL_GPIO_Init+0x226>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a51      	ldr	r2, [pc, #324]	; (80013e4 <HAL_GPIO_Init+0x348>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00d      	beq.n	80012be <HAL_GPIO_Init+0x222>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a50      	ldr	r2, [pc, #320]	; (80013e8 <HAL_GPIO_Init+0x34c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <HAL_GPIO_Init+0x21e>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a4f      	ldr	r2, [pc, #316]	; (80013ec <HAL_GPIO_Init+0x350>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_GPIO_Init+0x21a>
 80012b2:	2309      	movs	r3, #9
 80012b4:	e012      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012b6:	230a      	movs	r3, #10
 80012b8:	e010      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012ba:	2308      	movs	r3, #8
 80012bc:	e00e      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012be:	2307      	movs	r3, #7
 80012c0:	e00c      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e00a      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x240>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	; (80013c4 <HAL_GPIO_Init+0x328>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fa:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <HAL_GPIO_Init+0x354>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800131e:	4a34      	ldr	r2, [pc, #208]	; (80013f0 <HAL_GPIO_Init+0x354>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001324:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <HAL_GPIO_Init+0x354>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001348:	4a29      	ldr	r2, [pc, #164]	; (80013f0 <HAL_GPIO_Init+0x354>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <HAL_GPIO_Init+0x354>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001372:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <HAL_GPIO_Init+0x354>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_GPIO_Init+0x354>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800139c:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_GPIO_Init+0x354>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f ae86 	bls.w	80010bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40021400 	.word	0x40021400
 80013e0:	40021800 	.word	0x40021800
 80013e4:	40021c00 	.word	0x40021c00
 80013e8:	40022000 	.word	0x40022000
 80013ec:	40022400 	.word	0x40022400
 80013f0:	40013c00 	.word	0x40013c00

080013f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e07f      	b.n	8001506 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d106      	bne.n	8001420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fb24 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2224      	movs	r2, #36	; 0x24
 8001424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001444:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001454:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d107      	bne.n	800146e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	e006      	b.n	800147c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800147a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d104      	bne.n	800148e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800148c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <HAL_I2C_Init+0x11c>)
 800149a:	430b      	orrs	r3, r1
 800149c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691a      	ldr	r2, [r3, #16]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	ea42 0103 	orr.w	r1, r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	021a      	lsls	r2, r3, #8
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69d9      	ldr	r1, [r3, #28]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1a      	ldr	r2, [r3, #32]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2220      	movs	r2, #32
 80014f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	02008000 	.word	0x02008000

08001514 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af02      	add	r7, sp, #8
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	461a      	mov	r2, r3
 8001520:	460b      	mov	r3, r1
 8001522:	817b      	strh	r3, [r7, #10]
 8001524:	4613      	mov	r3, r2
 8001526:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b20      	cmp	r3, #32
 8001532:	f040 80da 	bne.w	80016ea <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_I2C_Master_Transmit+0x30>
 8001540:	2302      	movs	r3, #2
 8001542:	e0d3      	b.n	80016ec <HAL_I2C_Master_Transmit+0x1d8>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800154c:	f7ff fc90 	bl	8000e70 <HAL_GetTick>
 8001550:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	2319      	movs	r3, #25
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f9e6 	bl	8001930 <I2C_WaitOnFlagUntilTimeout>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0be      	b.n	80016ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2221      	movs	r2, #33	; 0x21
 8001572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	2210      	movs	r2, #16
 800157a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	893a      	ldrh	r2, [r7, #8]
 800158e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159a:	b29b      	uxth	r3, r3
 800159c:	2bff      	cmp	r3, #255	; 0xff
 800159e:	d90e      	bls.n	80015be <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	8979      	ldrh	r1, [r7, #10]
 80015ae:	4b51      	ldr	r3, [pc, #324]	; (80016f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 fb48 	bl	8001c4c <I2C_TransferConfig>
 80015bc:	e06c      	b.n	8001698 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	8979      	ldrh	r1, [r7, #10]
 80015d0:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_I2C_Master_Transmit+0x1e0>)
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fb37 	bl	8001c4c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80015de:	e05b      	b.n	8001698 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	6a39      	ldr	r1, [r7, #32]
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 f9e3 	bl	80019b0 <I2C_WaitOnTXISFlagUntilTimeout>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e07b      	b.n	80016ec <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	781a      	ldrb	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800160e:	b29b      	uxth	r3, r3
 8001610:	3b01      	subs	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800161c:	3b01      	subs	r3, #1
 800161e:	b29a      	uxth	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001628:	b29b      	uxth	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d034      	beq.n	8001698 <HAL_I2C_Master_Transmit+0x184>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001632:	2b00      	cmp	r3, #0
 8001634:	d130      	bne.n	8001698 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	6a3b      	ldr	r3, [r7, #32]
 800163c:	2200      	movs	r2, #0
 800163e:	2180      	movs	r1, #128	; 0x80
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 f975 	bl	8001930 <I2C_WaitOnFlagUntilTimeout>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e04d      	b.n	80016ec <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	2bff      	cmp	r3, #255	; 0xff
 8001658:	d90e      	bls.n	8001678 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	22ff      	movs	r2, #255	; 0xff
 800165e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001664:	b2da      	uxtb	r2, r3
 8001666:	8979      	ldrh	r1, [r7, #10]
 8001668:	2300      	movs	r3, #0
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f000 faeb 	bl	8001c4c <I2C_TransferConfig>
 8001676:	e00f      	b.n	8001698 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167c:	b29a      	uxth	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001686:	b2da      	uxtb	r2, r3
 8001688:	8979      	ldrh	r1, [r7, #10]
 800168a:	2300      	movs	r3, #0
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f000 fada 	bl	8001c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800169c:	b29b      	uxth	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d19e      	bne.n	80015e0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	6a39      	ldr	r1, [r7, #32]
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f9c2 	bl	8001a30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e01a      	b.n	80016ec <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2220      	movs	r2, #32
 80016bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_I2C_Master_Transmit+0x1e4>)
 80016ca:	400b      	ands	r3, r1
 80016cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2220      	movs	r2, #32
 80016d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80016ea:	2302      	movs	r3, #2
  }
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	80002000 	.word	0x80002000
 80016f8:	fe00e800 	.word	0xfe00e800

080016fc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af02      	add	r7, sp, #8
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	461a      	mov	r2, r3
 8001708:	460b      	mov	r3, r1
 800170a:	817b      	strh	r3, [r7, #10]
 800170c:	4613      	mov	r3, r2
 800170e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b20      	cmp	r3, #32
 800171a:	f040 80db 	bne.w	80018d4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_I2C_Master_Receive+0x30>
 8001728:	2302      	movs	r3, #2
 800172a:	e0d4      	b.n	80018d6 <HAL_I2C_Master_Receive+0x1da>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001734:	f7ff fb9c 	bl	8000e70 <HAL_GetTick>
 8001738:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2319      	movs	r3, #25
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f000 f8f2 	bl	8001930 <I2C_WaitOnFlagUntilTimeout>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e0bf      	b.n	80018d6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2222      	movs	r2, #34	; 0x22
 800175a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2210      	movs	r2, #16
 8001762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	893a      	ldrh	r2, [r7, #8]
 8001776:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2200      	movs	r2, #0
 800177c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001782:	b29b      	uxth	r3, r3
 8001784:	2bff      	cmp	r3, #255	; 0xff
 8001786:	d90e      	bls.n	80017a6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	22ff      	movs	r2, #255	; 0xff
 800178c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	b2da      	uxtb	r2, r3
 8001794:	8979      	ldrh	r1, [r7, #10]
 8001796:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <HAL_I2C_Master_Receive+0x1e4>)
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f000 fa54 	bl	8001c4c <I2C_TransferConfig>
 80017a4:	e06d      	b.n	8001882 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	8979      	ldrh	r1, [r7, #10]
 80017b8:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_I2C_Master_Receive+0x1e4>)
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fa43 	bl	8001c4c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80017c6:	e05c      	b.n	8001882 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	6a39      	ldr	r1, [r7, #32]
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f96b 	bl	8001aa8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e07c      	b.n	80018d6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001804:	b29b      	uxth	r3, r3
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001812:	b29b      	uxth	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	d034      	beq.n	8001882 <HAL_I2C_Master_Receive+0x186>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d130      	bne.n	8001882 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	2200      	movs	r2, #0
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	68f8      	ldr	r0, [r7, #12]
 800182c:	f000 f880 	bl	8001930 <I2C_WaitOnFlagUntilTimeout>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e04d      	b.n	80018d6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	2bff      	cmp	r3, #255	; 0xff
 8001842:	d90e      	bls.n	8001862 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	b2da      	uxtb	r2, r3
 8001850:	8979      	ldrh	r1, [r7, #10]
 8001852:	2300      	movs	r3, #0
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 f9f6 	bl	8001c4c <I2C_TransferConfig>
 8001860:	e00f      	b.n	8001882 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	b2da      	uxtb	r2, r3
 8001872:	8979      	ldrh	r1, [r7, #10]
 8001874:	2300      	movs	r3, #0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 f9e5 	bl	8001c4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d19d      	bne.n	80017c8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	6a39      	ldr	r1, [r7, #32]
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f000 f8cd 	bl	8001a30 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e01a      	b.n	80018d6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2220      	movs	r2, #32
 80018a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6859      	ldr	r1, [r3, #4]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_I2C_Master_Receive+0x1e8>)
 80018b4:	400b      	ands	r3, r1
 80018b6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2220      	movs	r2, #32
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e000      	b.n	80018d6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80018d4:	2302      	movs	r3, #2
  }
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	80002400 	.word	0x80002400
 80018e4:	fe00e800 	.word	0xfe00e800

080018e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d103      	bne.n	8001906 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b01      	cmp	r3, #1
 8001912:	d007      	beq.n	8001924 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	619a      	str	r2, [r3, #24]
  }
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001940:	e022      	b.n	8001988 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d01e      	beq.n	8001988 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800194a:	f7ff fa91 	bl	8000e70 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d302      	bcc.n	8001960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d113      	bne.n	8001988 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	f043 0220 	orr.w	r2, r3, #32
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2220      	movs	r2, #32
 8001970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e00f      	b.n	80019a8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4013      	ands	r3, r2
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	429a      	cmp	r2, r3
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d0cd      	beq.n	8001942 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019bc:	e02c      	b.n	8001a18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	f000 f8dc 	bl	8001b80 <I2C_IsAcknowledgeFailed>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e02a      	b.n	8001a28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d01e      	beq.n	8001a18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019da:	f7ff fa49 	bl	8000e70 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d302      	bcc.n	80019f0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d113      	bne.n	8001a18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	f043 0220 	orr.w	r2, r3, #32
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2220      	movs	r2, #32
 8001a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e007      	b.n	8001a28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d1cb      	bne.n	80019be <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a3c:	e028      	b.n	8001a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f89c 	bl	8001b80 <I2C_IsAcknowledgeFailed>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e026      	b.n	8001aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a52:	f7ff fa0d 	bl	8000e70 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d302      	bcc.n	8001a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d113      	bne.n	8001a90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f043 0220 	orr.w	r2, r3, #32
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2220      	movs	r2, #32
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e007      	b.n	8001aa0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f003 0320 	and.w	r3, r3, #32
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	d1cf      	bne.n	8001a3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ab4:	e055      	b.n	8001b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f860 	bl	8001b80 <I2C_IsAcknowledgeFailed>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e053      	b.n	8001b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b20      	cmp	r3, #32
 8001ad6:	d129      	bne.n	8001b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d105      	bne.n	8001af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e03f      	b.n	8001b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2220      	movs	r2, #32
 8001af8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001b06:	400b      	ands	r3, r1
 8001b08:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e022      	b.n	8001b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b2c:	f7ff f9a0 	bl	8000e70 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d302      	bcc.n	8001b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f043 0220 	orr.w	r2, r3, #32
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e007      	b.n	8001b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d1a2      	bne.n	8001ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	fe00e800 	.word	0xfe00e800

08001b80 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d151      	bne.n	8001c3e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b9a:	e022      	b.n	8001be2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba2:	d01e      	beq.n	8001be2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba4:	f7ff f964 	bl	8000e70 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d302      	bcc.n	8001bba <I2C_IsAcknowledgeFailed+0x3a>
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d113      	bne.n	8001be2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f043 0220 	orr.w	r2, r3, #32
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e02e      	b.n	8001c40 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d1d5      	bne.n	8001b9c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff fe71 	bl	80018e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <I2C_IsAcknowledgeFailed+0xc8>)
 8001c12:	400b      	ands	r3, r1
 8001c14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f043 0204 	orr.w	r2, r3, #4
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	fe00e800 	.word	0xfe00e800

08001c4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	817b      	strh	r3, [r7, #10]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	0d5b      	lsrs	r3, r3, #21
 8001c68:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c6c:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <I2C_TransferConfig+0x58>)
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	43db      	mvns	r3, r3
 8001c72:	ea02 0103 	and.w	r1, r2, r3
 8001c76:	897b      	ldrh	r3, [r7, #10]
 8001c78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c7c:	7a7b      	ldrb	r3, [r7, #9]
 8001c7e:	041b      	lsls	r3, r3, #16
 8001c80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001c84:	431a      	orrs	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	03ff63ff 	.word	0x03ff63ff

08001ca8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	d138      	bne.n	8001d30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e032      	b.n	8001d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2224      	movs	r2, #36	; 0x24
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6819      	ldr	r1, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e000      	b.n	8001d32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d30:	2302      	movs	r3, #2
  }
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b20      	cmp	r3, #32
 8001d52:	d139      	bne.n	8001dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e033      	b.n	8001dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2224      	movs	r2, #36	; 0x24
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dc8:	2302      	movs	r3, #2
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e29b      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8087 	beq.w	8001f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfc:	4b96      	ldr	r3, [pc, #600]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d00c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e08:	4b93      	ldr	r3, [pc, #588]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d112      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62>
 8001e14:	4b90      	ldr	r3, [pc, #576]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e20:	d10b      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d06c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x130>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d168      	bne.n	8001f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e275      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x7a>
 8001e44:	4b84      	ldr	r3, [pc, #528]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a83      	ldr	r2, [pc, #524]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e02e      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x9c>
 8001e5a:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7e      	ldr	r2, [pc, #504]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b7c      	ldr	r3, [pc, #496]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7b      	ldr	r2, [pc, #492]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	4b76      	ldr	r3, [pc, #472]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a75      	ldr	r2, [pc, #468]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b73      	ldr	r3, [pc, #460]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a72      	ldr	r2, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e98:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6e      	ldr	r2, [pc, #440]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b6c      	ldr	r3, [pc, #432]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a6b      	ldr	r2, [pc, #428]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7fe ffda 	bl	8000e70 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7fe ffd6 	bl	8000e70 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e229      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xe8>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7fe ffc6 	bl	8000e70 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7fe ffc2 	bl	8000e70 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e215      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b57      	ldr	r3, [pc, #348]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x110>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d069      	beq.n	8001fea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f22:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x190>
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x17a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e1e9      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	493d      	ldr	r1, [pc, #244]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	e040      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d023      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a38      	ldr	r2, [pc, #224]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff78 	bl	8000e70 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f84:	f7fe ff74 	bl	8000e70 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1c7      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b30      	ldr	r3, [pc, #192]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4929      	ldr	r1, [pc, #164]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
 8001fb6:	e018      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a26      	ldr	r2, [pc, #152]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe ff54 	bl	8000e70 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7fe ff50 	bl	8000e70 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1a3      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d038      	beq.n	8002068 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d019      	beq.n	8002032 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7fe ff31 	bl	8000e70 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002012:	f7fe ff2d 	bl	8000e70 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e180      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x23a>
 8002030:	e01a      	b.n	8002068 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7fe ff17 	bl	8000e70 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002046:	f7fe ff13 	bl	8000e70 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d903      	bls.n	800205c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e166      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
 8002058:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b92      	ldr	r3, [pc, #584]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800205e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a4 	beq.w	80021be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b8c      	ldr	r3, [pc, #560]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b89      	ldr	r3, [pc, #548]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a88      	ldr	r2, [pc, #544]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b86      	ldr	r3, [pc, #536]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209e:	4b83      	ldr	r3, [pc, #524]	; (80022ac <HAL_RCC_OscConfig+0x4d4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d118      	bne.n	80020dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020aa:	4b80      	ldr	r3, [pc, #512]	; (80022ac <HAL_RCC_OscConfig+0x4d4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7f      	ldr	r2, [pc, #508]	; (80022ac <HAL_RCC_OscConfig+0x4d4>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b6:	f7fe fedb 	bl	8000e70 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7fe fed7 	bl	8000e70 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	; 0x64
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e12a      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d0:	4b76      	ldr	r3, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x4d4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x31a>
 80020e4:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a6f      	ldr	r2, [pc, #444]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
 80020f0:	e02d      	b.n	800214e <HAL_RCC_OscConfig+0x376>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x33c>
 80020fa:	4b6b      	ldr	r3, [pc, #428]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a6a      	ldr	r2, [pc, #424]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
 8002106:	4b68      	ldr	r3, [pc, #416]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	4a67      	ldr	r2, [pc, #412]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6713      	str	r3, [r2, #112]	; 0x70
 8002112:	e01c      	b.n	800214e <HAL_RCC_OscConfig+0x376>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d10c      	bne.n	8002136 <HAL_RCC_OscConfig+0x35e>
 800211c:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a61      	ldr	r2, [pc, #388]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	4b5f      	ldr	r3, [pc, #380]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a5e      	ldr	r2, [pc, #376]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	e00b      	b.n	800214e <HAL_RCC_OscConfig+0x376>
 8002136:	4b5c      	ldr	r3, [pc, #368]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	4a5b      	ldr	r2, [pc, #364]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6713      	str	r3, [r2, #112]	; 0x70
 8002142:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a58      	ldr	r2, [pc, #352]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d015      	beq.n	8002182 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7fe fe8b 	bl	8000e70 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7fe fe87 	bl	8000e70 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0d8      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	4b4c      	ldr	r3, [pc, #304]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ee      	beq.n	800215e <HAL_RCC_OscConfig+0x386>
 8002180:	e014      	b.n	80021ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7fe fe75 	bl	8000e70 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7fe fe71 	bl	8000e70 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0c2      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	4b41      	ldr	r3, [pc, #260]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ee      	bne.n	800218a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b3d      	ldr	r3, [pc, #244]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a3c      	ldr	r2, [pc, #240]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80ae 	beq.w	8002324 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c8:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d06d      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d14b      	bne.n	8002274 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80021e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe fe42 	bl	8000e70 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7fe fe3e 	bl	8000e70 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e091      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	071b      	lsls	r3, r3, #28
 800223a:	491b      	ldr	r1, [pc, #108]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fe10 	bl	8000e70 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fe0c 	bl	8000e70 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e05f      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x47c>
 8002272:	e057      	b.n	8002324 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800227a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fdf6 	bl	8000e70 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002288:	f7fe fdf2 	bl	8000e70 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e045      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229a:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x4b0>
 80022a6:	e03d      	b.n	8002324 <HAL_RCC_OscConfig+0x54c>
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <HAL_RCC_OscConfig+0x558>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d030      	beq.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d129      	bne.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d122      	bne.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022e0:	4013      	ands	r3, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d119      	bne.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	3b01      	subs	r3, #1
 80022fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d10f      	bne.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0d0      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800234c:	4b6a      	ldr	r3, [pc, #424]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d910      	bls.n	800237c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b67      	ldr	r3, [pc, #412]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	4965      	ldr	r1, [pc, #404]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b8      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002394:	4b59      	ldr	r3, [pc, #356]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a58      	ldr	r2, [pc, #352]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 800239a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800239e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b50      	ldr	r3, [pc, #320]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	494d      	ldr	r1, [pc, #308]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d040      	beq.n	8002458 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d115      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e073      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002406:	4b3d      	ldr	r3, [pc, #244]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e06b      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b39      	ldr	r3, [pc, #228]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4936      	ldr	r1, [pc, #216]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002428:	f7fe fd22 	bl	8000e70 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7fe fd1e 	bl	8000e70 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e053      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b2d      	ldr	r3, [pc, #180]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	429a      	cmp	r2, r3
 8002464:	d210      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f023 020f 	bic.w	r2, r3, #15
 800246e:	4922      	ldr	r1, [pc, #136]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 030f 	and.w	r3, r3, #15
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e032      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4916      	ldr	r1, [pc, #88]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490e      	ldr	r1, [pc, #56]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c6:	f000 f821 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_ClockConfig+0x1c8>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	490a      	ldr	r1, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1cc>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a09      	ldr	r2, [pc, #36]	; (8002504 <HAL_RCC_ClockConfig+0x1d0>)
 80024e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024e2:	4b09      	ldr	r3, [pc, #36]	; (8002508 <HAL_RCC_ClockConfig+0x1d4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fc7e 	bl	8000de8 <HAL_InitTick>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00
 80024fc:	40023800 	.word	0x40023800
 8002500:	0800bae4 	.word	0x0800bae4
 8002504:	20000000 	.word	0x20000000
 8002508:	20000004 	.word	0x20000004

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002512:	2100      	movs	r1, #0
 8002514:	6079      	str	r1, [r7, #4]
 8002516:	2100      	movs	r1, #0
 8002518:	60f9      	str	r1, [r7, #12]
 800251a:	2100      	movs	r1, #0
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800251e:	2100      	movs	r1, #0
 8002520:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002522:	4952      	ldr	r1, [pc, #328]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 8002524:	6889      	ldr	r1, [r1, #8]
 8002526:	f001 010c 	and.w	r1, r1, #12
 800252a:	2908      	cmp	r1, #8
 800252c:	d00d      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x3e>
 800252e:	2908      	cmp	r1, #8
 8002530:	f200 8094 	bhi.w	800265c <HAL_RCC_GetSysClockFreq+0x150>
 8002534:	2900      	cmp	r1, #0
 8002536:	d002      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0x32>
 8002538:	2904      	cmp	r1, #4
 800253a:	d003      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x38>
 800253c:	e08e      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800253e:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <HAL_RCC_GetSysClockFreq+0x164>)
 8002540:	60bb      	str	r3, [r7, #8]
      break;
 8002542:	e08e      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002544:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <HAL_RCC_GetSysClockFreq+0x168>)
 8002546:	60bb      	str	r3, [r7, #8]
      break;
 8002548:	e08b      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800254a:	4948      	ldr	r1, [pc, #288]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 800254c:	6849      	ldr	r1, [r1, #4]
 800254e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002552:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002554:	4945      	ldr	r1, [pc, #276]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 8002556:	6849      	ldr	r1, [r1, #4]
 8002558:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800255c:	2900      	cmp	r1, #0
 800255e:	d024      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002560:	4942      	ldr	r1, [pc, #264]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 8002562:	6849      	ldr	r1, [r1, #4]
 8002564:	0989      	lsrs	r1, r1, #6
 8002566:	4608      	mov	r0, r1
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002570:	f04f 0500 	mov.w	r5, #0
 8002574:	ea00 0204 	and.w	r2, r0, r4
 8002578:	ea01 0305 	and.w	r3, r1, r5
 800257c:	493d      	ldr	r1, [pc, #244]	; (8002674 <HAL_RCC_GetSysClockFreq+0x168>)
 800257e:	fb01 f003 	mul.w	r0, r1, r3
 8002582:	2100      	movs	r1, #0
 8002584:	fb01 f102 	mul.w	r1, r1, r2
 8002588:	1844      	adds	r4, r0, r1
 800258a:	493a      	ldr	r1, [pc, #232]	; (8002674 <HAL_RCC_GetSysClockFreq+0x168>)
 800258c:	fba2 0101 	umull	r0, r1, r2, r1
 8002590:	1863      	adds	r3, r4, r1
 8002592:	4619      	mov	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	461a      	mov	r2, r3
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	f7fd fea8 	bl	80002f0 <__aeabi_uldivmod>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4613      	mov	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e04a      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025aa:	4b30      	ldr	r3, [pc, #192]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	461a      	mov	r2, r3
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	ea02 0400 	and.w	r4, r2, r0
 80025c2:	ea03 0501 	and.w	r5, r3, r1
 80025c6:	4620      	mov	r0, r4
 80025c8:	4629      	mov	r1, r5
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	014b      	lsls	r3, r1, #5
 80025d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025d8:	0142      	lsls	r2, r0, #5
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	1b00      	subs	r0, r0, r4
 80025e0:	eb61 0105 	sbc.w	r1, r1, r5
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	018b      	lsls	r3, r1, #6
 80025ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025f2:	0182      	lsls	r2, r0, #6
 80025f4:	1a12      	subs	r2, r2, r0
 80025f6:	eb63 0301 	sbc.w	r3, r3, r1
 80025fa:	f04f 0000 	mov.w	r0, #0
 80025fe:	f04f 0100 	mov.w	r1, #0
 8002602:	00d9      	lsls	r1, r3, #3
 8002604:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002608:	00d0      	lsls	r0, r2, #3
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	1912      	adds	r2, r2, r4
 8002610:	eb45 0303 	adc.w	r3, r5, r3
 8002614:	f04f 0000 	mov.w	r0, #0
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	0299      	lsls	r1, r3, #10
 800261e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002622:	0290      	lsls	r0, r2, #10
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4610      	mov	r0, r2
 800262a:	4619      	mov	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	461a      	mov	r2, r3
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	f7fd fe5c 	bl	80002f0 <__aeabi_uldivmod>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4613      	mov	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002640:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_RCC_GetSysClockFreq+0x160>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	0c1b      	lsrs	r3, r3, #16
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	3301      	adds	r3, #1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	60bb      	str	r3, [r7, #8]
      break;
 800265a:	e002      	b.n	8002662 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <HAL_RCC_GetSysClockFreq+0x164>)
 800265e:	60bb      	str	r3, [r7, #8]
      break;
 8002660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002662:	68bb      	ldr	r3, [r7, #8]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bdb0      	pop	{r4, r5, r7, pc}
 800266c:	40023800 	.word	0x40023800
 8002670:	00f42400 	.word	0x00f42400
 8002674:	017d7840 	.word	0x017d7840

08002678 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCC_GetHCLKFreq+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000000 	.word	0x20000000

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002694:	f7ff fff0 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 8002698:	4602      	mov	r2, r0
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	0a9b      	lsrs	r3, r3, #10
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	4903      	ldr	r1, [pc, #12]	; (80026b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a6:	5ccb      	ldrb	r3, [r1, r3]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40023800 	.word	0x40023800
 80026b4:	0800baf4 	.word	0x0800baf4

080026b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026bc:	f7ff ffdc 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 80026c0:	4602      	mov	r2, r0
 80026c2:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	0b5b      	lsrs	r3, r3, #13
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	4903      	ldr	r1, [pc, #12]	; (80026dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	0800baf4 	.word	0x0800baf4

080026e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	2b00      	cmp	r3, #0
 8002706:	d012      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002708:	4b69      	ldr	r3, [pc, #420]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4a68      	ldr	r2, [pc, #416]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002712:	6093      	str	r3, [r2, #8]
 8002714:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271c:	4964      	ldr	r1, [pc, #400]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800272a:	2301      	movs	r3, #1
 800272c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d017      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800273a:	4b5d      	ldr	r3, [pc, #372]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800273c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002740:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002748:	4959      	ldr	r1, [pc, #356]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002758:	d101      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800275a:	2301      	movs	r3, #1
 800275c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002766:	2301      	movs	r3, #1
 8002768:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d017      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002776:	4b4e      	ldr	r3, [pc, #312]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800277c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	494a      	ldr	r1, [pc, #296]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002786:	4313      	orrs	r3, r2
 8002788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002794:	d101      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 808b 	beq.w	80028da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c4:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	4a39      	ldr	r2, [pc, #228]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6413      	str	r3, [r2, #64]	; 0x40
 80027d0:	4b37      	ldr	r3, [pc, #220]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027dc:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a34      	ldr	r2, [pc, #208]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fe fb42 	bl	8000e70 <HAL_GetTick>
 80027ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f0:	f7fe fb3e 	bl	8000e70 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	; 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e38f      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002802:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800280e:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d035      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	429a      	cmp	r2, r3
 800282a:	d02e      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800282c:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a1d      	ldr	r2, [pc, #116]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002842:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a1a      	ldr	r2, [pc, #104]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800284e:	4a18      	ldr	r2, [pc, #96]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002854:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d114      	bne.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fb06 	bl	8000e70 <HAL_GetTick>
 8002864:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe fb02 	bl	8000e70 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	; 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e351      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0ee      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002896:	d111      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028a6:	400b      	ands	r3, r1
 80028a8:	4901      	ldr	r1, [pc, #4]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
 80028ae:	e00b      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000
 80028b8:	0ffffcff 	.word	0x0ffffcff
 80028bc:	4bb3      	ldr	r3, [pc, #716]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4ab2      	ldr	r2, [pc, #712]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80028c6:	6093      	str	r3, [r2, #8]
 80028c8:	4bb0      	ldr	r3, [pc, #704]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d4:	49ad      	ldr	r1, [pc, #692]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d010      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028e6:	4ba9      	ldr	r3, [pc, #676]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ec:	4aa7      	ldr	r2, [pc, #668]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028f6:	4ba5      	ldr	r3, [pc, #660]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	49a2      	ldr	r1, [pc, #648]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002914:	4b9d      	ldr	r3, [pc, #628]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002922:	499a      	ldr	r1, [pc, #616]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002936:	4b95      	ldr	r3, [pc, #596]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002944:	4991      	ldr	r1, [pc, #580]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002958:	4b8c      	ldr	r3, [pc, #560]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002966:	4989      	ldr	r1, [pc, #548]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800297a:	4b84      	ldr	r3, [pc, #528]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4980      	ldr	r1, [pc, #512]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800299c:	4b7b      	ldr	r3, [pc, #492]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4978      	ldr	r1, [pc, #480]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029be:	4b73      	ldr	r3, [pc, #460]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	f023 020c 	bic.w	r2, r3, #12
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029cc:	496f      	ldr	r1, [pc, #444]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029e0:	4b6a      	ldr	r3, [pc, #424]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	4967      	ldr	r1, [pc, #412]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a02:	4b62      	ldr	r3, [pc, #392]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	495e      	ldr	r1, [pc, #376]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	4956      	ldr	r1, [pc, #344]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a46:	4b51      	ldr	r3, [pc, #324]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a68:	4b48      	ldr	r3, [pc, #288]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	4945      	ldr	r1, [pc, #276]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a8a:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a98:	493c      	ldr	r1, [pc, #240]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002aac:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002aba:	4934      	ldr	r1, [pc, #208]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d011      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002adc:	492b      	ldr	r1, [pc, #172]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aec:	d101      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002afe:	2301      	movs	r3, #1
 8002b00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b0e:	4b1f      	ldr	r3, [pc, #124]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1c:	491b      	ldr	r1, [pc, #108]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00b      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b30:	4b16      	ldr	r3, [pc, #88]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b40:	4912      	ldr	r1, [pc, #72]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00b      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b64:	4909      	ldr	r1, [pc, #36]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00f      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b78:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b88:	e002      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	4986      	ldr	r1, [pc, #536]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002ba4:	4b81      	ldr	r3, [pc, #516]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002baa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bb4:	497d      	ldr	r1, [pc, #500]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d006      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80d6 	beq.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bd0:	4b76      	ldr	r3, [pc, #472]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a75      	ldr	r2, [pc, #468]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bdc:	f7fe f948 	bl	8000e70 <HAL_GetTick>
 8002be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002be4:	f7fe f944 	bl	8000e70 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b64      	cmp	r3, #100	; 0x64
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e195      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bf6:	4b6d      	ldr	r3, [pc, #436]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d021      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d11d      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c16:	4b65      	ldr	r3, [pc, #404]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c24:	4b61      	ldr	r3, [pc, #388]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2a:	0e1b      	lsrs	r3, r3, #24
 8002c2c:	f003 030f 	and.w	r3, r3, #15
 8002c30:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	019a      	lsls	r2, r3, #6
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	071b      	lsls	r3, r3, #28
 8002c4a:	4958      	ldr	r1, [pc, #352]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d004      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c66:	d00a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d02e      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7c:	d129      	bne.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c8c:	4b47      	ldr	r3, [pc, #284]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c92:	0f1b      	lsrs	r3, r3, #28
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	019a      	lsls	r2, r3, #6
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	041b      	lsls	r3, r3, #16
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	061b      	lsls	r3, r3, #24
 8002cac:	431a      	orrs	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	071b      	lsls	r3, r3, #28
 8002cb2:	493e      	ldr	r1, [pc, #248]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cba:	4b3c      	ldr	r3, [pc, #240]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cc0:	f023 021f 	bic.w	r2, r3, #31
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	4938      	ldr	r1, [pc, #224]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d01d      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002cde:	4b33      	ldr	r3, [pc, #204]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce4:	0e1b      	lsrs	r3, r3, #24
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cec:	4b2f      	ldr	r3, [pc, #188]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf2:	0f1b      	lsrs	r3, r3, #28
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	019a      	lsls	r2, r3, #6
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	041b      	lsls	r3, r3, #16
 8002d06:	431a      	orrs	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	061b      	lsls	r3, r3, #24
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	071b      	lsls	r3, r3, #28
 8002d12:	4926      	ldr	r1, [pc, #152]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d011      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	019a      	lsls	r2, r3, #6
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	071b      	lsls	r3, r3, #28
 8002d42:	491a      	ldr	r1, [pc, #104]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d4a:	4b18      	ldr	r3, [pc, #96]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a17      	ldr	r2, [pc, #92]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d56:	f7fe f88b 	bl	8000e70 <HAL_GetTick>
 8002d5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d5e:	f7fe f887 	bl	8000e70 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b64      	cmp	r3, #100	; 0x64
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e0d8      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d70:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0f0      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	f040 80ce 	bne.w	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a08      	ldr	r2, [pc, #32]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d90:	f7fe f86e 	bl	8000e70 <HAL_GetTick>
 8002d94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d96:	e00b      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d98:	f7fe f86a 	bl	8000e70 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b64      	cmp	r3, #100	; 0x64
 8002da4:	d904      	bls.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0bb      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002db0:	4b5e      	ldr	r3, [pc, #376]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dbc:	d0ec      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d02e      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d12a      	bne.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002de6:	4b51      	ldr	r3, [pc, #324]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	0c1b      	lsrs	r3, r3, #16
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002df4:	4b4d      	ldr	r3, [pc, #308]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	0f1b      	lsrs	r3, r3, #28
 8002dfc:	f003 0307 	and.w	r3, r3, #7
 8002e00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	019a      	lsls	r2, r3, #6
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	041b      	lsls	r3, r3, #16
 8002e0c:	431a      	orrs	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	061b      	lsls	r3, r3, #24
 8002e14:	431a      	orrs	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	071b      	lsls	r3, r3, #28
 8002e1a:	4944      	ldr	r1, [pc, #272]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e22:	4b42      	ldr	r3, [pc, #264]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e30:	3b01      	subs	r3, #1
 8002e32:	021b      	lsls	r3, r3, #8
 8002e34:	493d      	ldr	r1, [pc, #244]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d022      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e50:	d11d      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e52:	4b36      	ldr	r3, [pc, #216]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	0e1b      	lsrs	r3, r3, #24
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e60:	4b32      	ldr	r3, [pc, #200]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e66:	0f1b      	lsrs	r3, r3, #28
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	019a      	lsls	r2, r3, #6
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	061b      	lsls	r3, r3, #24
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	071b      	lsls	r3, r3, #28
 8002e86:	4929      	ldr	r1, [pc, #164]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d028      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e9a:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	0e1b      	lsrs	r3, r3, #24
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	0c1b      	lsrs	r3, r3, #16
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	019a      	lsls	r2, r3, #6
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	041b      	lsls	r3, r3, #16
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	061b      	lsls	r3, r3, #24
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	071b      	lsls	r3, r3, #28
 8002ece:	4917      	ldr	r1, [pc, #92]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002ed6:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	4911      	ldr	r1, [pc, #68]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef8:	f7fd ffba 	bl	8000e70 <HAL_GetTick>
 8002efc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f00:	f7fd ffb6 	bl	8000e70 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e007      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f12:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1e:	d1ef      	bne.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800

08002f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e040      	b.n	8002fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fd fdcc 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2224      	movs	r2, #36	; 0x24
 8002f5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f8c0 	bl	80030f4 <UART_SetConfig>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e022      	b.n	8002fc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fb16 	bl	80035b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fb9d 	bl	80036fc <UART_CheckIdleState>
 8002fc2:	4603      	mov	r3, r0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	; 0x28
 8002fd0:	af02      	add	r7, sp, #8
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	f040 8081 	bne.w	80030e8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d002      	beq.n	8002ff2 <HAL_UART_Transmit+0x26>
 8002fec:	88fb      	ldrh	r3, [r7, #6]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e079      	b.n	80030ea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d101      	bne.n	8003004 <HAL_UART_Transmit+0x38>
 8003000:	2302      	movs	r3, #2
 8003002:	e072      	b.n	80030ea <HAL_UART_Transmit+0x11e>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2221      	movs	r2, #33	; 0x21
 8003018:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800301a:	f7fd ff29 	bl	8000e70 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	88fa      	ldrh	r2, [r7, #6]
 8003024:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	88fa      	ldrh	r2, [r7, #6]
 800302c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003038:	d108      	bne.n	800304c <HAL_UART_Transmit+0x80>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d104      	bne.n	800304c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	e003      	b.n	8003054 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800305c:	e02c      	b.n	80030b8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2200      	movs	r2, #0
 8003066:	2180      	movs	r1, #128	; 0x80
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fb90 	bl	800378e <UART_WaitOnFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e038      	b.n	80030ea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10b      	bne.n	8003096 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	461a      	mov	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800308c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	3302      	adds	r3, #2
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	e007      	b.n	80030a6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	3301      	adds	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1cc      	bne.n	800305e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2200      	movs	r2, #0
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fb5d 	bl	800378e <UART_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e005      	b.n	80030ea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e000      	b.n	80030ea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	4313      	orrs	r3, r2
 8003116:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4ba7      	ldr	r3, [pc, #668]	; (80033bc <UART_SetConfig+0x2c8>)
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	6979      	ldr	r1, [r7, #20]
 8003128:	430b      	orrs	r3, r1
 800312a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a95      	ldr	r2, [pc, #596]	; (80033c0 <UART_SetConfig+0x2cc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d120      	bne.n	80031b2 <UART_SetConfig+0xbe>
 8003170:	4b94      	ldr	r3, [pc, #592]	; (80033c4 <UART_SetConfig+0x2d0>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b03      	cmp	r3, #3
 800317c:	d816      	bhi.n	80031ac <UART_SetConfig+0xb8>
 800317e:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <UART_SetConfig+0x90>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	08003195 	.word	0x08003195
 8003188:	080031a1 	.word	0x080031a1
 800318c:	0800319b 	.word	0x0800319b
 8003190:	080031a7 	.word	0x080031a7
 8003194:	2301      	movs	r3, #1
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e14f      	b.n	800343a <UART_SetConfig+0x346>
 800319a:	2302      	movs	r3, #2
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	e14c      	b.n	800343a <UART_SetConfig+0x346>
 80031a0:	2304      	movs	r3, #4
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e149      	b.n	800343a <UART_SetConfig+0x346>
 80031a6:	2308      	movs	r3, #8
 80031a8:	77fb      	strb	r3, [r7, #31]
 80031aa:	e146      	b.n	800343a <UART_SetConfig+0x346>
 80031ac:	2310      	movs	r3, #16
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e143      	b.n	800343a <UART_SetConfig+0x346>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a84      	ldr	r2, [pc, #528]	; (80033c8 <UART_SetConfig+0x2d4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d132      	bne.n	8003222 <UART_SetConfig+0x12e>
 80031bc:	4b81      	ldr	r3, [pc, #516]	; (80033c4 <UART_SetConfig+0x2d0>)
 80031be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b0c      	cmp	r3, #12
 80031c8:	d828      	bhi.n	800321c <UART_SetConfig+0x128>
 80031ca:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <UART_SetConfig+0xdc>)
 80031cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d0:	08003205 	.word	0x08003205
 80031d4:	0800321d 	.word	0x0800321d
 80031d8:	0800321d 	.word	0x0800321d
 80031dc:	0800321d 	.word	0x0800321d
 80031e0:	08003211 	.word	0x08003211
 80031e4:	0800321d 	.word	0x0800321d
 80031e8:	0800321d 	.word	0x0800321d
 80031ec:	0800321d 	.word	0x0800321d
 80031f0:	0800320b 	.word	0x0800320b
 80031f4:	0800321d 	.word	0x0800321d
 80031f8:	0800321d 	.word	0x0800321d
 80031fc:	0800321d 	.word	0x0800321d
 8003200:	08003217 	.word	0x08003217
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e117      	b.n	800343a <UART_SetConfig+0x346>
 800320a:	2302      	movs	r3, #2
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e114      	b.n	800343a <UART_SetConfig+0x346>
 8003210:	2304      	movs	r3, #4
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e111      	b.n	800343a <UART_SetConfig+0x346>
 8003216:	2308      	movs	r3, #8
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e10e      	b.n	800343a <UART_SetConfig+0x346>
 800321c:	2310      	movs	r3, #16
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e10b      	b.n	800343a <UART_SetConfig+0x346>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a69      	ldr	r2, [pc, #420]	; (80033cc <UART_SetConfig+0x2d8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d120      	bne.n	800326e <UART_SetConfig+0x17a>
 800322c:	4b65      	ldr	r3, [pc, #404]	; (80033c4 <UART_SetConfig+0x2d0>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003236:	2b30      	cmp	r3, #48	; 0x30
 8003238:	d013      	beq.n	8003262 <UART_SetConfig+0x16e>
 800323a:	2b30      	cmp	r3, #48	; 0x30
 800323c:	d814      	bhi.n	8003268 <UART_SetConfig+0x174>
 800323e:	2b20      	cmp	r3, #32
 8003240:	d009      	beq.n	8003256 <UART_SetConfig+0x162>
 8003242:	2b20      	cmp	r3, #32
 8003244:	d810      	bhi.n	8003268 <UART_SetConfig+0x174>
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <UART_SetConfig+0x15c>
 800324a:	2b10      	cmp	r3, #16
 800324c:	d006      	beq.n	800325c <UART_SetConfig+0x168>
 800324e:	e00b      	b.n	8003268 <UART_SetConfig+0x174>
 8003250:	2300      	movs	r3, #0
 8003252:	77fb      	strb	r3, [r7, #31]
 8003254:	e0f1      	b.n	800343a <UART_SetConfig+0x346>
 8003256:	2302      	movs	r3, #2
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e0ee      	b.n	800343a <UART_SetConfig+0x346>
 800325c:	2304      	movs	r3, #4
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e0eb      	b.n	800343a <UART_SetConfig+0x346>
 8003262:	2308      	movs	r3, #8
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e0e8      	b.n	800343a <UART_SetConfig+0x346>
 8003268:	2310      	movs	r3, #16
 800326a:	77fb      	strb	r3, [r7, #31]
 800326c:	e0e5      	b.n	800343a <UART_SetConfig+0x346>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a57      	ldr	r2, [pc, #348]	; (80033d0 <UART_SetConfig+0x2dc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d120      	bne.n	80032ba <UART_SetConfig+0x1c6>
 8003278:	4b52      	ldr	r3, [pc, #328]	; (80033c4 <UART_SetConfig+0x2d0>)
 800327a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003282:	2bc0      	cmp	r3, #192	; 0xc0
 8003284:	d013      	beq.n	80032ae <UART_SetConfig+0x1ba>
 8003286:	2bc0      	cmp	r3, #192	; 0xc0
 8003288:	d814      	bhi.n	80032b4 <UART_SetConfig+0x1c0>
 800328a:	2b80      	cmp	r3, #128	; 0x80
 800328c:	d009      	beq.n	80032a2 <UART_SetConfig+0x1ae>
 800328e:	2b80      	cmp	r3, #128	; 0x80
 8003290:	d810      	bhi.n	80032b4 <UART_SetConfig+0x1c0>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <UART_SetConfig+0x1a8>
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d006      	beq.n	80032a8 <UART_SetConfig+0x1b4>
 800329a:	e00b      	b.n	80032b4 <UART_SetConfig+0x1c0>
 800329c:	2300      	movs	r3, #0
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e0cb      	b.n	800343a <UART_SetConfig+0x346>
 80032a2:	2302      	movs	r3, #2
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e0c8      	b.n	800343a <UART_SetConfig+0x346>
 80032a8:	2304      	movs	r3, #4
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	e0c5      	b.n	800343a <UART_SetConfig+0x346>
 80032ae:	2308      	movs	r3, #8
 80032b0:	77fb      	strb	r3, [r7, #31]
 80032b2:	e0c2      	b.n	800343a <UART_SetConfig+0x346>
 80032b4:	2310      	movs	r3, #16
 80032b6:	77fb      	strb	r3, [r7, #31]
 80032b8:	e0bf      	b.n	800343a <UART_SetConfig+0x346>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a45      	ldr	r2, [pc, #276]	; (80033d4 <UART_SetConfig+0x2e0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d125      	bne.n	8003310 <UART_SetConfig+0x21c>
 80032c4:	4b3f      	ldr	r3, [pc, #252]	; (80033c4 <UART_SetConfig+0x2d0>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d2:	d017      	beq.n	8003304 <UART_SetConfig+0x210>
 80032d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032d8:	d817      	bhi.n	800330a <UART_SetConfig+0x216>
 80032da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032de:	d00b      	beq.n	80032f8 <UART_SetConfig+0x204>
 80032e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e4:	d811      	bhi.n	800330a <UART_SetConfig+0x216>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <UART_SetConfig+0x1fe>
 80032ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ee:	d006      	beq.n	80032fe <UART_SetConfig+0x20a>
 80032f0:	e00b      	b.n	800330a <UART_SetConfig+0x216>
 80032f2:	2300      	movs	r3, #0
 80032f4:	77fb      	strb	r3, [r7, #31]
 80032f6:	e0a0      	b.n	800343a <UART_SetConfig+0x346>
 80032f8:	2302      	movs	r3, #2
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e09d      	b.n	800343a <UART_SetConfig+0x346>
 80032fe:	2304      	movs	r3, #4
 8003300:	77fb      	strb	r3, [r7, #31]
 8003302:	e09a      	b.n	800343a <UART_SetConfig+0x346>
 8003304:	2308      	movs	r3, #8
 8003306:	77fb      	strb	r3, [r7, #31]
 8003308:	e097      	b.n	800343a <UART_SetConfig+0x346>
 800330a:	2310      	movs	r3, #16
 800330c:	77fb      	strb	r3, [r7, #31]
 800330e:	e094      	b.n	800343a <UART_SetConfig+0x346>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a30      	ldr	r2, [pc, #192]	; (80033d8 <UART_SetConfig+0x2e4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d125      	bne.n	8003366 <UART_SetConfig+0x272>
 800331a:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <UART_SetConfig+0x2d0>)
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003320:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003328:	d017      	beq.n	800335a <UART_SetConfig+0x266>
 800332a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800332e:	d817      	bhi.n	8003360 <UART_SetConfig+0x26c>
 8003330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003334:	d00b      	beq.n	800334e <UART_SetConfig+0x25a>
 8003336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333a:	d811      	bhi.n	8003360 <UART_SetConfig+0x26c>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <UART_SetConfig+0x254>
 8003340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003344:	d006      	beq.n	8003354 <UART_SetConfig+0x260>
 8003346:	e00b      	b.n	8003360 <UART_SetConfig+0x26c>
 8003348:	2301      	movs	r3, #1
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e075      	b.n	800343a <UART_SetConfig+0x346>
 800334e:	2302      	movs	r3, #2
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e072      	b.n	800343a <UART_SetConfig+0x346>
 8003354:	2304      	movs	r3, #4
 8003356:	77fb      	strb	r3, [r7, #31]
 8003358:	e06f      	b.n	800343a <UART_SetConfig+0x346>
 800335a:	2308      	movs	r3, #8
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e06c      	b.n	800343a <UART_SetConfig+0x346>
 8003360:	2310      	movs	r3, #16
 8003362:	77fb      	strb	r3, [r7, #31]
 8003364:	e069      	b.n	800343a <UART_SetConfig+0x346>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1c      	ldr	r2, [pc, #112]	; (80033dc <UART_SetConfig+0x2e8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d137      	bne.n	80033e0 <UART_SetConfig+0x2ec>
 8003370:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <UART_SetConfig+0x2d0>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800337a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800337e:	d017      	beq.n	80033b0 <UART_SetConfig+0x2bc>
 8003380:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003384:	d817      	bhi.n	80033b6 <UART_SetConfig+0x2c2>
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338a:	d00b      	beq.n	80033a4 <UART_SetConfig+0x2b0>
 800338c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003390:	d811      	bhi.n	80033b6 <UART_SetConfig+0x2c2>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <UART_SetConfig+0x2aa>
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339a:	d006      	beq.n	80033aa <UART_SetConfig+0x2b6>
 800339c:	e00b      	b.n	80033b6 <UART_SetConfig+0x2c2>
 800339e:	2300      	movs	r3, #0
 80033a0:	77fb      	strb	r3, [r7, #31]
 80033a2:	e04a      	b.n	800343a <UART_SetConfig+0x346>
 80033a4:	2302      	movs	r3, #2
 80033a6:	77fb      	strb	r3, [r7, #31]
 80033a8:	e047      	b.n	800343a <UART_SetConfig+0x346>
 80033aa:	2304      	movs	r3, #4
 80033ac:	77fb      	strb	r3, [r7, #31]
 80033ae:	e044      	b.n	800343a <UART_SetConfig+0x346>
 80033b0:	2308      	movs	r3, #8
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e041      	b.n	800343a <UART_SetConfig+0x346>
 80033b6:	2310      	movs	r3, #16
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e03e      	b.n	800343a <UART_SetConfig+0x346>
 80033bc:	efff69f3 	.word	0xefff69f3
 80033c0:	40011000 	.word	0x40011000
 80033c4:	40023800 	.word	0x40023800
 80033c8:	40004400 	.word	0x40004400
 80033cc:	40004800 	.word	0x40004800
 80033d0:	40004c00 	.word	0x40004c00
 80033d4:	40005000 	.word	0x40005000
 80033d8:	40011400 	.word	0x40011400
 80033dc:	40007800 	.word	0x40007800
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a71      	ldr	r2, [pc, #452]	; (80035ac <UART_SetConfig+0x4b8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d125      	bne.n	8003436 <UART_SetConfig+0x342>
 80033ea:	4b71      	ldr	r3, [pc, #452]	; (80035b0 <UART_SetConfig+0x4bc>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033f4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033f8:	d017      	beq.n	800342a <UART_SetConfig+0x336>
 80033fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033fe:	d817      	bhi.n	8003430 <UART_SetConfig+0x33c>
 8003400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003404:	d00b      	beq.n	800341e <UART_SetConfig+0x32a>
 8003406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800340a:	d811      	bhi.n	8003430 <UART_SetConfig+0x33c>
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <UART_SetConfig+0x324>
 8003410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x330>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x33c>
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e00d      	b.n	800343a <UART_SetConfig+0x346>
 800341e:	2302      	movs	r3, #2
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e00a      	b.n	800343a <UART_SetConfig+0x346>
 8003424:	2304      	movs	r3, #4
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e007      	b.n	800343a <UART_SetConfig+0x346>
 800342a:	2308      	movs	r3, #8
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e004      	b.n	800343a <UART_SetConfig+0x346>
 8003430:	2310      	movs	r3, #16
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e001      	b.n	800343a <UART_SetConfig+0x346>
 8003436:	2310      	movs	r3, #16
 8003438:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003442:	d15b      	bne.n	80034fc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003444:	7ffb      	ldrb	r3, [r7, #31]
 8003446:	2b08      	cmp	r3, #8
 8003448:	d827      	bhi.n	800349a <UART_SetConfig+0x3a6>
 800344a:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <UART_SetConfig+0x35c>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	08003475 	.word	0x08003475
 8003454:	0800347d 	.word	0x0800347d
 8003458:	08003485 	.word	0x08003485
 800345c:	0800349b 	.word	0x0800349b
 8003460:	0800348b 	.word	0x0800348b
 8003464:	0800349b 	.word	0x0800349b
 8003468:	0800349b 	.word	0x0800349b
 800346c:	0800349b 	.word	0x0800349b
 8003470:	08003493 	.word	0x08003493
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003474:	f7ff f90c 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8003478:	61b8      	str	r0, [r7, #24]
        break;
 800347a:	e013      	b.n	80034a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800347c:	f7ff f91c 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8003480:	61b8      	str	r0, [r7, #24]
        break;
 8003482:	e00f      	b.n	80034a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003484:	4b4b      	ldr	r3, [pc, #300]	; (80035b4 <UART_SetConfig+0x4c0>)
 8003486:	61bb      	str	r3, [r7, #24]
        break;
 8003488:	e00c      	b.n	80034a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800348a:	f7ff f83f 	bl	800250c <HAL_RCC_GetSysClockFreq>
 800348e:	61b8      	str	r0, [r7, #24]
        break;
 8003490:	e008      	b.n	80034a4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003496:	61bb      	str	r3, [r7, #24]
        break;
 8003498:	e004      	b.n	80034a4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	77bb      	strb	r3, [r7, #30]
        break;
 80034a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d074      	beq.n	8003594 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	005a      	lsls	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	441a      	add	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80034be:	b29b      	uxth	r3, r3
 80034c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b0f      	cmp	r3, #15
 80034c6:	d916      	bls.n	80034f6 <UART_SetConfig+0x402>
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ce:	d212      	bcs.n	80034f6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	f023 030f 	bic.w	r3, r3, #15
 80034d8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	085b      	lsrs	r3, r3, #1
 80034de:	b29b      	uxth	r3, r3
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	89fb      	ldrh	r3, [r7, #14]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	89fa      	ldrh	r2, [r7, #14]
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	e04e      	b.n	8003594 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	77bb      	strb	r3, [r7, #30]
 80034fa:	e04b      	b.n	8003594 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034fc:	7ffb      	ldrb	r3, [r7, #31]
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d827      	bhi.n	8003552 <UART_SetConfig+0x45e>
 8003502:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <UART_SetConfig+0x414>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	0800352d 	.word	0x0800352d
 800350c:	08003535 	.word	0x08003535
 8003510:	0800353d 	.word	0x0800353d
 8003514:	08003553 	.word	0x08003553
 8003518:	08003543 	.word	0x08003543
 800351c:	08003553 	.word	0x08003553
 8003520:	08003553 	.word	0x08003553
 8003524:	08003553 	.word	0x08003553
 8003528:	0800354b 	.word	0x0800354b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800352c:	f7ff f8b0 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8003530:	61b8      	str	r0, [r7, #24]
        break;
 8003532:	e013      	b.n	800355c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003534:	f7ff f8c0 	bl	80026b8 <HAL_RCC_GetPCLK2Freq>
 8003538:	61b8      	str	r0, [r7, #24]
        break;
 800353a:	e00f      	b.n	800355c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <UART_SetConfig+0x4c0>)
 800353e:	61bb      	str	r3, [r7, #24]
        break;
 8003540:	e00c      	b.n	800355c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003542:	f7fe ffe3 	bl	800250c <HAL_RCC_GetSysClockFreq>
 8003546:	61b8      	str	r0, [r7, #24]
        break;
 8003548:	e008      	b.n	800355c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800354e:	61bb      	str	r3, [r7, #24]
        break;
 8003550:	e004      	b.n	800355c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	77bb      	strb	r3, [r7, #30]
        break;
 800355a:	bf00      	nop
    }

    if (pclk != 0U)
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d018      	beq.n	8003594 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	085a      	lsrs	r2, r3, #1
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	441a      	add	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	b29b      	uxth	r3, r3
 8003576:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	2b0f      	cmp	r3, #15
 800357c:	d908      	bls.n	8003590 <UART_SetConfig+0x49c>
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003584:	d204      	bcs.n	8003590 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	e001      	b.n	8003594 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40007c00 	.word	0x40007c00
 80035b0:	40023800 	.word	0x40023800
 80035b4:	00f42400 	.word	0x00f42400

080035b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364c:	f003 0310 	and.w	r3, r3, #16
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01a      	beq.n	80036ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036b6:	d10a      	bne.n	80036ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af02      	add	r7, sp, #8
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800370c:	f7fd fbb0 	bl	8000e70 <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b08      	cmp	r3, #8
 800371e:	d10e      	bne.n	800373e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f82d 	bl	800378e <UART_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e023      	b.n	8003786 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b04      	cmp	r3, #4
 800374a:	d10e      	bne.n	800376a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800374c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f817 	bl	800378e <UART_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e00d      	b.n	8003786 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379e:	e05e      	b.n	800385e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a6:	d05a      	beq.n	800385e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a8:	f7fd fb62 	bl	8000e70 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d302      	bcc.n	80037be <UART_WaitOnFlagUntilTimeout+0x30>
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11b      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0201 	bic.w	r2, r2, #1
 80037dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e043      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d02c      	beq.n	800385e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800380e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003812:	d124      	bne.n	800385e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800381c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800382c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689a      	ldr	r2, [r3, #8]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e00f      	b.n	800387e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69da      	ldr	r2, [r3, #28]
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	79fb      	ldrb	r3, [r7, #7]
 8003878:	429a      	cmp	r2, r3
 800387a:	d091      	beq.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8003892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d105      	bne.n	80038a6 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800389a:	2101      	movs	r1, #1
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f001 f823 	bl	80048e8 <VL53L1_data_init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 80038a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038b6:	2300      	movs	r3, #0
 80038b8:	73bb      	strb	r3, [r7, #14]
 80038ba:	e012      	b.n	80038e2 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 80038bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d112      	bne.n	80038ea <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80038c4:	7bbb      	ldrb	r3, [r7, #14]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2201      	movs	r2, #1
 80038ca:	4619      	mov	r1, r3
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fbd2 	bl	8004076 <VL53L1_SetLimitCheckEnable>
 80038d2:	4603      	mov	r3, r0
 80038d4:	461a      	mov	r2, r3
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	4313      	orrs	r3, r2
 80038da:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038dc:	7bbb      	ldrb	r3, [r7, #14]
 80038de:	3301      	adds	r3, #1
 80038e0:	73bb      	strb	r3, [r7, #14]
 80038e2:	7bbb      	ldrb	r3, [r7, #14]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d9e9      	bls.n	80038bc <VL53L1_DataInit+0x36>
 80038e8:	e000      	b.n	80038ec <VL53L1_DataInit+0x66>
		else
			break;
 80038ea:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 80038ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003900:	2300      	movs	r3, #0
 8003902:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2203      	movs	r2, #3
 8003908:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800390c:	2320      	movs	r3, #32
 800390e:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7bba      	ldrb	r2, [r7, #14]
 8003914:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8003916:	2108      	movs	r1, #8
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8f8 	bl	8003b0e <VL53L1_SetPresetMode>
 800391e:	4603      	mov	r3, r0
 8003920:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2208      	movs	r2, #8
 8003926:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800393e:	2300      	movs	r3, #0
 8003940:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8003942:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f004 ffdf 	bl	800890a <VL53L1_poll_for_boot_completion>
 800394c:	4603      	mov	r3, r0
 800394e:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8003950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	603a      	str	r2, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
 8003968:	460b      	mov	r3, r1
 800396a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800396c:	2300      	movs	r3, #0
 800396e:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8003970:	4a2c      	ldr	r2, [pc, #176]	; (8003a24 <ComputeDevicePresetMode+0xc8>)
 8003972:	f107 0310 	add.w	r3, r7, #16
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	4611      	mov	r1, r2
 800397a:	8019      	strh	r1, [r3, #0]
 800397c:	3302      	adds	r3, #2
 800397e:	0c12      	lsrs	r2, r2, #16
 8003980:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8003982:	4a29      	ldr	r2, [pc, #164]	; (8003a28 <ComputeDevicePresetMode+0xcc>)
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	4611      	mov	r1, r2
 800398c:	8019      	strh	r1, [r3, #0]
 800398e:	3302      	adds	r3, #2
 8003990:	0c12      	lsrs	r2, r2, #16
 8003992:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8003994:	4a25      	ldr	r2, [pc, #148]	; (8003a2c <ComputeDevicePresetMode+0xd0>)
 8003996:	f107 0308 	add.w	r3, r7, #8
 800399a:	6812      	ldr	r2, [r2, #0]
 800399c:	4611      	mov	r1, r2
 800399e:	8019      	strh	r1, [r3, #0]
 80039a0:	3302      	adds	r3, #2
 80039a2:	0c12      	lsrs	r2, r2, #16
 80039a4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80039ac:	79bb      	ldrb	r3, [r7, #6]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d002      	beq.n	80039b8 <ComputeDevicePresetMode+0x5c>
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d003      	beq.n	80039be <ComputeDevicePresetMode+0x62>
 80039b6:	e005      	b.n	80039c4 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75bb      	strb	r3, [r7, #22]
		break;
 80039bc:	e004      	b.n	80039c8 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80039be:	2301      	movs	r3, #1
 80039c0:	75bb      	strb	r3, [r7, #22]
		break;
 80039c2:	e001      	b.n	80039c8 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 80039c4:	2302      	movs	r3, #2
 80039c6:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d017      	beq.n	80039fe <ComputeDevicePresetMode+0xa2>
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	dc1e      	bgt.n	8003a10 <ComputeDevicePresetMode+0xb4>
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d00a      	beq.n	80039ec <ComputeDevicePresetMode+0x90>
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d11a      	bne.n	8003a10 <ComputeDevicePresetMode+0xb4>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 80039da:	7dbb      	ldrb	r3, [r7, #22]
 80039dc:	f107 0218 	add.w	r2, r7, #24
 80039e0:	4413      	add	r3, r2
 80039e2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	701a      	strb	r2, [r3, #0]
		break;
 80039ea:	e013      	b.n	8003a14 <ComputeDevicePresetMode+0xb8>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 80039ec:	7dbb      	ldrb	r3, [r7, #22]
 80039ee:	f107 0218 	add.w	r2, r7, #24
 80039f2:	4413      	add	r3, r2
 80039f4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	701a      	strb	r2, [r3, #0]
		break;
 80039fc:	e00a      	b.n	8003a14 <ComputeDevicePresetMode+0xb8>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 80039fe:	7dbb      	ldrb	r3, [r7, #22]
 8003a00:	f107 0218 	add.w	r2, r7, #24
 8003a04:	4413      	add	r3, r2
 8003a06:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	701a      	strb	r2, [r3, #0]
		break;
 8003a0e:	e001      	b.n	8003a14 <ComputeDevicePresetMode+0xb8>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003a10:	23f8      	movs	r3, #248	; 0xf8
 8003a12:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8003a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	0800bad4 	.word	0x0800bad4
 8003a28:	0800bad8 	.word	0x0800bad8
 8003a2c:	0800badc 	.word	0x0800badc

08003a30 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8003a30:	b5b0      	push	{r4, r5, r7, lr}
 8003a32:	b08e      	sub	sp, #56	; 0x38
 8003a34:	af04      	add	r7, sp, #16
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	72fb      	strb	r3, [r7, #11]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003a58:	7afb      	ldrb	r3, [r7, #11]
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d002      	beq.n	8003a64 <SetPresetMode+0x34>
 8003a5e:	7afb      	ldrb	r3, [r7, #11]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d103      	bne.n	8003a6c <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8003a64:	2340      	movs	r3, #64	; 0x40
 8003a66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a6a:	e002      	b.n	8003a72 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003a6c:	2320      	movs	r3, #32
 8003a6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8003a72:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8003a76:	7ab9      	ldrb	r1, [r7, #10]
 8003a78:	7afb      	ldrb	r3, [r7, #11]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff ff6e 	bl	800395c <ComputeDevicePresetMode>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8003a86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d112      	bne.n	8003ab4 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8003a8e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003a92:	f107 001c 	add.w	r0, r7, #28
 8003a96:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8003a9a:	f107 0314 	add.w	r3, r7, #20
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	f107 0318 	add.w	r3, r7, #24
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f001 f9dd 	bl	8004e68 <VL53L1_get_preset_mode_timing_cfg>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8003ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d112      	bne.n	8003ae2 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8003abc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8003ac0:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003ac2:	69fd      	ldr	r5, [r7, #28]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	9102      	str	r1, [sp, #8]
 8003acc:	9201      	str	r2, [sp, #4]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	462b      	mov	r3, r5
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	4601      	mov	r1, r0
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f001 fa70 	bl	8004fbc <VL53L1_set_preset_mode>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003ae2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003af0:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8003af2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d103      	bne.n	8003b02 <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	7afa      	ldrb	r2, [r7, #11]
 8003afe:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8003b02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3728      	adds	r7, #40	; 0x28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bdb0      	pop	{r4, r5, r7, pc}

08003b0e <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	460b      	mov	r3, r1
 8003b18:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f003 fd2c 	bl	8007580 <VL53L1_low_power_auto_data_init>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8003b2c:	7bba      	ldrb	r2, [r7, #14]
 8003b2e:	78f9      	ldrb	r1, [r7, #3]
 8003b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff7b 	bl	8003a30 <SetPresetMode>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8003b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d117      	bne.n	8003b76 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d005      	beq.n	8003b58 <VL53L1_SetPresetMode+0x4a>
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d002      	beq.n	8003b58 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d107      	bne.n	8003b68 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003b58:	f24a 0128 	movw	r1, #41000	; 0xa028
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f891 	bl	8003c84 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8003b62:	4603      	mov	r3, r0
 8003b64:	73fb      	strb	r3, [r7, #15]
 8003b66:	e006      	b.n	8003b76 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003b68:	f248 2135 	movw	r1, #33333	; 0x8235
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f889 	bl	8003c84 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8003b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fa0a 	bl	8003f9c <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003bba:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d008      	beq.n	8003bd4 <VL53L1_SetDistanceMode+0x3c>
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d005      	beq.n	8003bd4 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d002      	beq.n	8003bd4 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8003bce:	f06f 0303 	mvn.w	r3, #3
 8003bd2:	e052      	b.n	8003c7a <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 8003bd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d107      	bne.n	8003bec <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f001 f8e9 	bl	8004dba <VL53L1_get_user_zone>
 8003be8:	4603      	mov	r3, r0
 8003bea:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003bf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10a      	bne.n	8003c10 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8003bfa:	f107 0314 	add.w	r3, r7, #20
 8003bfe:	f107 0210 	add.w	r2, r7, #16
 8003c02:	f107 010c 	add.w	r1, r7, #12
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f001 f812 	bl	8004c30 <VL53L1_get_timeouts_us>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8003c10:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d107      	bne.n	8003c28 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	7fb9      	ldrb	r1, [r7, #30]
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff ff06 	bl	8003a30 <SetPresetMode>
 8003c24:	4603      	mov	r3, r0
 8003c26:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8003c28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d103      	bne.n	8003c38 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003c38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10e      	bne.n	8003c5e <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8003c40:	68f9      	ldr	r1, [r7, #12]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 ffba 	bl	8004bc0 <VL53L1_set_timeouts_us>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8003c50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8003c5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8003c66:	f107 0308 	add.w	r3, r7, #8
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f001 f881 	bl	8004d74 <VL53L1_set_user_zone>
 8003c72:	4603      	mov	r3, r0
 8003c74:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8003c76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
	...

08003c84 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08c      	sub	sp, #48	; 0x30
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003ca8:	4b64      	ldr	r3, [pc, #400]	; (8003e3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 8003caa:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4a64      	ldr	r2, [pc, #400]	; (8003e40 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d902      	bls.n	8003cba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003cb4:	23fc      	movs	r3, #252	; 0xfc
 8003cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8003cba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d109      	bne.n	8003cd6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003cc2:	f107 031a 	add.w	r3, r7, #26
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2105      	movs	r1, #5
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa8d 	bl	80041ea <VL53L1_GetSequenceStepEnable>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003cd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003cde:	f107 0319 	add.w	r3, r7, #25
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2106      	movs	r1, #6
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa7f 	bl	80041ea <VL53L1_GetSequenceStepEnable>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8003cf2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	f107 0210 	add.w	r2, r7, #16
 8003d02:	f107 010c 	add.w	r1, r7, #12
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 ff92 	bl	8004c30 <VL53L1_get_timeouts_us>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8003d12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f040 8081 	bne.w	8003e1e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003d22:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8003d2c:	7efb      	ldrb	r3, [r7, #27]
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d026      	beq.n	8003d80 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	dc43      	bgt.n	8003dbe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d00f      	beq.n	8003d5a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	d13f      	bne.n	8003dbe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003d3e:	7ebb      	ldrb	r3, [r7, #26]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d002      	beq.n	8003d4a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8003d44:	7e7b      	ldrb	r3, [r7, #25]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d103      	bne.n	8003d52 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8003d4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8003d50:	e038      	b.n	8003dc4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 8003d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d56:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003d58:	e034      	b.n	8003dc4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003d60:	7ebb      	ldrb	r3, [r7, #26]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d002      	beq.n	8003d6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8003d66:	7e7b      	ldrb	r3, [r7, #25]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d103      	bne.n	8003d74 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8003d6c:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8003d70:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d72:	e002      	b.n	8003d7a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8003d74:	f245 4360 	movw	r3, #21600	; 0x5460
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003d7e:	e021      	b.n	8003dc4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003d86:	23f5      	movs	r3, #245	; 0xf5
 8003d88:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8003d8a:	f107 0308 	add.w	r3, r7, #8
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f248 0136 	movw	r1, #32822	; 0x8036
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f001 ff75 	bl	8005c84 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	dd07      	ble.n	8003db0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	22f5      	movs	r2, #245	; 0xf5
 8003da4:	fb02 f303 	mul.w	r3, r2, r3
 8003da8:	461a      	mov	r2, r3
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	4413      	add	r3, r2
 8003dae:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8003db8:	2302      	movs	r3, #2
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003dbc:	e002      	b.n	8003dc4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003dbe:	23f8      	movs	r3, #248	; 0xf8
 8003dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d803      	bhi.n	8003dd4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8003dcc:	23fc      	movs	r3, #252	; 0xfc
 8003dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003dd2:	e003      	b.n	8003ddc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8003dda:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8003ddc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11c      	bne.n	8003e1e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d203      	bcs.n	8003df4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8003dec:	23fc      	movs	r3, #252	; 0xfc
 8003dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003df2:	e00d      	b.n	8003e10 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8003dfe:	68f9      	ldr	r1, [r7, #12]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 fedb 	bl	8004bc0 <VL53L1_set_timeouts_us>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8003e10:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d102      	bne.n	8003e1e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8003e1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3730      	adds	r7, #48	; 0x30
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	00086470 	.word	0x00086470
 8003e40:	00989680 	.word	0x00989680

08003e44 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b08c      	sub	sp, #48	; 0x30
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8003e72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003e7a:	f107 031b 	add.w	r3, r7, #27
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2105      	movs	r1, #5
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f9b1 	bl	80041ea <VL53L1_GetSequenceStepEnable>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8003e8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003e96:	f107 031a 	add.w	r3, r7, #26
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2106      	movs	r1, #6
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9a3 	bl	80041ea <VL53L1_GetSequenceStepEnable>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8003eaa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10b      	bne.n	8003eca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8003eb2:	f107 0310 	add.w	r3, r7, #16
 8003eb6:	f107 0214 	add.w	r2, r7, #20
 8003eba:	f107 010c 	add.w	r1, r7, #12
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 feb6 	bl	8004c30 <VL53L1_get_timeouts_us>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8003eca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d156      	bne.n	8003f80 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8003edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d02a      	beq.n	8003f3a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	dc47      	bgt.n	8003f78 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d012      	beq.n	8003f12 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d143      	bne.n	8003f78 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003ef0:	7efb      	ldrb	r3, [r7, #27]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d002      	beq.n	8003efc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 8003ef6:	7ebb      	ldrb	r3, [r7, #26]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	f241 3388 	movw	r3, #5000	; 0x1388
 8003f02:	4413      	add	r3, r2
 8003f04:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8003f06:	e03c      	b.n	8003f82 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003f0e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f10:	e037      	b.n	8003f82 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003f12:	7efb      	ldrb	r3, [r7, #27]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d002      	beq.n	8003f1e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8003f18:	7ebb      	ldrb	r3, [r7, #26]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d106      	bne.n	8003f2c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	f243 33f4 	movw	r3, #13300	; 0x33f4
 8003f24:	4413      	add	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8003f2a:	e02a      	b.n	8003f82 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	f642 2330 	movw	r3, #10800	; 0x2a30
 8003f32:	4413      	add	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f38:	e023      	b.n	8003f82 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003f3a:	23f5      	movs	r3, #245	; 0xf5
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8003f3e:	f107 0308 	add.w	r3, r7, #8
 8003f42:	461a      	mov	r2, r3
 8003f44:	f248 0136 	movw	r1, #32822	; 0x8036
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f001 fe9b 	bl	8005c84 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	dd07      	ble.n	8003f64 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	22f5      	movs	r2, #245	; 0xf5
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	4413      	add	r3, r2
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8003f6a:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	4413      	add	r3, r2
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f76:	e004      	b.n	8003f82 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003f78:	23f8      	movs	r3, #248	; 0xf8
 8003f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003f7e:	e000      	b.n	8003f82 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 8003f80:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8003f82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8e:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003f90:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3730      	adds	r7, #48	; 0x30
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	4a09      	ldr	r2, [pc, #36]	; (8003fd8 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	099b      	lsrs	r3, r3, #6
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fdad 	bl	8004b22 <VL53L1_set_inter_measurement_period_ms>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8003fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	10624dd3 	.word	0x10624dd3

08003fdc <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8003fea:	f107 0308 	add.w	r3, r7, #8
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fdbf 	bl	8004b74 <VL53L1_get_inter_measurement_period_ms>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	019b      	lsls	r3, r3, #6
 8004000:	4907      	ldr	r1, [pc, #28]	; (8004020 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8004002:	fba1 1303 	umull	r1, r3, r1, r3
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8004012:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	10624dd3 	.word	0x10624dd3

08004024 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	460b      	mov	r3, r1
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004032:	2300      	movs	r3, #0
 8004034:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004036:	897b      	ldrh	r3, [r7, #10]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <SetLimitValue+0x1e>
 800403c:	2b01      	cmp	r3, #1
 800403e:	d009      	beq.n	8004054 <SetLimitValue+0x30>
 8004040:	e011      	b.n	8004066 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0b9b      	lsrs	r3, r3, #14
 8004046:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004048:	8abb      	ldrh	r3, [r7, #20]
 800404a:	4619      	mov	r1, r3
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f001 f941 	bl	80052d4 <VL53L1_set_lite_sigma_threshold>
		break;
 8004052:	e00a      	b.n	800406a <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	0a5b      	lsrs	r3, r3, #9
 8004058:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 800405a:	8abb      	ldrh	r3, [r7, #20]
 800405c:	4619      	mov	r1, r3
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f001 f964 	bl	800532c <VL53L1_set_lite_min_count_rate>
		break;
 8004064:	e001      	b.n	800406a <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004066:	23fc      	movs	r3, #252	; 0xfc
 8004068:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800406a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	460b      	mov	r3, r1
 8004080:	807b      	strh	r3, [r7, #2]
 8004082:	4613      	mov	r3, r2
 8004084:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004086:	2300      	movs	r3, #0
 8004088:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800408e:	887b      	ldrh	r3, [r7, #2]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d902      	bls.n	800409a <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004094:	23fc      	movs	r3, #252	; 0xfc
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	e014      	b.n	80040c4 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 800409a:	787b      	ldrb	r3, [r7, #1]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	e006      	b.n	80040b4 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80040a6:	887b      	ldrh	r3, [r7, #2]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	33e0      	adds	r3, #224	; 0xe0
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80040b4:	887b      	ldrh	r3, [r7, #2]
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff ffb2 	bl	8004024 <SetLimitValue>
 80040c0:	4603      	mov	r3, r0
 80040c2:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80040c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10c      	bne.n	80040e6 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80040cc:	787b      	ldrb	r3, [r7, #1]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	bf14      	ite	ne
 80040d2:	2301      	movne	r3, #1
 80040d4:	2300      	moveq	r3, #0
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	887b      	ldrh	r3, [r7, #2]
 80040da:	4611      	mov	r1, r2
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	460a      	mov	r2, r1
 80040e2:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80040e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b087      	sub	sp, #28
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	460b      	mov	r3, r1
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004104:	897b      	ldrh	r3, [r7, #10]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d905      	bls.n	8004116 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800410a:	23fc      	movs	r3, #252	; 0xfc
 800410c:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e008      	b.n	8004128 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8004120:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	7dba      	ldrb	r2, [r7, #22]
 8004126:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004128:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800412c:	4618      	mov	r0, r3
 800412e:	371c      	adds	r7, #28
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	460b      	mov	r3, r1
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004146:	2300      	movs	r3, #0
 8004148:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800414e:	897b      	ldrh	r3, [r7, #10]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <VL53L1_GetLimitCheckValue+0x22>
 8004154:	2b01      	cmp	r3, #1
 8004156:	d00c      	beq.n	8004172 <VL53L1_GetLimitCheckValue+0x3a>
 8004158:	e017      	b.n	800418a <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 800415a:	f107 0314 	add.w	r3, r7, #20
 800415e:	4619      	mov	r1, r3
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f001 f8a1 	bl	80052a8 <VL53L1_get_lite_sigma_threshold>
 8004166:	4603      	mov	r3, r0
 8004168:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 800416a:	8abb      	ldrh	r3, [r7, #20]
 800416c:	039b      	lsls	r3, r3, #14
 800416e:	61bb      	str	r3, [r7, #24]
		break;
 8004170:	e00d      	b.n	800418e <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8004172:	f107 0316 	add.w	r3, r7, #22
 8004176:	4619      	mov	r1, r3
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f001 f8c1 	bl	8005300 <VL53L1_get_lite_min_count_rate>
 800417e:	4603      	mov	r3, r0
 8004180:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8004182:	8afb      	ldrh	r3, [r7, #22]
 8004184:	025b      	lsls	r3, r3, #9
 8004186:	61bb      	str	r3, [r7, #24]
		break;
 8004188:	e001      	b.n	800418e <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800418a:	23fc      	movs	r3, #252	; 0xfc
 800418c:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 800418e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d123      	bne.n	80041de <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d110      	bne.n	80041be <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 800419c:	897b      	ldrh	r3, [r7, #10]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	33e0      	adds	r3, #224	; 0xe0
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041b0:	897b      	ldrh	r3, [r7, #10]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 80041bc:	e00f      	b.n	80041de <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041c4:	897b      	ldrh	r3, [r7, #10]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	33e0      	adds	r3, #224	; 0xe0
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041d2:	897b      	ldrh	r3, [r7, #10]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80041de:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3720      	adds	r7, #32
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	460b      	mov	r3, r1
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 80041fc:	7afb      	ldrb	r3, [r7, #11]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	4619      	mov	r1, r3
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fd7f 	bl	8004d06 <VL53L1_get_sequence_config_bit>
 8004208:	4603      	mov	r3, r0
 800420a:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 800420c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004220:	2300      	movs	r3, #0
 8004222:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	789b      	ldrb	r3, [r3, #2]
 8004228:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 800422a:	7dbb      	ldrb	r3, [r7, #22]
 800422c:	2b40      	cmp	r3, #64	; 0x40
 800422e:	d002      	beq.n	8004236 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 fa6b 	bl	800470c <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 800423c:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800423e:	7d7b      	ldrb	r3, [r7, #21]
 8004240:	2b63      	cmp	r3, #99	; 0x63
 8004242:	dc12      	bgt.n	800426a <VL53L1_StartMeasurement+0x52>
 8004244:	2b62      	cmp	r3, #98	; 0x62
 8004246:	da0d      	bge.n	8004264 <VL53L1_StartMeasurement+0x4c>
 8004248:	2b05      	cmp	r3, #5
 800424a:	dc0e      	bgt.n	800426a <VL53L1_StartMeasurement+0x52>
 800424c:	2b04      	cmp	r3, #4
 800424e:	da09      	bge.n	8004264 <VL53L1_StartMeasurement+0x4c>
 8004250:	2b02      	cmp	r3, #2
 8004252:	dc02      	bgt.n	800425a <VL53L1_StartMeasurement+0x42>
 8004254:	2b00      	cmp	r3, #0
 8004256:	da05      	bge.n	8004264 <VL53L1_StartMeasurement+0x4c>
 8004258:	e007      	b.n	800426a <VL53L1_StartMeasurement+0x52>
 800425a:	2b03      	cmp	r3, #3
 800425c:	d105      	bne.n	800426a <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800425e:	2300      	movs	r3, #0
 8004260:	75fb      	strb	r3, [r7, #23]
		break;
 8004262:	e004      	b.n	800426e <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8004264:	23f2      	movs	r3, #242	; 0xf2
 8004266:	75fb      	strb	r3, [r7, #23]
		break;
 8004268:	e001      	b.n	800426e <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 800426a:	23fd      	movs	r3, #253	; 0xfd
 800426c:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800426e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11f      	bne.n	80042b6 <VL53L1_StartMeasurement+0x9e>
 8004276:	7dbb      	ldrb	r3, [r7, #22]
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d11c      	bne.n	80042b6 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fdde 	bl	8003e44 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8004288:	4603      	mov	r3, r0
 800428a:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4a17      	ldr	r2, [pc, #92]	; (80042ec <VL53L1_StartMeasurement+0xd4>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	099b      	lsrs	r3, r3, #6
 8004296:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004298:	f107 030c 	add.w	r3, r7, #12
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fe9c 	bl	8003fdc <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80042a4:	4603      	mov	r3, r0
 80042a6:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1d1a      	adds	r2, r3, #4
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d901      	bls.n	80042b6 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80042b2:	23fc      	movs	r3, #252	; 0xfc
 80042b4:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 80042b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d107      	bne.n	80042ce <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 80042be:	7dbb      	ldrb	r3, [r7, #22]
 80042c0:	2206      	movs	r2, #6
 80042c2:	4619      	mov	r1, r3
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f001 f867 	bl	8005398 <VL53L1_init_and_start_range>
 80042ca:	4603      	mov	r3, r0
 80042cc:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 80042ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2204      	movs	r2, #4
 80042da:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 80042de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	10624dd3 	.word	0x10624dd3

080042f0 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	789b      	ldrb	r3, [r3, #2]
 8004300:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8004302:	7bbb      	ldrb	r3, [r7, #14]
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f001 fb87 	bl	8005a1a <VL53L1_clear_interrupt_and_enable_next_range>
 800430c:	4603      	mov	r3, r0
 800430e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8004310:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004324:	2300      	movs	r3, #0
 8004326:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 8004328:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f004 fb18 	bl	8008962 <VL53L1_poll_for_range_completion>
 8004332:	4603      	mov	r3, r0
 8004334:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8004336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8004344:	b480      	push	{r7}
 8004346:	b08d      	sub	sp, #52	; 0x34
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	603a      	str	r2, [r7, #0]
 800434e:	71fb      	strb	r3, [r7, #7]
 8004350:	460b      	mov	r3, r1
 8004352:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8004354:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004358:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 800435a:	231e      	movs	r3, #30
 800435c:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800435e:	4b33      	ldr	r3, [pc, #204]	; (800442c <ComputeRQL+0xe8>)
 8004360:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8004362:	4b33      	ldr	r3, [pc, #204]	; (8004430 <ComputeRQL+0xec>)
 8004364:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 8004366:	f641 139a 	movw	r3, #6554	; 0x199a
 800436a:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 800436c:	79fb      	ldrb	r3, [r7, #7]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <ComputeRQL+0x36>
		returnvalue = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004378:	e04f      	b.n	800441a <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 800437a:	79bb      	ldrb	r3, [r7, #6]
 800437c:	2b07      	cmp	r3, #7
 800437e:	d103      	bne.n	8004388 <ComputeRQL+0x44>
		returnvalue = 50;
 8004380:	2332      	movs	r3, #50	; 0x32
 8004382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004386:	e048      	b.n	800441a <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800438e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8004392:	429a      	cmp	r2, r3
 8004394:	dd03      	ble.n	800439e <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8004396:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439c:	e007      	b.n	80043ae <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80043a4:	461a      	mov	r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
 80043ac:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80043ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80043b8:	461a      	mov	r2, r3
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80043c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d4:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d804      	bhi.n	80043ee <ComputeRQL+0xaa>
				SRQL = GI - partial;
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ec:	e006      	b.n	80043fc <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 80043ee:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f4:	e002      	b.n	80043fc <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 80043f6:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	0c1b      	lsrs	r3, r3, #16
 8004400:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b32      	cmp	r3, #50	; 0x32
 8004406:	d905      	bls.n	8004414 <ComputeRQL+0xd0>
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	bf28      	it	cs
 800440e:	2364      	movcs	r3, #100	; 0x64
 8004410:	b2db      	uxtb	r3, r3
 8004412:	e000      	b.n	8004416 <ComputeRQL+0xd2>
 8004414:	2332      	movs	r3, #50	; 0x32
 8004416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800441a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800441e:	4618      	mov	r0, r3
 8004420:	3734      	adds	r7, #52	; 0x34
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	0075b333 	.word	0x0075b333
 8004430:	0030cccd 	.word	0x0030cccd

08004434 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	3b04      	subs	r3, #4
 8004442:	2b0f      	cmp	r3, #15
 8004444:	d83d      	bhi.n	80044c2 <ConvertStatusLite+0x8e>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <ConvertStatusLite+0x18>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	0800449f 	.word	0x0800449f
 8004450:	08004499 	.word	0x08004499
 8004454:	080044a5 	.word	0x080044a5
 8004458:	080044ab 	.word	0x080044ab
 800445c:	080044b7 	.word	0x080044b7
 8004460:	080044bd 	.word	0x080044bd
 8004464:	080044c3 	.word	0x080044c3
 8004468:	080044c3 	.word	0x080044c3
 800446c:	080044b1 	.word	0x080044b1
 8004470:	080044c3 	.word	0x080044c3
 8004474:	080044c3 	.word	0x080044c3
 8004478:	080044c3 	.word	0x080044c3
 800447c:	080044c3 	.word	0x080044c3
 8004480:	080044c3 	.word	0x080044c3
 8004484:	0800448d 	.word	0x0800448d
 8004488:	08004493 	.word	0x08004493
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 800448c:	230a      	movs	r3, #10
 800448e:	73fb      	strb	r3, [r7, #15]
		break;
 8004490:	e019      	b.n	80044c6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8004492:	2306      	movs	r3, #6
 8004494:	73fb      	strb	r3, [r7, #15]
		break;
 8004496:	e016      	b.n	80044c6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8004498:	2304      	movs	r3, #4
 800449a:	73fb      	strb	r3, [r7, #15]
		break;
 800449c:	e013      	b.n	80044c6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800449e:	2302      	movs	r3, #2
 80044a0:	73fb      	strb	r3, [r7, #15]
		break;
 80044a2:	e010      	b.n	80044c6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80044a4:	2301      	movs	r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
		break;
 80044a8:	e00d      	b.n	80044c6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80044aa:	2307      	movs	r3, #7
 80044ac:	73fb      	strb	r3, [r7, #15]
		break;
 80044ae:	e00a      	b.n	80044c6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80044b0:	2309      	movs	r3, #9
 80044b2:	73fb      	strb	r3, [r7, #15]
		break;
 80044b4:	e007      	b.n	80044c6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80044b6:	2303      	movs	r3, #3
 80044b8:	73fb      	strb	r3, [r7, #15]
		break;
 80044ba:	e004      	b.n	80044c6 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80044bc:	2300      	movs	r3, #0
 80044be:	73fb      	strb	r3, [r7, #15]
		break;
 80044c0:	e001      	b.n	80044c6 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80044c2:	23ff      	movs	r3, #255	; 0xff
 80044c4:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	; 0x30
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	607b      	str	r3, [r7, #4]
 80044de:	460b      	mov	r3, r1
 80044e0:	72fb      	strb	r3, [r7, #11]
 80044e2:	4613      	mov	r3, r2
 80044e4:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8004502:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8004506:	7afb      	ldrb	r3, [r7, #11]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff ff1a 	bl	8004344 <ComputeRQL>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800451c:	025b      	lsls	r3, r3, #9
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004524:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800452a:	025b      	lsls	r3, r3, #9
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004532:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004540:	025b      	lsls	r3, r3, #9
 8004542:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	6a3a      	ldr	r2, [r7, #32]
 8004548:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8004550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004552:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8004554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004556:	2200      	movs	r2, #0
 8004558:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 800455a:	7abb      	ldrb	r3, [r7, #10]
 800455c:	2b11      	cmp	r3, #17
 800455e:	d009      	beq.n	8004574 <SetSimpleData+0xa0>
 8004560:	2b11      	cmp	r3, #17
 8004562:	dc0f      	bgt.n	8004584 <SetSimpleData+0xb0>
 8004564:	2b03      	cmp	r3, #3
 8004566:	dc02      	bgt.n	800456e <SetSimpleData+0x9a>
 8004568:	2b00      	cmp	r3, #0
 800456a:	dc03      	bgt.n	8004574 <SetSimpleData+0xa0>
 800456c:	e00a      	b.n	8004584 <SetSimpleData+0xb0>
 800456e:	2b0d      	cmp	r3, #13
 8004570:	d004      	beq.n	800457c <SetSimpleData+0xa8>
 8004572:	e007      	b.n	8004584 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	2205      	movs	r2, #5
 8004578:	76da      	strb	r2, [r3, #27]
		break;
 800457a:	e006      	b.n	800458a <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 800457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457e:	220d      	movs	r2, #13
 8004580:	76da      	strb	r2, [r3, #27]
		break;
 8004582:	e002      	b.n	800458a <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8004584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004586:	2200      	movs	r2, #0
 8004588:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800458a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458c:	7edb      	ldrb	r3, [r3, #27]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d108      	bne.n	80045a4 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8004592:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004596:	4618      	mov	r0, r3
 8004598:	f7ff ff4c 	bl	8004434 <ConvertStatusLite>
 800459c:	4603      	mov	r3, r0
 800459e:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80045a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a2:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80045a8:	025b      	lsls	r3, r3, #9
 80045aa:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a3a      	ldr	r2, [r7, #32]
 80045b0:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045b8:	025b      	lsls	r3, r3, #9
 80045ba:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a3a      	ldr	r2, [r7, #32]
 80045c0:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 80045c4:	f107 0314 	add.w	r3, r7, #20
 80045c8:	461a      	mov	r2, r3
 80045ca:	2100      	movs	r1, #0
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff fdb3 	bl	8004138 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 80045d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	bf0c      	ite	eq
 80045da:	2301      	moveq	r3, #1
 80045dc:	2300      	movne	r3, #0
 80045de:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 80045e0:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 80045e2:	f107 0319 	add.w	r3, r7, #25
 80045e6:	461a      	mov	r2, r3
 80045e8:	2100      	movs	r1, #0
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff fd81 	bl	80040f2 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80045f0:	7e7b      	ldrb	r3, [r7, #25]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d104      	bne.n	8004600 <SetSimpleData+0x12c>
 80045f6:	7ffb      	ldrb	r3, [r7, #31]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <SetSimpleData+0x12c>
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <SetSimpleData+0x12e>
 8004600:	2300      	movs	r3, #0
 8004602:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	7fba      	ldrb	r2, [r7, #30]
 8004608:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800460c:	f107 0314 	add.w	r3, r7, #20
 8004610:	461a      	mov	r2, r3
 8004612:	2101      	movs	r1, #1
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff fd8f 	bl	8004138 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800461a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800461e:	2b04      	cmp	r3, #4
 8004620:	bf0c      	ite	eq
 8004622:	2301      	moveq	r3, #1
 8004624:	2300      	movne	r3, #0
 8004626:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8004628:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800462a:	f107 0319 	add.w	r3, r7, #25
 800462e:	461a      	mov	r2, r3
 8004630:	2101      	movs	r1, #1
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f7ff fd5d 	bl	80040f2 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8004638:	7e7b      	ldrb	r3, [r7, #25]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d104      	bne.n	8004648 <SetSimpleData+0x174>
 800463e:	7f7b      	ldrb	r3, [r7, #29]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <SetSimpleData+0x174>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <SetSimpleData+0x176>
 8004648:	2300      	movs	r3, #0
 800464a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	7fba      	ldrb	r2, [r7, #30]
 8004650:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8004654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004656:	8b1b      	ldrh	r3, [r3, #24]
 8004658:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 800465a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465c:	7edb      	ldrb	r3, [r3, #27]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d110      	bne.n	8004684 <SetSimpleData+0x1b0>
 8004662:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004666:	2b00      	cmp	r3, #0
 8004668:	da0c      	bge.n	8004684 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800466a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <SetSimpleData+0x1bc>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	429a      	cmp	r2, r3
 8004674:	da03      	bge.n	800467e <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	220e      	movs	r2, #14
 800467a:	76da      	strb	r2, [r3, #27]
 800467c:	e002      	b.n	8004684 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 800467e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004680:	2200      	movs	r2, #0
 8004682:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8004684:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004688:	4618      	mov	r0, r3
 800468a:	3730      	adds	r7, #48	; 0x30
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	2000000c 	.word	0x2000000c

08004694 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b0a8      	sub	sp, #160	; 0xa0
 8004698:	af02      	add	r7, sp, #8
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800469e:	2300      	movs	r3, #0
 80046a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80046ac:	221c      	movs	r2, #28
 80046ae:	21ff      	movs	r1, #255	; 0xff
 80046b0:	6838      	ldr	r0, [r7, #0]
 80046b2:	f004 fbd1 	bl	8008e58 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 80046b6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046ba:	2102      	movs	r1, #2
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f001 f93c 	bl	800593a <VL53L1_get_device_results>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 80046c8:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d117      	bne.n	8004700 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 80046d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046d4:	789a      	ldrb	r2, [r3, #2]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 80046da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046de:	3304      	adds	r3, #4
 80046e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 80046e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046e8:	78da      	ldrb	r2, [r3, #3]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046f2:	2101      	movs	r1, #1
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7ff feed 	bl	80044d4 <SetSimpleData>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004700:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8004704:	4618      	mov	r0, r3
 8004706:	3798      	adds	r7, #152	; 0x98
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b0c6      	sub	sp, #280	; 0x118
 8004710:	af00      	add	r7, sp, #0
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004716:	2300      	movs	r3, #0
 8004718:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004722:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004726:	2b00      	cmp	r3, #0
 8004728:	d108      	bne.n	800473c <VL53L1_LoadPatch+0x30>
		status = VL53L1_WrByte(
 800472a:	1d3b      	adds	r3, r7, #4
 800472c:	2200      	movs	r2, #0
 800472e:	2185      	movs	r1, #133	; 0x85
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	f004 f9f1 	bl	8008b18 <VL53L1_WrByte>
 8004736:	4603      	mov	r3, r0
 8004738:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 800473c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004740:	2b00      	cmp	r3, #0
 8004742:	d103      	bne.n	800474c <VL53L1_LoadPatch+0x40>
		VL53L1_enable_powerforce(Dev);
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	f002 fce1 	bl	800710e <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 800474c:	4b65      	ldr	r3, [pc, #404]	; (80048e4 <VL53L1_LoadPatch+0x1d8>)
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004758:	2b03      	cmp	r3, #3
 800475a:	d81b      	bhi.n	8004794 <VL53L1_LoadPatch+0x88>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <VL53L1_LoadPatch+0x58>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	08004775 	.word	0x08004775
 8004768:	0800477d 	.word	0x0800477d
 800476c:	08004785 	.word	0x08004785
 8004770:	0800478d 	.word	0x0800478d

	switch(patch_tuning) {
	case 0:
		patch_power = 0x00;
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800477a:	e00e      	b.n	800479a <VL53L1_LoadPatch+0x8e>
	case 1:
		patch_power = 0x10;
 800477c:	2310      	movs	r3, #16
 800477e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8004782:	e00a      	b.n	800479a <VL53L1_LoadPatch+0x8e>
	case 2:
		patch_power = 0x20;
 8004784:	2320      	movs	r3, #32
 8004786:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 800478a:	e006      	b.n	800479a <VL53L1_LoadPatch+0x8e>
	case 3:
		patch_power = 0x40;
 800478c:	2340      	movs	r3, #64	; 0x40
 800478e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8004792:	e002      	b.n	800479a <VL53L1_LoadPatch+0x8e>
	default:
		patch_power = 0x00;
 8004794:	2300      	movs	r3, #0
 8004796:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 800479a:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d125      	bne.n	80047ee <VL53L1_LoadPatch+0xe2>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	2229      	movs	r2, #41	; 0x29
 80047a8:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80047aa:	f107 030c 	add.w	r3, r7, #12
 80047ae:	22c9      	movs	r2, #201	; 0xc9
 80047b0:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80047b2:	f107 030c 	add.w	r3, r7, #12
 80047b6:	220e      	movs	r2, #14
 80047b8:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80047ba:	f107 030c 	add.w	r3, r7, #12
 80047be:	2240      	movs	r2, #64	; 0x40
 80047c0:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80047c2:	f107 030c 	add.w	r3, r7, #12
 80047c6:	2228      	movs	r2, #40	; 0x28
 80047c8:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 80047ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	f107 030c 	add.w	r3, r7, #12
 80047d4:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 80047d6:	f107 020c 	add.w	r2, r7, #12
 80047da:	1d38      	adds	r0, r7, #4
 80047dc:	2306      	movs	r3, #6
 80047de:	f240 4176 	movw	r1, #1142	; 0x476
 80047e2:	6800      	ldr	r0, [r0, #0]
 80047e4:	f004 f92c 	bl	8008a40 <VL53L1_WriteMulti>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 80047ee:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d123      	bne.n	800483e <VL53L1_LoadPatch+0x132>
		comms_buffer[0] = 0x03;
 80047f6:	f107 030c 	add.w	r3, r7, #12
 80047fa:	2203      	movs	r2, #3
 80047fc:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 80047fe:	f107 030c 	add.w	r3, r7, #12
 8004802:	226d      	movs	r2, #109	; 0x6d
 8004804:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004806:	f107 030c 	add.w	r3, r7, #12
 800480a:	2203      	movs	r2, #3
 800480c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 800480e:	f107 030c 	add.w	r3, r7, #12
 8004812:	226f      	movs	r2, #111	; 0x6f
 8004814:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8004816:	f107 030c 	add.w	r3, r7, #12
 800481a:	2207      	movs	r2, #7
 800481c:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 800481e:	f107 030c 	add.w	r3, r7, #12
 8004822:	2229      	movs	r2, #41	; 0x29
 8004824:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 8004826:	f107 020c 	add.w	r2, r7, #12
 800482a:	1d38      	adds	r0, r7, #4
 800482c:	2306      	movs	r3, #6
 800482e:	f240 4196 	movw	r1, #1174	; 0x496
 8004832:	6800      	ldr	r0, [r0, #0]
 8004834:	f004 f904 	bl	8008a40 <VL53L1_WriteMulti>
 8004838:	4603      	mov	r3, r0
 800483a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 800483e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004842:	2b00      	cmp	r3, #0
 8004844:	d113      	bne.n	800486e <VL53L1_LoadPatch+0x162>
		comms_buffer[0] = 0x00;
 8004846:	f107 030c 	add.w	r3, r7, #12
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800484e:	f107 030c 	add.w	r3, r7, #12
 8004852:	2207      	movs	r2, #7
 8004854:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8004856:	f107 020c 	add.w	r2, r7, #12
 800485a:	1d38      	adds	r0, r7, #4
 800485c:	2302      	movs	r3, #2
 800485e:	f240 4172 	movw	r1, #1138	; 0x472
 8004862:	6800      	ldr	r0, [r0, #0]
 8004864:	f004 f8ec 	bl	8008a40 <VL53L1_WriteMulti>
 8004868:	4603      	mov	r3, r0
 800486a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 800486e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004872:	2b00      	cmp	r3, #0
 8004874:	d113      	bne.n	800489e <VL53L1_LoadPatch+0x192>
		comms_buffer[0] = 0x00;
 8004876:	f107 030c 	add.w	r3, r7, #12
 800487a:	2200      	movs	r2, #0
 800487c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800487e:	f107 030c 	add.w	r3, r7, #12
 8004882:	2207      	movs	r2, #7
 8004884:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8004886:	f107 020c 	add.w	r2, r7, #12
 800488a:	1d38      	adds	r0, r7, #4
 800488c:	2302      	movs	r3, #2
 800488e:	f240 4174 	movw	r1, #1140	; 0x474
 8004892:	6800      	ldr	r0, [r0, #0]
 8004894:	f004 f8d4 	bl	8008a40 <VL53L1_WriteMulti>
 8004898:	4603      	mov	r3, r0
 800489a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800489e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d109      	bne.n	80048ba <VL53L1_LoadPatch+0x1ae>
		status = VL53L1_WrByte(
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	2201      	movs	r2, #1
 80048aa:	f44f 618e 	mov.w	r1, #1136	; 0x470
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	f004 f932 	bl	8008b18 <VL53L1_WrByte>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 80048ba:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d108      	bne.n	80048d4 <VL53L1_LoadPatch+0x1c8>
		status = VL53L1_WrByte(
 80048c2:	1d3b      	adds	r3, r7, #4
 80048c4:	2201      	movs	r2, #1
 80048c6:	2185      	movs	r1, #133	; 0x85
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	f004 f925 	bl	8008b18 <VL53L1_WrByte>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 80048d4:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 80048d8:	4618      	mov	r0, r3
 80048da:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	2000000c 	.word	0x2000000c

080048e8 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af04      	add	r7, sp, #16
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 80048fc:	2162      	movs	r1, #98	; 0x62
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f002 f8bf 	bl	8006a82 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2201      	movs	r2, #1
 800490e:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2200      	movs	r2, #0
 8004914:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2201      	movs	r2, #1
 800491a:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2201      	movs	r2, #1
 8004920:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004928:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004930:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8004938:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2264      	movs	r2, #100	; 0x64
 800493e:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004946:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f240 72db 	movw	r2, #2011	; 0x7db
 8004956:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f002 f875 	bl	8006a4a <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d008      	beq.n	8004978 <VL53L1_data_init+0x90>
 8004966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f857 	bl	8004a22 <VL53L1_read_p2p_data>
 8004974:	4603      	mov	r3, r0
 8004976:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800497e:	4618      	mov	r0, r3
 8004980:	f001 fba4 	bl	80060cc <VL53L1_init_refspadchar_config_struct>
 8004984:	4603      	mov	r3, r0
 8004986:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fbc0 	bl	8006114 <VL53L1_init_ssc_config_struct>
 8004994:	4603      	mov	r3, r0
 8004996:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80049a4:	4619      	mov	r1, r3
 80049a6:	4610      	mov	r0, r2
 80049a8:	f001 fbd5 	bl	8006156 <VL53L1_init_xtalk_config_struct>
 80049ac:	4603      	mov	r3, r0
 80049ae:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 fc2f 	bl	800621a <VL53L1_init_offset_cal_config_struct>
 80049bc:	4603      	mov	r3, r0
 80049be:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	33a4      	adds	r3, #164	; 0xa4
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 fc4f 	bl	8006268 <VL53L1_init_tuning_parm_storage_struct>
 80049ca:	4603      	mov	r3, r0
 80049cc:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 80049ce:	2120      	movs	r1, #32
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fcc1 	bl	8005358 <VL53L1_set_vhv_loopbound>
 80049d6:	4603      	mov	r3, r0
 80049d8:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 80049da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d116      	bne.n	8004a10 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	7858      	ldrb	r0, [r3, #1]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	8b1c      	ldrh	r4, [r3, #24]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	689d      	ldr	r5, [r3, #8]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	6912      	ldr	r2, [r2, #16]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	6949      	ldr	r1, [r1, #20]
 80049fa:	9102      	str	r1, [sp, #8]
 80049fc:	9201      	str	r2, [sp, #4]
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	462b      	mov	r3, r5
 8004a02:	4622      	mov	r2, r4
 8004a04:	4601      	mov	r1, r0
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fad8 	bl	8004fbc <VL53L1_set_preset_mode>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f002 fdb5 	bl	8007580 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8004a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bdb0      	pop	{r4, r5, r7, pc}

08004a22 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b084      	sub	sp, #16
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004a40:	4619      	mov	r1, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f002 ff39 	bl	80078ba <VL53L1_get_static_nvm_managed>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8004a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d107      	bne.n	8004a64 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	3342      	adds	r3, #66	; 0x42
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f003 f86b 	bl	8007b36 <VL53L1_get_customer_nvm_managed>
 8004a60:	4603      	mov	r3, r0
 8004a62:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8004a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d115      	bne.n	8004a98 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f003 ff1d 	bl	80088b4 <VL53L1_get_nvm_copy_data>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8004a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d108      	bne.n	8004a98 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	33f0      	adds	r3, #240	; 0xf0
 8004a90:	4619      	mov	r1, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	f002 f957 	bl	8006d46 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8004a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	21de      	movs	r1, #222	; 0xde
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f004 f892 	bl	8008bd4 <VL53L1_RdWord>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004aba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004abe:	d204      	bcs.n	8004aca <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8004ac6:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8004aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d107      	bne.n	8004ae2 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	339e      	adds	r3, #158	; 0x9e
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f990 	bl	8004dfe <VL53L1_get_mode_mitigation_roi>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d114      	bne.n	8004b16 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10f      	bne.n	8004b16 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8004b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004b3e:	23f1      	movs	r3, #241	; 0xf1
 8004b40:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8004b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10c      	bne.n	8004b64 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8004b56:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8004b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004b90:	23f1      	movs	r3, #241	; 0xf1
 8004b92:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8004ba8:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3714      	adds	r7, #20
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004be0:	23f1      	movs	r3, #241	; 0xf1
 8004be2:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004be4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d11b      	bne.n	8004c24 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 8004c10:	9201      	str	r2, [sp, #4]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	460b      	mov	r3, r1
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	68b8      	ldr	r0, [r7, #8]
 8004c1c:	f002 fbe2 	bl	80073e4 <VL53L1_calc_timeout_register_values>
 8004c20:	4603      	mov	r3, r0
 8004c22:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c58:	23f1      	movs	r3, #241	; 0xf1
 8004c5a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004c5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d14a      	bne.n	8004cfa <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f002 fa5d 	bl	8007132 <VL53L1_calc_macro_period_us>
 8004c78:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8004c80:	6979      	ldr	r1, [r7, #20]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f002 fb15 	bl	80072b2 <VL53L1_calc_timeout_us>
 8004c88:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 8004c94:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004c96:	8a7b      	ldrh	r3, [r7, #18]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8004ca2:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004ca4:	4413      	add	r3, r2
 8004ca6:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004ca8:	8a7b      	ldrh	r3, [r7, #18]
 8004caa:	6979      	ldr	r1, [r7, #20]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f002 fb3e 	bl	800732e <VL53L1_calc_decoded_timeout_us>
 8004cb2:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 8004cbe:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004cc0:	8a7b      	ldrh	r3, [r7, #18]
 8004cc2:	021b      	lsls	r3, r3, #8
 8004cc4:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8004ccc:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004cce:	4413      	add	r3, r2
 8004cd0:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004cd2:	8a7b      	ldrh	r3, [r7, #18]
 8004cd4:	6979      	ldr	r1, [r7, #20]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f002 fb29 	bl	800732e <VL53L1_calc_decoded_timeout_us>
 8004cdc:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004cfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3720      	adds	r7, #32
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b087      	sub	sp, #28
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004d20:	7afb      	ldrb	r3, [r7, #11]
 8004d22:	2b07      	cmp	r3, #7
 8004d24:	d81c      	bhi.n	8004d60 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8004d26:	7afb      	ldrb	r3, [r7, #11]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d004      	beq.n	8004d36 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8004d2c:	7afb      	ldrb	r3, [r7, #11]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8004d3c:	7dbb      	ldrb	r3, [r7, #22]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8004d46:	7afb      	ldrb	r3, [r7, #11]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00b      	beq.n	8004d64 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	7afb      	ldrb	r3, [r7, #11]
 8004d54:	fa42 f303 	asr.w	r3, r2, r3
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	e001      	b.n	8004d64 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004d60:	23fc      	movs	r3, #252	; 0xfc
 8004d62:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004d64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	7858      	ldrb	r0, [r3, #1]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	7819      	ldrb	r1, [r3, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 8004d94:	461a      	mov	r2, r3
 8004d96:	f002 fb9e 	bl	80074d6 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	7898      	ldrb	r0, [r3, #2]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	78d9      	ldrb	r1, [r3, #3]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004da8:	461a      	mov	r2, r3
 8004daa:	f002 fbd3 	bl	8007554 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8004dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	f002 fc8a 	bl	80076f2 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	1c99      	adds	r1, r3, #2
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	3303      	adds	r3, #3
 8004dec:	461a      	mov	r2, r3
 8004dee:	f002 fb99 	bl	8007524 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8004df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b086      	sub	sp, #24
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 8004e22:	f107 020e 	add.w	r2, r7, #14
 8004e26:	f107 010d 	add.w	r1, r7, #13
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f002 fc61 	bl	80076f2 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004e30:	7bba      	ldrb	r2, [r7, #14]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004e36:	7b7a      	ldrb	r2, [r7, #13]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 8004e42:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	f003 030f 	and.w	r3, r3, #15
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004e5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b087      	sub	sp, #28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	607a      	str	r2, [r7, #4]
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	460b      	mov	r3, r1
 8004e76:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004e80:	7afb      	ldrb	r3, [r7, #11]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	2b25      	cmp	r3, #37	; 0x25
 8004e86:	f200 808e 	bhi.w	8004fa6 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8004e8a:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004f29 	.word	0x08004f29
 8004e94:	08004f29 	.word	0x08004f29
 8004e98:	08004f29 	.word	0x08004f29
 8004e9c:	08004f29 	.word	0x08004f29
 8004ea0:	08004f29 	.word	0x08004f29
 8004ea4:	08004f53 	.word	0x08004f53
 8004ea8:	08004f53 	.word	0x08004f53
 8004eac:	08004f53 	.word	0x08004f53
 8004eb0:	08004fa7 	.word	0x08004fa7
 8004eb4:	08004fa7 	.word	0x08004fa7
 8004eb8:	08004fa7 	.word	0x08004fa7
 8004ebc:	08004fa7 	.word	0x08004fa7
 8004ec0:	08004fa7 	.word	0x08004fa7
 8004ec4:	08004fa7 	.word	0x08004fa7
 8004ec8:	08004fa7 	.word	0x08004fa7
 8004ecc:	08004fa7 	.word	0x08004fa7
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f53 	.word	0x08004f53
 8004ed8:	08004fa7 	.word	0x08004fa7
 8004edc:	08004fa7 	.word	0x08004fa7
 8004ee0:	08004fa7 	.word	0x08004fa7
 8004ee4:	08004fa7 	.word	0x08004fa7
 8004ee8:	08004fa7 	.word	0x08004fa7
 8004eec:	08004fa7 	.word	0x08004fa7
 8004ef0:	08004fa7 	.word	0x08004fa7
 8004ef4:	08004fa7 	.word	0x08004fa7
 8004ef8:	08004fa7 	.word	0x08004fa7
 8004efc:	08004fa7 	.word	0x08004fa7
 8004f00:	08004fa7 	.word	0x08004fa7
 8004f04:	08004fa7 	.word	0x08004fa7
 8004f08:	08004fa7 	.word	0x08004fa7
 8004f0c:	08004fa7 	.word	0x08004fa7
 8004f10:	08004fa7 	.word	0x08004fa7
 8004f14:	08004fa7 	.word	0x08004fa7
 8004f18:	08004fa7 	.word	0x08004fa7
 8004f1c:	08004f7d 	.word	0x08004f7d
 8004f20:	08004f7d 	.word	0x08004f7d
 8004f24:	08004f7d 	.word	0x08004f7d
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4e:	601a      	str	r2, [r3, #0]
	break;
 8004f50:	e02c      	b.n	8004fac <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	601a      	str	r2, [r3, #0]
	break;
 8004f7a:	e017      	b.n	8004fac <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	601a      	str	r2, [r3, #0]
	break;
 8004fa4:	e002      	b.n	8004fac <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004fa6:	23fc      	movs	r3, #252	; 0xfc
 8004fa8:	75fb      	strb	r3, [r7, #23]
		break;
 8004faa:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8004fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b092      	sub	sp, #72	; 0x48
 8004fc0:	af04      	add	r7, sp, #16
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	72fb      	strb	r3, [r7, #11]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8004fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004fde:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8004ff6:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8004ffe:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8005000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005002:	33a4      	adds	r3, #164	; 0xa4
 8005004:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800500c:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	7afa      	ldrb	r2, [r7, #11]
 8005012:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005018:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800501e:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005024:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8005026:	2103      	movs	r1, #3
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f001 fd2a 	bl	8006a82 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800502e:	7afb      	ldrb	r3, [r7, #11]
 8005030:	3b01      	subs	r3, #1
 8005032:	2b25      	cmp	r3, #37	; 0x25
 8005034:	f200 810c 	bhi.w	8005250 <VL53L1_set_preset_mode+0x294>
 8005038:	a201      	add	r2, pc, #4	; (adr r2, 8005040 <VL53L1_set_preset_mode+0x84>)
 800503a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503e:	bf00      	nop
 8005040:	080050d9 	.word	0x080050d9
 8005044:	080050f5 	.word	0x080050f5
 8005048:	08005111 	.word	0x08005111
 800504c:	0800512d 	.word	0x0800512d
 8005050:	08005149 	.word	0x08005149
 8005054:	08005165 	.word	0x08005165
 8005058:	08005181 	.word	0x08005181
 800505c:	0800519d 	.word	0x0800519d
 8005060:	08005251 	.word	0x08005251
 8005064:	08005251 	.word	0x08005251
 8005068:	08005251 	.word	0x08005251
 800506c:	08005251 	.word	0x08005251
 8005070:	08005251 	.word	0x08005251
 8005074:	08005251 	.word	0x08005251
 8005078:	08005251 	.word	0x08005251
 800507c:	08005251 	.word	0x08005251
 8005080:	080051b9 	.word	0x080051b9
 8005084:	080051d5 	.word	0x080051d5
 8005088:	08005251 	.word	0x08005251
 800508c:	08005251 	.word	0x08005251
 8005090:	08005251 	.word	0x08005251
 8005094:	08005251 	.word	0x08005251
 8005098:	08005251 	.word	0x08005251
 800509c:	08005251 	.word	0x08005251
 80050a0:	08005251 	.word	0x08005251
 80050a4:	08005251 	.word	0x08005251
 80050a8:	08005251 	.word	0x08005251
 80050ac:	08005251 	.word	0x08005251
 80050b0:	08005251 	.word	0x08005251
 80050b4:	08005251 	.word	0x08005251
 80050b8:	08005251 	.word	0x08005251
 80050bc:	08005251 	.word	0x08005251
 80050c0:	08005251 	.word	0x08005251
 80050c4:	08005251 	.word	0x08005251
 80050c8:	08005251 	.word	0x08005251
 80050cc:	080051f1 	.word	0x080051f1
 80050d0:	08005211 	.word	0x08005211
 80050d4:	08005231 	.word	0x08005231

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	9301      	str	r3, [sp, #4]
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050e8:	f001 f94d 	bl	8006386 <VL53L1_preset_mode_standard_ranging>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80050f2:	e0b1      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005104:	f001 fa5d 	bl	80065c2 <VL53L1_preset_mode_standard_ranging_short_range>
 8005108:	4603      	mov	r3, r0
 800510a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800510e:	e0a3      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800511c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800511e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005120:	f001 fa90 	bl	8006644 <VL53L1_preset_mode_standard_ranging_long_range>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800512a:	e095      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800513a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800513c:	f001 fac3 	bl	80066c6 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8005140:	4603      	mov	r3, r0
 8005142:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005146:	e087      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	9301      	str	r3, [sp, #4]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005158:	f001 fada 	bl	8006710 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800515c:	4603      	mov	r3, r0
 800515e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005162:	e079      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005174:	f001 faf1 	bl	800675a <VL53L1_preset_mode_timed_ranging>
 8005178:	4603      	mov	r3, r0
 800517a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800517e:	e06b      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800518e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005190:	f001 fb1d 	bl	80067ce <VL53L1_preset_mode_timed_ranging_short_range>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800519a:	e05d      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051ac:	f001 fb49 	bl	8006842 <VL53L1_preset_mode_timed_ranging_long_range>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051b6:	e04f      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051c8:	f001 fc1d 	bl	8006a06 <VL53L1_preset_mode_olt>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051d2:	e041      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051e4:	f001 fbd9 	bl	800699a <VL53L1_preset_mode_singleshot_ranging>
 80051e8:	4603      	mov	r3, r0
 80051ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051ee:	e033      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	9302      	str	r3, [sp, #8]
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005200:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005202:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005204:	f001 fb7d 	bl	8006902 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8005208:	4603      	mov	r3, r0
 800520a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800520e:	e023      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	9302      	str	r3, [sp, #8]
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005224:	f001 fb47 	bl	80068b6 <VL53L1_preset_mode_low_power_auto_ranging>
 8005228:	4603      	mov	r3, r0
 800522a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800522e:	e013      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	9302      	str	r3, [sp, #8]
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	9301      	str	r3, [sp, #4]
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005244:	f001 fb83 	bl	800694e <VL53L1_preset_mode_low_power_auto_long_ranging>
 8005248:	4603      	mov	r3, r0
 800524a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800524e:	e003      	b.n	8005258 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8005250:	23fc      	movs	r3, #252	; 0xfc
 8005252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 8005256:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8005258:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800525c:	2b00      	cmp	r3, #0
 800525e:	d105      	bne.n	800526c <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8005260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005262:	893a      	ldrh	r2, [r7, #8]
 8005264:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	893a      	ldrh	r2, [r7, #8]
 800526a:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800526c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005270:	2b00      	cmp	r3, #0
 8005272:	d108      	bne.n	8005286 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8005274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005276:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff fca0 	bl	8004bc0 <VL53L1_set_timeouts_us>
 8005280:	4603      	mov	r3, r0
 8005282:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8005286:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800528e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7ff fc46 	bl	8004b22 <VL53L1_set_inter_measurement_period_ms>
 8005296:	4603      	mov	r3, r0
 8005298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800529c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3738      	adds	r7, #56	; 0x38
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80052b2:	2300      	movs	r3, #0
 80052b4:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80052c4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	887a      	ldrh	r2, [r7, #2]
 80052ec:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 80052f0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800530a:	2300      	movs	r3, #0
 800530c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800531c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	887a      	ldrh	r2, [r7, #2]
 8005344:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8005348:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005364:	2300      	movs	r3, #0
 8005366:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	b2da      	uxtb	r2, r3
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	b2db      	uxtb	r3, r3
 800537e:	4413      	add	r3, r2
 8005380:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8005388:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b0d0      	sub	sp, #320	; 0x140
 800539c:	af00      	add	r7, sp, #0
 800539e:	1d3b      	adds	r3, r7, #4
 80053a0:	6018      	str	r0, [r3, #0]
 80053a2:	4608      	mov	r0, r1
 80053a4:	4611      	mov	r1, r2
 80053a6:	1cfb      	adds	r3, r7, #3
 80053a8:	4602      	mov	r2, r0
 80053aa:	701a      	strb	r2, [r3, #0]
 80053ac:	1cbb      	adds	r3, r7, #2
 80053ae:	460a      	mov	r2, r1
 80053b0:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80053b8:	1d3b      	adds	r3, r7, #4
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80053c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053c4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80053c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80053cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053d0:	3342      	adds	r3, #66	; 0x42
 80053d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80053d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80053de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80053e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053e6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80053ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80053ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053f2:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80053f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80053fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80053fe:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005402:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8005406:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800540a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800540e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8005412:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005416:	332c      	adds	r3, #44	; 0x2c
 8005418:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800543c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005440:	1cfa      	adds	r2, r7, #3
 8005442:	7812      	ldrb	r2, [r2, #0]
 8005444:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800544a:	791b      	ldrb	r3, [r3, #4]
 800544c:	b25b      	sxtb	r3, r3
 800544e:	f003 030f 	and.w	r3, r3, #15
 8005452:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8005454:	1cfb      	adds	r3, r7, #3
 8005456:	f993 3000 	ldrsb.w	r3, [r3]
 800545a:	4313      	orrs	r3, r2
 800545c:	b25b      	sxtb	r3, r3
 800545e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005464:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005466:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800546a:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800546e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005472:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8005476:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800547a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800547e:	2bff      	cmp	r3, #255	; 0xff
 8005480:	d104      	bne.n	800548c <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005482:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005486:	2200      	movs	r2, #0
 8005488:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800548c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005490:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8005494:	2b01      	cmp	r3, #1
 8005496:	d133      	bne.n	8005500 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005498:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800549c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d12d      	bne.n	8005500 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80054a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054a8:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 80054ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054b0:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80054b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054b8:	2220      	movs	r2, #32
 80054ba:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 80054be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054c2:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 80054c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10c      	bne.n	80054e8 <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 80054ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054d2:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	b29b      	uxth	r3, r3
 80054dc:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 80054de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80054e6:	e004      	b.n	80054f2 <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 80054e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 80054f2:	1cbb      	adds	r3, r7, #2
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d802      	bhi.n	8005500 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80054fa:	1cbb      	adds	r3, r7, #2
 80054fc:	2205      	movs	r2, #5
 80054fe:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005500:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005504:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8005508:	2b01      	cmp	r3, #1
 800550a:	d110      	bne.n	800552e <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800550c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005510:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005514:	2b01      	cmp	r3, #1
 8005516:	d10a      	bne.n	800552e <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8005518:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800551c:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8005520:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005524:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8005528:	1cbb      	adds	r3, r7, #2
 800552a:	2206      	movs	r2, #6
 800552c:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800552e:	1cbb      	adds	r3, r7, #2
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	3b01      	subs	r3, #1
 8005534:	2b05      	cmp	r3, #5
 8005536:	d827      	bhi.n	8005588 <VL53L1_init_and_start_range+0x1f0>
 8005538:	a201      	add	r2, pc, #4	; (adr r2, 8005540 <VL53L1_init_and_start_range+0x1a8>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005581 	.word	0x08005581
 8005544:	08005579 	.word	0x08005579
 8005548:	08005571 	.word	0x08005571
 800554c:	08005569 	.word	0x08005569
 8005550:	08005561 	.word	0x08005561
 8005554:	08005559 	.word	0x08005559
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005558:	2301      	movs	r3, #1
 800555a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800555e:	e017      	b.n	8005590 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005560:	230d      	movs	r3, #13
 8005562:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005566:	e013      	b.n	8005590 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005568:	2324      	movs	r3, #36	; 0x24
 800556a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800556e:	e00f      	b.n	8005590 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005570:	2344      	movs	r3, #68	; 0x44
 8005572:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005576:	e00b      	b.n	8005590 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8005578:	235a      	movs	r3, #90	; 0x5a
 800557a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800557e:	e007      	b.n	8005590 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005580:	2371      	movs	r3, #113	; 0x71
 8005582:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005586:	e003      	b.n	8005590 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8005588:	2383      	movs	r3, #131	; 0x83
 800558a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800558e:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8005590:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8005594:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8005598:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80055a4:	2300      	movs	r3, #0
 80055a6:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 80055aa:	e00b      	b.n	80055c4 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 80055ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80055ba:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 80055be:	3301      	adds	r3, #1
 80055c0:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 80055c4:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 80055c8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d3ed      	bcc.n	80055ac <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80055d0:	1cbb      	adds	r3, r7, #2
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	2b05      	cmp	r3, #5
 80055d6:	d917      	bls.n	8005608 <VL53L1_init_and_start_range+0x270>
 80055d8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d113      	bne.n	8005608 <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80055e0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80055e4:	f1c3 0301 	rsb	r3, r3, #1
 80055e8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80055ec:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 80055f0:	f107 020c 	add.w	r2, r7, #12
 80055f4:	4413      	add	r3, r2
 80055f6:	461a      	mov	r2, r3
 80055f8:	210b      	movs	r1, #11
 80055fa:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80055fe:	f002 f8a7 	bl	8007750 <VL53L1_i2c_encode_static_nvm_managed>
 8005602:	4603      	mov	r3, r0
 8005604:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8005608:	1cbb      	adds	r3, r7, #2
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	2b04      	cmp	r3, #4
 800560e:	d917      	bls.n	8005640 <VL53L1_init_and_start_range+0x2a8>
 8005610:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005614:	2b00      	cmp	r3, #0
 8005616:	d113      	bne.n	8005640 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8005618:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800561c:	f1c3 030d 	rsb	r3, r3, #13
 8005620:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005624:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8005628:	f107 020c 	add.w	r2, r7, #12
 800562c:	4413      	add	r3, r2
 800562e:	461a      	mov	r2, r3
 8005630:	2117      	movs	r1, #23
 8005632:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8005636:	f002 f967 	bl	8007908 <VL53L1_i2c_encode_customer_nvm_managed>
 800563a:	4603      	mov	r3, r0
 800563c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005640:	1cbb      	adds	r3, r7, #2
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d917      	bls.n	8005678 <VL53L1_init_and_start_range+0x2e0>
 8005648:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800564c:	2b00      	cmp	r3, #0
 800564e:	d113      	bne.n	8005678 <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8005650:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8005654:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8005658:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800565c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 8005660:	f107 020c 	add.w	r2, r7, #12
 8005664:	4413      	add	r3, r2
 8005666:	461a      	mov	r2, r3
 8005668:	2120      	movs	r1, #32
 800566a:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800566e:	f002 fa89 	bl	8007b84 <VL53L1_i2c_encode_static_config>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005678:	1cbb      	adds	r3, r7, #2
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d917      	bls.n	80056b0 <VL53L1_init_and_start_range+0x318>
 8005680:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005684:	2b00      	cmp	r3, #0
 8005686:	d113      	bne.n	80056b0 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005688:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800568c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8005690:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005694:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005698:	f107 020c 	add.w	r2, r7, #12
 800569c:	4413      	add	r3, r2
 800569e:	461a      	mov	r2, r3
 80056a0:	2116      	movs	r1, #22
 80056a2:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80056a6:	f002 fb50 	bl	8007d4a <VL53L1_i2c_encode_general_config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80056b0:	1cbb      	adds	r3, r7, #2
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d917      	bls.n	80056e8 <VL53L1_init_and_start_range+0x350>
 80056b8:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d113      	bne.n	80056e8 <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80056c0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80056c4:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80056c8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80056cc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 80056d0:	f107 020c 	add.w	r2, r7, #12
 80056d4:	4413      	add	r3, r2
 80056d6:	461a      	mov	r2, r3
 80056d8:	2117      	movs	r1, #23
 80056da:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80056de:	f002 fbb8 	bl	8007e52 <VL53L1_i2c_encode_timing_config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80056e8:	1cbb      	adds	r3, r7, #2
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d036      	beq.n	800575e <VL53L1_init_and_start_range+0x3c6>
 80056f0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d132      	bne.n	800575e <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80056f8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80056fc:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8005700:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8005704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005708:	791b      	ldrb	r3, [r3, #4]
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d017      	beq.n	8005742 <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8005712:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005716:	789b      	ldrb	r3, [r3, #2]
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	b2da      	uxtb	r2, r3
 800571e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005722:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8005724:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005728:	789b      	ldrb	r3, [r3, #2]
 800572a:	f043 0301 	orr.w	r3, r3, #1
 800572e:	b2da      	uxtb	r2, r3
 8005730:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005734:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8005736:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800573a:	789a      	ldrb	r2, [r3, #2]
 800573c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005740:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005742:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8005746:	f107 020c 	add.w	r2, r7, #12
 800574a:	4413      	add	r3, r2
 800574c:	461a      	mov	r2, r3
 800574e:	2112      	movs	r1, #18
 8005750:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005754:	f002 fbff 	bl	8007f56 <VL53L1_i2c_encode_dynamic_config>
 8005758:	4603      	mov	r3, r0
 800575a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800575e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005762:	2b00      	cmp	r3, #0
 8005764:	d113      	bne.n	800578e <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 8005766:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800576a:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800576e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005772:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8005776:	f107 020c 	add.w	r2, r7, #12
 800577a:	4413      	add	r3, r2
 800577c:	461a      	mov	r2, r3
 800577e:	2105      	movs	r1, #5
 8005780:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005784:	f002 fc6c 	bl	8008060 <VL53L1_i2c_encode_system_control>
 8005788:	4603      	mov	r3, r0
 800578a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800578e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10c      	bne.n	80057b0 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 8005796:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800579a:	f107 020c 	add.w	r2, r7, #12
 800579e:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 80057a2:	1d38      	adds	r0, r7, #4
 80057a4:	6800      	ldr	r0, [r0, #0]
 80057a6:	f003 f94b 	bl	8008a40 <VL53L1_WriteMulti>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 80057b0:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80057b8:	1d3b      	adds	r3, r7, #4
 80057ba:	6818      	ldr	r0, [r3, #0]
 80057bc:	f001 f98a 	bl	8006ad4 <VL53L1_update_ll_driver_rd_state>
 80057c0:	4603      	mov	r3, r0
 80057c2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 80057c6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d106      	bne.n	80057dc <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80057ce:	1d3b      	adds	r3, r7, #4
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	f001 fa52 	bl	8006c7a <VL53L1_update_ll_driver_cfg_state>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 80057dc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop

080057ec <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b0c8      	sub	sp, #288	; 0x120
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	1d3b      	adds	r3, r7, #4
 80057f4:	6018      	str	r0, [r3, #0]
 80057f6:	460a      	mov	r2, r1
 80057f8:	1cfb      	adds	r3, r7, #3
 80057fa:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80057fc:	2300      	movs	r3, #0
 80057fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005802:	1d3b      	adds	r3, r7, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800580a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800580e:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8005812:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8005816:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800581a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800581e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8005822:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005826:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800582a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800582e:	2388      	movs	r3, #136	; 0x88
 8005830:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8005840:	1cfb      	adds	r3, r7, #3
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d008      	beq.n	800585a <VL53L1_get_measurement_results+0x6e>
 8005848:	2b02      	cmp	r3, #2
 800584a:	d10d      	bne.n	8005868 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800584c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005850:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8005854:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005858:	e00a      	b.n	8005870 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800585a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800585e:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8005862:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8005866:	e003      	b.n	8005870 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 8005868:	232c      	movs	r3, #44	; 0x2c
 800586a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800586e:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005870:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10c      	bne.n	8005892 <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 8005878:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800587c:	f107 0208 	add.w	r2, r7, #8
 8005880:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8005884:	1d38      	adds	r0, r7, #4
 8005886:	6800      	ldr	r0, [r0, #0]
 8005888:	f003 f910 	bl	8008aac <VL53L1_ReadMulti>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8005892:	1cfb      	adds	r3, r7, #3
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d917      	bls.n	80058ca <VL53L1_get_measurement_results+0xde>
 800589a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d113      	bne.n	80058ca <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80058a2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80058a6:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 80058aa:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80058ae:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 80058b2:	f107 0208 	add.w	r2, r7, #8
 80058b6:	4413      	add	r3, r2
 80058b8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80058bc:	4619      	mov	r1, r3
 80058be:	2038      	movs	r0, #56	; 0x38
 80058c0:	f002 fd60 	bl	8008384 <VL53L1_i2c_decode_debug_results>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80058ca:	1cfb      	adds	r3, r7, #3
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d017      	beq.n	8005902 <VL53L1_get_measurement_results+0x116>
 80058d2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d113      	bne.n	8005902 <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80058da:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80058de:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80058e2:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80058e6:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 80058ea:	f107 0208 	add.w	r2, r7, #8
 80058ee:	4413      	add	r3, r2
 80058f0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80058f4:	4619      	mov	r1, r3
 80058f6:	2021      	movs	r0, #33	; 0x21
 80058f8:	f002 fce3 	bl	80082c2 <VL53L1_i2c_decode_core_results>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005902:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005906:	2b00      	cmp	r3, #0
 8005908:	d110      	bne.n	800592c <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005910:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8005914:	f107 0208 	add.w	r2, r7, #8
 8005918:	4413      	add	r3, r2
 800591a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800591e:	4619      	mov	r1, r3
 8005920:	202c      	movs	r0, #44	; 0x2c
 8005922:	f002 fbd8 	bl	80080d6 <VL53L1_i2c_decode_system_results>
 8005926:	4603      	mov	r3, r0
 8005928:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800592c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8005930:	4618      	mov	r0, r3
 8005932:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b088      	sub	sp, #32
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	460b      	mov	r3, r1
 8005944:	607a      	str	r2, [r7, #4]
 8005946:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005948:	2300      	movs	r3, #0
 800594a:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8005956:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800595c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d106      	bne.n	8005972 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 8005964:	7afb      	ldrb	r3, [r7, #11]
 8005966:	4619      	mov	r1, r3
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f7ff ff3f 	bl	80057ec <VL53L1_get_measurement_results>
 800596e:	4603      	mov	r3, r0
 8005970:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8005972:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10c      	bne.n	8005994 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8005980:	4618      	mov	r0, r3
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f000 f85e 	bl	8005a50 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800599a:	2b01      	cmp	r3, #1
 800599c:	d11f      	bne.n	80059de <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800599e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10e      	bne.n	80059c4 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f001 fe32 	bl	800761a <VL53L1_low_power_auto_setup_manual_calibration>
 80059b6:	4603      	mov	r3, r0
 80059b8:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 80059c2:	e00c      	b.n	80059de <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 80059c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d108      	bne.n	80059de <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d103      	bne.n	80059de <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 80059f2:	2284      	movs	r2, #132	; 0x84
 80059f4:	6939      	ldr	r1, [r7, #16]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f003 fa20 	bl	8008e3c <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 80059fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f001 f8ed 	bl	8006be4 <VL53L1_check_ll_driver_rd_state>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8005a0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3720      	adds	r7, #32
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	460b      	mov	r3, r1
 8005a24:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d107      	bne.n	8005a42 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	2203      	movs	r2, #3
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff fcad 	bl	8005398 <VL53L1_init_and_start_range>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8005a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
	...

08005a50 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b089      	sub	sp, #36	; 0x24
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8005a62:	2300      	movs	r3, #0
 8005a64:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	78da      	ldrb	r2, [r3, #3]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	3304      	adds	r3, #4
 8005a76:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8005a78:	2300      	movs	r3, #0
 8005a7a:	77fb      	strb	r3, [r7, #31]
 8005a7c:	e0d0      	b.n	8005c20 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	7ffa      	ldrb	r2, [r7, #31]
 8005a82:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	2200      	movs	r2, #0
 8005a88:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	78db      	ldrb	r3, [r3, #3]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10a      	bne.n	8005aa8 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	785b      	ldrb	r3, [r3, #1]
 8005a96:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	d104      	bne.n	8005aa8 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	2213      	movs	r2, #19
 8005aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa6:	e007      	b.n	8005ab8 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	f003 031f 	and.w	r3, r3, #31
 8005ab0:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 8005ab8:	7ffb      	ldrb	r3, [r7, #31]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d05d      	beq.n	8005b7e <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8005ac2:	e0a7      	b.n	8005c14 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	789b      	ldrb	r3, [r3, #2]
 8005ac8:	2b07      	cmp	r3, #7
 8005aca:	d104      	bne.n	8005ad6 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	821a      	strh	r2, [r3, #16]
 8005ad4:	e00c      	b.n	8005af0 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	789b      	ldrb	r3, [r3, #2]
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d104      	bne.n	8005ae8 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	821a      	strh	r2, [r3, #16]
 8005ae6:	e003      	b.n	8005af0 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	895b      	ldrh	r3, [r3, #10]
 8005b0c:	015b      	lsls	r3, r3, #5
 8005b0e:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b16:	d302      	bcc.n	8005b1e <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8005b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b1c:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8005b32:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	fb02 f303 	mul.w	r3, r2, r3
 8005b3c:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b44:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	da01      	bge.n	8005b50 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8005b4c:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005b50:	12db      	asrs	r3, r3, #11
 8005b52:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	b21a      	sxth	r2, r3
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	621a      	str	r2, [r3, #32]

			break;
 8005b7c:	e04a      	b.n	8005c14 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b94:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	8bdb      	ldrh	r3, [r3, #30]
 8005ba2:	015b      	lsls	r3, r3, #5
 8005ba4:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bac:	d302      	bcc.n	8005bb4 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8005bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bb2:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 8005bc8:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	da01      	bge.n	8005be6 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8005be2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005be6:	12db      	asrs	r3, r3, #11
 8005be8:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	b21a      	sxth	r2, r3
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	621a      	str	r2, [r3, #32]

			break;
 8005c12:	bf00      	nop
		}

		pdata++;
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	3340      	adds	r3, #64	; 0x40
 8005c18:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8005c1a:	7ffb      	ldrb	r3, [r7, #31]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	77fb      	strb	r3, [r7, #31]
 8005c20:	7ffb      	ldrb	r3, [r7, #31]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	f67f af2b 	bls.w	8005a7e <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2b11      	cmp	r3, #17
 8005c38:	bf8c      	ite	hi
 8005c3a:	2201      	movhi	r2, #1
 8005c3c:	2200      	movls	r2, #0
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	d116      	bne.n	8005c72 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 8005c44:	2201      	movs	r2, #1
 8005c46:	409a      	lsls	r2, r3
 8005c48:	4b0d      	ldr	r3, [pc, #52]	; (8005c80 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf14      	ite	ne
 8005c50:	2301      	movne	r3, #1
 8005c52:	2300      	moveq	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	785b      	ldrb	r3, [r3, #1]
 8005c5e:	f003 031f 	and.w	r3, r3, #31
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 8005c70:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8005c72:	bf00      	nop
 8005c74:	3724      	adds	r7, #36	; 0x24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	0002200e 	.word	0x0002200e

08005c84 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	607a      	str	r2, [r7, #4]
 8005c90:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005c9a:	897b      	ldrh	r3, [r7, #10]
 8005c9c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005ca0:	2b38      	cmp	r3, #56	; 0x38
 8005ca2:	f200 8204 	bhi.w	80060ae <VL53L1_get_tuning_parm+0x42a>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <VL53L1_get_tuning_parm+0x28>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005d91 	.word	0x08005d91
 8005cb0:	08005d9f 	.word	0x08005d9f
 8005cb4:	08005dad 	.word	0x08005dad
 8005cb8:	08005dbb 	.word	0x08005dbb
 8005cbc:	08005dc9 	.word	0x08005dc9
 8005cc0:	08005dd7 	.word	0x08005dd7
 8005cc4:	08005de5 	.word	0x08005de5
 8005cc8:	08005df3 	.word	0x08005df3
 8005ccc:	08005e01 	.word	0x08005e01
 8005cd0:	08005e0f 	.word	0x08005e0f
 8005cd4:	08005e1d 	.word	0x08005e1d
 8005cd8:	08005e2b 	.word	0x08005e2b
 8005cdc:	08005e39 	.word	0x08005e39
 8005ce0:	08005e47 	.word	0x08005e47
 8005ce4:	08005e55 	.word	0x08005e55
 8005ce8:	08005e63 	.word	0x08005e63
 8005cec:	08005e71 	.word	0x08005e71
 8005cf0:	08005e7f 	.word	0x08005e7f
 8005cf4:	08005e8d 	.word	0x08005e8d
 8005cf8:	08005e9b 	.word	0x08005e9b
 8005cfc:	08005ea9 	.word	0x08005ea9
 8005d00:	08005eb7 	.word	0x08005eb7
 8005d04:	08005ec5 	.word	0x08005ec5
 8005d08:	08005ed3 	.word	0x08005ed3
 8005d0c:	08005ee1 	.word	0x08005ee1
 8005d10:	08005eef 	.word	0x08005eef
 8005d14:	08005efd 	.word	0x08005efd
 8005d18:	08005f0b 	.word	0x08005f0b
 8005d1c:	08005f19 	.word	0x08005f19
 8005d20:	08005f27 	.word	0x08005f27
 8005d24:	08005f35 	.word	0x08005f35
 8005d28:	08005f43 	.word	0x08005f43
 8005d2c:	08005f51 	.word	0x08005f51
 8005d30:	08005f5f 	.word	0x08005f5f
 8005d34:	08005f6d 	.word	0x08005f6d
 8005d38:	08005f7b 	.word	0x08005f7b
 8005d3c:	08005f89 	.word	0x08005f89
 8005d40:	08005f97 	.word	0x08005f97
 8005d44:	08005fa5 	.word	0x08005fa5
 8005d48:	08005fb3 	.word	0x08005fb3
 8005d4c:	08005fc1 	.word	0x08005fc1
 8005d50:	08005fcf 	.word	0x08005fcf
 8005d54:	08005fdd 	.word	0x08005fdd
 8005d58:	08005feb 	.word	0x08005feb
 8005d5c:	08005ff9 	.word	0x08005ff9
 8005d60:	08006007 	.word	0x08006007
 8005d64:	08006015 	.word	0x08006015
 8005d68:	08006023 	.word	0x08006023
 8005d6c:	08006031 	.word	0x08006031
 8005d70:	0800603f 	.word	0x0800603f
 8005d74:	0800604d 	.word	0x0800604d
 8005d78:	0800605b 	.word	0x0800605b
 8005d7c:	08006069 	.word	0x08006069
 8005d80:	08006077 	.word	0x08006077
 8005d84:	08006085 	.word	0x08006085
 8005d88:	08006093 	.word	0x08006093
 8005d8c:	080060a1 	.word	0x080060a1

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8005d96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	601a      	str	r2, [r3, #0]
	break;
 8005d9c:	e18e      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8005da4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	601a      	str	r2, [r3, #0]
	break;
 8005daa:	e187      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8005db2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	601a      	str	r2, [r3, #0]
	break;
 8005db8:	e180      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005dc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
	break;
 8005dc6:	e179      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005dce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	601a      	str	r2, [r3, #0]
	break;
 8005dd4:	e172      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8005ddc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]
	break;
 8005de2:	e16b      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005dea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	601a      	str	r2, [r3, #0]
	break;
 8005df0:	e164      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8005df8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	601a      	str	r2, [r3, #0]
	break;
 8005dfe:	e15d      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8005e06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	601a      	str	r2, [r3, #0]
	break;
 8005e0c:	e156      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005e14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	601a      	str	r2, [r3, #0]
	break;
 8005e1a:	e14f      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005e22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	601a      	str	r2, [r3, #0]
	break;
 8005e28:	e148      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8005e30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	601a      	str	r2, [r3, #0]
	break;
 8005e36:	e141      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8005e3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	601a      	str	r2, [r3, #0]
	break;
 8005e44:	e13a      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8005e4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	601a      	str	r2, [r3, #0]
	break;
 8005e52:	e133      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8005e5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	601a      	str	r2, [r3, #0]
	break;
 8005e60:	e12c      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005e68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
	break;
 8005e6e:	e125      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8005e76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
	break;
 8005e7c:	e11e      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005e84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	601a      	str	r2, [r3, #0]
	break;
 8005e8a:	e117      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8005e92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
	break;
 8005e98:	e110      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8005ea0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	601a      	str	r2, [r3, #0]
	break;
 8005ea6:	e109      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8005eae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	601a      	str	r2, [r3, #0]
	break;
 8005eb4:	e102      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 8005ebc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
	break;
 8005ec2:	e0fb      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8005eca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
	break;
 8005ed0:	e0f4      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8005ed8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	601a      	str	r2, [r3, #0]
	break;
 8005ede:	e0ed      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005ee6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	601a      	str	r2, [r3, #0]
	break;
 8005eec:	e0e6      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8005ef4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
	break;
 8005efa:	e0df      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8005f02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]
	break;
 8005f08:	e0d8      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8005f10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
	break;
 8005f16:	e0d1      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8005f1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	break;
 8005f24:	e0ca      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8005f2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	601a      	str	r2, [r3, #0]
	break;
 8005f32:	e0c3      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8005f3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	601a      	str	r2, [r3, #0]
	break;
 8005f40:	e0bc      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8005f48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	601a      	str	r2, [r3, #0]
	break;
 8005f4e:	e0b5      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005f56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
	break;
 8005f5c:	e0ae      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8005f64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
	break;
 8005f6a:	e0a7      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8005f72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
	break;
 8005f78:	e0a0      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8005f80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]
	break;
 8005f86:	e099      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8005f8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
	break;
 8005f94:	e092      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005f9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
	break;
 8005fa2:	e08b      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005faa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]
	break;
 8005fb0:	e084      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005fb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
	break;
 8005fbe:	e07d      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 8005fc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
	break;
 8005fcc:	e076      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8005fd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	601a      	str	r2, [r3, #0]
	break;
 8005fda:	e06f      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8005fe2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]
	break;
 8005fe8:	e068      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8005ff0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
	break;
 8005ff6:	e061      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8005ffe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
	break;
 8006004:	e05a      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800600c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	601a      	str	r2, [r3, #0]
	break;
 8006012:	e053      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800601a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	601a      	str	r2, [r3, #0]
	break;
 8006020:	e04c      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8006028:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
	break;
 800602e:	e045      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8006036:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]
	break;
 800603c:	e03e      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006044:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
	break;
 800604a:	e037      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006052:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	601a      	str	r2, [r3, #0]
	break;
 8006058:	e030      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006060:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]
	break;
 8006066:	e029      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800606e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
	break;
 8006074:	e022      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800607c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
	break;
 8006082:	e01b      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800608a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	601a      	str	r2, [r3, #0]
	break;
 8006090:	e014      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006098:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
	break;
 800609e:	e00d      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80060a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	601a      	str	r2, [r3, #0]
	break;
 80060ac:	e006      	b.n	80060bc <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80060b4:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80060b6:	23fc      	movs	r3, #252	; 0xfc
 80060b8:	75fb      	strb	r3, [r7, #23]
	break;
 80060ba:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80060bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80060d4:	2300      	movs	r3, #0
 80060d6:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2208      	movs	r2, #8
 80060dc:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	220b      	movs	r2, #11
 80060e2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060ea:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80060f2:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80060fa:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006102:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006104:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2212      	movs	r2, #18
 800612a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	220f      	movs	r2, #15
 8006130:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800613e:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	220c      	movs	r2, #12
 8006144:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006146:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b084      	sub	sp, #16
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
 800615e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006160:	2300      	movs	r3, #0
 8006162:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	895b      	ldrh	r3, [r3, #10]
 8006168:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	895b      	ldrh	r3, [r3, #10]
 8006186:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2200      	movs	r2, #0
 80061a4:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2240      	movs	r2, #64	; 0x40
 80061aa:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10d      	bne.n	80061d0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d108      	bne.n	80061d0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d103      	bne.n	80061d0 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2200      	movs	r2, #0
 80061cc:	741a      	strb	r2, [r3, #16]
 80061ce:	e002      	b.n	80061d6 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2201      	movs	r2, #1
 80061d4:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 80061d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d114      	bne.n	8006208 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d110      	bne.n	8006208 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	6818      	ldr	r0, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	7d1b      	ldrb	r3, [r3, #20]
 80061fa:	f000 ffc9 	bl	8007190 <VL53L1_calc_range_ignore_threshold>
 80061fe:	4603      	mov	r3, r0
 8006200:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	82da      	strh	r2, [r3, #22]
 8006206:	e002      	b.n	800620e <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2200      	movs	r2, #0
 800620c:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800620e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006222:	2300      	movs	r3, #0
 8006224:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800622c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006234:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800623c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006244:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2208      	movs	r2, #8
 800624a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2228      	movs	r2, #40	; 0x28
 8006250:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2209      	movs	r2, #9
 8006256:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006258:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f248 0203 	movw	r2, #32771	; 0x8003
 800627a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f248 0201 	movw	r2, #32769	; 0x8001
 8006282:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f248 0241 	movw	r2, #32833	; 0x8041
 800628a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	220e      	movs	r2, #14
 8006290:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	220a      	movs	r2, #10
 8006296:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2206      	movs	r2, #6
 800629c:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	220e      	movs	r2, #14
 80062a2:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	220a      	movs	r2, #10
 80062a8:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2206      	movs	r2, #6
 80062ae:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2221      	movs	r2, #33	; 0x21
 80062ba:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80062ce:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80062d6:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80062de:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	22c0      	movs	r2, #192	; 0xc0
 80062e4:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	22c0      	movs	r2, #192	; 0xc0
 80062ea:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	22c0      	movs	r2, #192	; 0xc0
 80062f0:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2208      	movs	r2, #8
 80062f6:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2210      	movs	r2, #16
 80062fc:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2201      	movs	r2, #1
 8006302:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2202      	movs	r2, #2
 800630a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2202      	movs	r2, #2
 800631a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800632c:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006334:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f248 0230 	movw	r2, #32816	; 0x8030
 800633c:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006344:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800634c:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006354:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f24f 6218 	movw	r2, #63000	; 0xf618
 800635c:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006364:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800636c:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006374:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8006376:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800637a:	4618      	mov	r0, r3
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006386:	b480      	push	{r7}
 8006388:	b087      	sub	sp, #28
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006394:	2300      	movs	r3, #0
 8006396:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800639e:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2200      	movs	r2, #0
 80063bc:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2211      	movs	r2, #17
 80063e0:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2202      	movs	r2, #2
 80063e6:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2202      	movs	r2, #2
 80063f2:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2208      	movs	r2, #8
 80063f8:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8006410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006412:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2201      	movs	r2, #1
 800641e:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	22ff      	movs	r2, #255	; 0xff
 8006436:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643a:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2220      	movs	r2, #32
 800646a:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	220b      	movs	r2, #11
 8006470:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	2202      	movs	r2, #2
 800647e:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	220d      	movs	r2, #13
 8006484:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2201      	movs	r2, #1
 8006498:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2200      	movs	r2, #0
 800649e:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2200      	movs	r2, #0
 80064a4:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 80064ac:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2200      	movs	r2, #0
 80064b2:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2238      	movs	r2, #56	; 0x38
 80064b8:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	22ff      	movs	r2, #255	; 0xff
 80064be:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2201      	movs	r2, #1
 80064c4:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	221a      	movs	r2, #26
 80064d0:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	22cc      	movs	r2, #204	; 0xcc
 80064e8:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	220b      	movs	r2, #11
 80064ee:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	22f5      	movs	r2, #245	; 0xf5
 80064fa:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2209      	movs	r2, #9
 8006500:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800650a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650c:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2208      	movs	r2, #8
 8006516:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2278      	movs	r2, #120	; 0x78
 800651c:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2201      	movs	r2, #1
 800652e:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2200      	movs	r2, #0
 800653a:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2200      	movs	r2, #0
 8006540:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	220b      	movs	r2, #11
 8006550:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2209      	movs	r2, #9
 8006556:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2201      	movs	r2, #1
 800656c:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800656e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006570:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	22c7      	movs	r2, #199	; 0xc7
 8006586:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	22ff      	movs	r2, #255	; 0xff
 800658c:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	22db      	movs	r2, #219	; 0xdb
 8006592:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2202      	movs	r2, #2
 8006598:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	2200      	movs	r2, #0
 800659e:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	2201      	movs	r2, #1
 80065a4:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	2201      	movs	r2, #1
 80065aa:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	2221      	movs	r2, #33	; 0x21
 80065b0:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 80065b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b088      	sub	sp, #32
 80065c6:	af02      	add	r7, sp, #8
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80065d0:	2300      	movs	r3, #0
 80065d2:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f7ff fecf 	bl	8006386 <VL53L1_preset_mode_standard_ranging>
 80065e8:	4603      	mov	r3, r0
 80065ea:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80065ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d121      	bne.n	8006638 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2207      	movs	r2, #7
 80065f8:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2205      	movs	r2, #5
 80065fe:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8006600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006602:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2208      	movs	r2, #8
 8006614:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2238      	movs	r2, #56	; 0x38
 800661a:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2207      	movs	r2, #7
 8006620:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2205      	movs	r2, #5
 8006626:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006638:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b088      	sub	sp, #32
 8006648:	af02      	add	r7, sp, #8
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006652:	2300      	movs	r3, #0
 8006654:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	6a3b      	ldr	r3, [r7, #32]
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	68b9      	ldr	r1, [r7, #8]
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7ff fe8e 	bl	8006386 <VL53L1_preset_mode_standard_ranging>
 800666a:	4603      	mov	r3, r0
 800666c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800666e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d121      	bne.n	80066ba <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	220f      	movs	r2, #15
 800667a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	220d      	movs	r2, #13
 8006680:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2208      	movs	r2, #8
 8006696:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	22b8      	movs	r2, #184	; 0xb8
 800669c:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	220f      	movs	r2, #15
 80066a2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	220d      	movs	r2, #13
 80066a8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80066ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b088      	sub	sp, #32
 80066ca:	af02      	add	r7, sp, #8
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	68b9      	ldr	r1, [r7, #8]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff fe4d 	bl	8006386 <VL53L1_preset_mode_standard_ranging>
 80066ec:	4603      	mov	r3, r0
 80066ee:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80066f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d105      	bne.n	8006704 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2202      	movs	r2, #2
 80066fc:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	223b      	movs	r2, #59	; 0x3b
 8006702:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006704:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800671e:	2300      	movs	r3, #0
 8006720:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	9301      	str	r3, [sp, #4]
 8006726:	6a3b      	ldr	r3, [r7, #32]
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff fe28 	bl	8006386 <VL53L1_preset_mode_standard_ranging>
 8006736:	4603      	mov	r3, r0
 8006738:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800673a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d105      	bne.n	800674e <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2202      	movs	r2, #2
 8006746:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	225b      	movs	r2, #91	; 0x5b
 800674c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800674e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af02      	add	r7, sp, #8
 8006760:	60f8      	str	r0, [r7, #12]
 8006762:	60b9      	str	r1, [r7, #8]
 8006764:	607a      	str	r2, [r7, #4]
 8006766:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006768:	2300      	movs	r3, #0
 800676a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	9301      	str	r3, [sp, #4]
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f7ff fe03 	bl	8006386 <VL53L1_preset_mode_standard_ranging>
 8006780:	4603      	mov	r3, r0
 8006782:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d11a      	bne.n	80067c2 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	22b1      	movs	r2, #177	; 0xb1
 800679c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	22d4      	movs	r2, #212	; 0xd4
 80067a8:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80067b0:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	2240      	movs	r2, #64	; 0x40
 80067c0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80067c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b088      	sub	sp, #32
 80067d2:	af02      	add	r7, sp, #8
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	607a      	str	r2, [r7, #4]
 80067da:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80067dc:	2300      	movs	r3, #0
 80067de:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff fee7 	bl	80065c2 <VL53L1_preset_mode_standard_ranging_short_range>
 80067f4:	4603      	mov	r3, r0
 80067f6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80067f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d11a      	bne.n	8006836 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2284      	movs	r2, #132	; 0x84
 8006810:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	22b1      	movs	r2, #177	; 0xb1
 800681c:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006824:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	2240      	movs	r2, #64	; 0x40
 8006834:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006836:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b088      	sub	sp, #32
 8006846:	af02      	add	r7, sp, #8
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	607a      	str	r2, [r7, #4]
 800684e:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006850:	2300      	movs	r3, #0
 8006852:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	68b9      	ldr	r1, [r7, #8]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f7ff feee 	bl	8006644 <VL53L1_preset_mode_standard_ranging_long_range>
 8006868:	4603      	mov	r3, r0
 800686a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800686c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d11a      	bne.n	80068aa <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2200      	movs	r2, #0
 8006878:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2297      	movs	r2, #151	; 0x97
 8006884:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	22b1      	movs	r2, #177	; 0xb1
 8006890:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006898:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80068a4:	6a3b      	ldr	r3, [r7, #32]
 80068a6:	2240      	movs	r2, #64	; 0x40
 80068a8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80068aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b088      	sub	sp, #32
 80068ba:	af02      	add	r7, sp, #8
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	68b9      	ldr	r1, [r7, #8]
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f7ff ff3f 	bl	800675a <VL53L1_preset_mode_timed_ranging>
 80068dc:	4603      	mov	r3, r0
 80068de:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80068e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80068e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	68b8      	ldr	r0, [r7, #8]
 80068ee:	f000 fe7b 	bl	80075e8 <VL53L1_config_low_power_auto_mode>
 80068f2:	4603      	mov	r3, r0
 80068f4:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80068f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b088      	sub	sp, #32
 8006906:	af02      	add	r7, sp, #8
 8006908:	60f8      	str	r0, [r7, #12]
 800690a:	60b9      	str	r1, [r7, #8]
 800690c:	607a      	str	r2, [r7, #4]
 800690e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006910:	2300      	movs	r3, #0
 8006912:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f7ff ff53 	bl	80067ce <VL53L1_preset_mode_timed_ranging_short_range>
 8006928:	4603      	mov	r3, r0
 800692a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800692c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d106      	bne.n	8006942 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8006934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	68b8      	ldr	r0, [r7, #8]
 800693a:	f000 fe55 	bl	80075e8 <VL53L1_config_low_power_auto_mode>
 800693e:	4603      	mov	r3, r0
 8006940:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b088      	sub	sp, #32
 8006952:	af02      	add	r7, sp, #8
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800695c:	2300      	movs	r3, #0
 800695e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff ff67 	bl	8006842 <VL53L1_preset_mode_timed_ranging_long_range>
 8006974:	4603      	mov	r3, r0
 8006976:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8006978:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d106      	bne.n	800698e <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8006980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006982:	6839      	ldr	r1, [r7, #0]
 8006984:	68b8      	ldr	r0, [r7, #8]
 8006986:	f000 fe2f 	bl	80075e8 <VL53L1_config_low_power_auto_mode>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800698e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b088      	sub	sp, #32
 800699e:	af02      	add	r7, sp, #8
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	607a      	str	r2, [r7, #4]
 80069a6:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	6a3b      	ldr	r3, [r7, #32]
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f7ff fce3 	bl	8006386 <VL53L1_preset_mode_standard_ranging>
 80069c0:	4603      	mov	r3, r0
 80069c2:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80069c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d116      	bne.n	80069fa <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	22b1      	movs	r2, #177	; 0xb1
 80069dc:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	22d4      	movs	r2, #212	; 0xd4
 80069e8:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2210      	movs	r2, #16
 80069f8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 80069fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b088      	sub	sp, #32
 8006a0a:	af02      	add	r7, sp, #8
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	60b9      	str	r1, [r7, #8]
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	9301      	str	r3, [sp, #4]
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f7ff fcad 	bl	8006386 <VL53L1_preset_mode_standard_ranging>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006a30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b085      	sub	sp, #20
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	220d      	movs	r2, #13
 8006a6a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f640 028e 	movw	r2, #2190	; 0x88e
 8006a74:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006a76:	bf00      	nop
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b085      	sub	sp, #20
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	332c      	adds	r3, #44	; 0x2c
 8006a96:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	78fa      	ldrb	r2, [r7, #3]
 8006a9c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2200      	movs	r2, #0
 8006aae:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	78fa      	ldrb	r2, [r7, #3]
 8006ab4:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	71da      	strb	r2, [r3, #7]

}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	332c      	adds	r3, #44	; 0x2c
 8006ae8:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8006af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10c      	bne.n	8006b12 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2203      	movs	r2, #3
 8006afc:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2202      	movs	r2, #2
 8006b08:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	71da      	strb	r2, [r3, #7]
 8006b10:	e060      	b.n	8006bd4 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	795b      	ldrb	r3, [r3, #5]
 8006b16:	2bff      	cmp	r3, #255	; 0xff
 8006b18:	d103      	bne.n	8006b22 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2280      	movs	r2, #128	; 0x80
 8006b1e:	715a      	strb	r2, [r3, #5]
 8006b20:	e005      	b.n	8006b2e <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	795b      	ldrb	r3, [r3, #5]
 8006b26:	3301      	adds	r3, #1
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	799b      	ldrb	r3, [r3, #6]
 8006b32:	f083 0302 	eor.w	r3, r3, #2
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	791b      	ldrb	r3, [r3, #4]
 8006b40:	3b03      	subs	r3, #3
 8006b42:	2b05      	cmp	r3, #5
 8006b44:	d839      	bhi.n	8006bba <VL53L1_update_ll_driver_rd_state+0xe6>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <VL53L1_update_ll_driver_rd_state+0x78>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006b65 	.word	0x08006b65
 8006b50:	08006bbb 	.word	0x08006bbb
 8006b54:	08006bbb 	.word	0x08006bbb
 8006b58:	08006b8f 	.word	0x08006b8f
 8006b5c:	08006b9d 	.word	0x08006b9d
 8006b60:	08006ba5 	.word	0x08006ba5

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	dd03      	ble.n	8006b7a <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2206      	movs	r2, #6
 8006b76:	711a      	strb	r2, [r3, #4]
 8006b78:	e002      	b.n	8006b80 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2208      	movs	r2, #8
 8006b7e:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	71da      	strb	r2, [r3, #7]

		break;
 8006b8c:	e022      	b.n	8006bd4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2208      	movs	r2, #8
 8006b98:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006b9a:	e01b      	b.n	8006bd4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2208      	movs	r2, #8
 8006ba0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006ba2:	e017      	b.n	8006bd4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	79db      	ldrb	r3, [r3, #7]
 8006ba8:	f083 0301 	eor.w	r3, r3, #1
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2208      	movs	r2, #8
 8006bb6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006bb8:	e00c      	b.n	8006bd4 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2203      	movs	r2, #3
 8006bbe:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	71da      	strb	r2, [r3, #7]

		break;
 8006bd2:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006bd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	371c      	adds	r7, #28
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b089      	sub	sp, #36	; 0x24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	332c      	adds	r3, #44	; 0x2c
 8006bf8:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8006c00:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8006c12:	f003 031f 	and.w	r3, r3, #31
 8006c16:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	78db      	ldrb	r3, [r3, #3]
 8006c1c:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8006c22:	111b      	asrs	r3, r3, #4
 8006c24:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d017      	beq.n	8006c6a <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	791b      	ldrb	r3, [r3, #4]
 8006c3e:	2b06      	cmp	r3, #6
 8006c40:	d105      	bne.n	8006c4e <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	2b12      	cmp	r3, #18
 8006c46:	d010      	beq.n	8006c6a <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8006c48:	23ef      	movs	r3, #239	; 0xef
 8006c4a:	77fb      	strb	r3, [r7, #31]
 8006c4c:	e00d      	b.n	8006c6a <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	795b      	ldrb	r3, [r3, #5]
 8006c52:	7bba      	ldrb	r2, [r7, #14]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d001      	beq.n	8006c5c <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8006c58:	23ee      	movs	r3, #238	; 0xee
 8006c5a:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	799b      	ldrb	r3, [r3, #6]
 8006c60:	7b7a      	ldrb	r2, [r7, #13]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d001      	beq.n	8006c6a <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8006c66:	23ed      	movs	r3, #237	; 0xed
 8006c68:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8006c6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3724      	adds	r7, #36	; 0x24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b087      	sub	sp, #28
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	332c      	adds	r3, #44	; 0x2c
 8006c8e:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8006c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10c      	bne.n	8006cb8 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2202      	movs	r2, #2
 8006cae:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	70da      	strb	r2, [r3, #3]
 8006cb6:	e03e      	b.n	8006d36 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2bff      	cmp	r3, #255	; 0xff
 8006cbe:	d103      	bne.n	8006cc8 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2280      	movs	r2, #128	; 0x80
 8006cc4:	705a      	strb	r2, [r3, #1]
 8006cc6:	e005      	b.n	8006cd4 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	3301      	adds	r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	789b      	ldrb	r3, [r3, #2]
 8006cd8:	f083 0302 	eor.w	r3, r3, #2
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d002      	beq.n	8006cf0 <VL53L1_update_ll_driver_cfg_state+0x76>
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d00e      	beq.n	8006d0c <VL53L1_update_ll_driver_cfg_state+0x92>
 8006cee:	e015      	b.n	8006d1c <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	78db      	ldrb	r3, [r3, #3]
 8006cf4:	f083 0301 	eor.w	r3, r3, #1
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2204      	movs	r2, #4
 8006d08:	701a      	strb	r2, [r3, #0]
		break;
 8006d0a:	e014      	b.n	8006d36 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	78db      	ldrb	r3, [r3, #3]
 8006d10:	f083 0301 	eor.w	r3, r3, #1
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	70da      	strb	r2, [r3, #3]

		break;
 8006d1a:	e00c      	b.n	8006d36 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2203      	movs	r2, #3
 8006d20:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	70da      	strb	r2, [r3, #3]

		break;
 8006d34:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006d36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7c1a      	ldrb	r2, [r3, #16]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	7c52      	ldrb	r2, [r2, #17]
 8006d60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	3302      	adds	r3, #2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	7c92      	ldrb	r2, [r2, #18]
 8006d6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	3303      	adds	r3, #3
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	7cd2      	ldrb	r2, [r2, #19]
 8006d74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	7d12      	ldrb	r2, [r2, #20]
 8006d7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	3305      	adds	r3, #5
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	7d52      	ldrb	r2, [r2, #21]
 8006d88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	3306      	adds	r3, #6
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	7d92      	ldrb	r2, [r2, #22]
 8006d92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	3307      	adds	r3, #7
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	7dd2      	ldrb	r2, [r2, #23]
 8006d9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	3308      	adds	r3, #8
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	7e12      	ldrb	r2, [r2, #24]
 8006da6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	3309      	adds	r3, #9
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7e52      	ldrb	r2, [r2, #25]
 8006db0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	330a      	adds	r3, #10
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	7e92      	ldrb	r2, [r2, #26]
 8006dba:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	330b      	adds	r3, #11
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	7ed2      	ldrb	r2, [r2, #27]
 8006dc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	7f12      	ldrb	r2, [r2, #28]
 8006dce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	330d      	adds	r3, #13
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	7f52      	ldrb	r2, [r2, #29]
 8006dd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	330e      	adds	r3, #14
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	7f92      	ldrb	r2, [r2, #30]
 8006de2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	330f      	adds	r3, #15
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	7fd2      	ldrb	r2, [r2, #31]
 8006dec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	3310      	adds	r3, #16
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006df8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	3311      	adds	r3, #17
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006e04:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	3312      	adds	r3, #18
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8006e10:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	3313      	adds	r3, #19
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8006e1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	3314      	adds	r3, #20
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006e28:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	3315      	adds	r3, #21
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006e34:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	3316      	adds	r3, #22
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8006e40:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	3317      	adds	r3, #23
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8006e4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	3318      	adds	r3, #24
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8006e58:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	3319      	adds	r3, #25
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8006e64:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	331a      	adds	r3, #26
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8006e70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	331b      	adds	r3, #27
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8006e7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	331c      	adds	r3, #28
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006e88:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	331d      	adds	r3, #29
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006e94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	331e      	adds	r3, #30
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8006ea0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	331f      	adds	r3, #31
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8006eac:	701a      	strb	r2, [r3, #0]
}
 8006eae:	bf00      	nop
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	603a      	str	r2, [r7, #0]
 8006ec4:	80fb      	strh	r3, [r7, #6]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	81fb      	strh	r3, [r7, #14]
 8006eda:	e00e      	b.n	8006efa <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8006edc:	88ba      	ldrh	r2, [r7, #4]
 8006ede:	89fb      	ldrh	r3, [r7, #14]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	89ba      	ldrh	r2, [r7, #12]
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8006eee:	89bb      	ldrh	r3, [r7, #12]
 8006ef0:	0a1b      	lsrs	r3, r3, #8
 8006ef2:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8006ef4:	89fb      	ldrh	r3, [r7, #14]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	81fb      	strh	r3, [r7, #14]
 8006efa:	89fa      	ldrh	r2, [r7, #14]
 8006efc:	88bb      	ldrh	r3, [r7, #4]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d3ec      	bcc.n	8006edc <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	6039      	str	r1, [r7, #0]
 8006f1a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8006f20:	e00a      	b.n	8006f38 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8006f22:	89fb      	ldrh	r3, [r7, #14]
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	b21a      	sxth	r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	1c59      	adds	r1, r3, #1
 8006f2c:	6039      	str	r1, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	b21b      	sxth	r3, r3
 8006f32:	4313      	orrs	r3, r2
 8006f34:	b21b      	sxth	r3, r3
 8006f36:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	1e5a      	subs	r2, r3, #1
 8006f3c:	80fa      	strh	r2, [r7, #6]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1ef      	bne.n	8006f22 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8006f42:	89fb      	ldrh	r3, [r7, #14]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	603a      	str	r2, [r7, #0]
 8006f5a:	80fb      	strh	r3, [r7, #6]
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8006f64:	2300      	movs	r3, #0
 8006f66:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8006f68:	88fb      	ldrh	r3, [r7, #6]
 8006f6a:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	81fb      	strh	r3, [r7, #14]
 8006f70:	e00f      	b.n	8006f92 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8006f72:	88ba      	ldrh	r2, [r7, #4]
 8006f74:	89fb      	ldrh	r3, [r7, #14]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	89ba      	ldrh	r2, [r7, #12]
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8006f84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006f88:	121b      	asrs	r3, r3, #8
 8006f8a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8006f8c:	89fb      	ldrh	r3, [r7, #14]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	81fb      	strh	r3, [r7, #14]
 8006f92:	89fa      	ldrh	r2, [r7, #14]
 8006f94:	88bb      	ldrh	r3, [r7, #4]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d3eb      	bcc.n	8006f72 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8006f9a:	bf00      	nop
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	6039      	str	r1, [r7, #0]
 8006fb2:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	b25b      	sxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	da0e      	bge.n	8006fe0 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8006fc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fc6:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8006fc8:	e00a      	b.n	8006fe0 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8006fca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	b21a      	sxth	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	1c59      	adds	r1, r3, #1
 8006fd6:	6039      	str	r1, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	b21b      	sxth	r3, r3
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	1e5a      	subs	r2, r3, #1
 8006fe4:	80fa      	strh	r2, [r7, #6]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1ef      	bne.n	8006fca <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 8006fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr

08006ffa <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8006ffa:	b480      	push	{r7}
 8006ffc:	b087      	sub	sp, #28
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	460b      	mov	r3, r1
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8007014:	2300      	movs	r3, #0
 8007016:	82fb      	strh	r3, [r7, #22]
 8007018:	e00e      	b.n	8007038 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800701a:	897a      	ldrh	r2, [r7, #10]
 800701c:	8afb      	ldrh	r3, [r7, #22]
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	4413      	add	r3, r2
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	b2d2      	uxtb	r2, r2
 800702a:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	0a1b      	lsrs	r3, r3, #8
 8007030:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8007032:	8afb      	ldrh	r3, [r7, #22]
 8007034:	3301      	adds	r3, #1
 8007036:	82fb      	strh	r3, [r7, #22]
 8007038:	8afa      	ldrh	r2, [r7, #22]
 800703a:	897b      	ldrh	r3, [r7, #10]
 800703c:	429a      	cmp	r2, r3
 800703e:	d3ec      	bcc.n	800701a <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8007040:	bf00      	nop
 8007042:	bf00      	nop
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	4603      	mov	r3, r0
 8007056:	6039      	str	r1, [r7, #0]
 8007058:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800705e:	e007      	b.n	8007070 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	021a      	lsls	r2, r3, #8
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	1c59      	adds	r1, r3, #1
 8007068:	6039      	str	r1, [r7, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8007070:	88fb      	ldrh	r3, [r7, #6]
 8007072:	1e5a      	subs	r2, r3, #1
 8007074:	80fa      	strh	r2, [r7, #6]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f2      	bne.n	8007060 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800707a:	68fb      	ldr	r3, [r7, #12]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	6039      	str	r1, [r7, #0]
 8007092:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b25b      	sxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	da0b      	bge.n	80070ba <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80070a2:	f04f 33ff 	mov.w	r3, #4294967295
 80070a6:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 80070a8:	e007      	b.n	80070ba <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	021a      	lsls	r2, r3, #8
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	1c59      	adds	r1, r3, #1
 80070b2:	6039      	str	r1, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	1e5a      	subs	r2, r3, #1
 80070be:	80fa      	strh	r2, [r7, #6]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1f2      	bne.n	80070aa <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 80070c4:	68fb      	ldr	r3, [r7, #12]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	78fa      	ldrb	r2, [r7, #3]
 80070ea:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80070f4:	461a      	mov	r2, r3
 80070f6:	2183      	movs	r1, #131	; 0x83
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 fd0d 	bl	8008b18 <VL53L1_WrByte>
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8007102:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b084      	sub	sp, #16
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800711a:	2101      	movs	r1, #1
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7ff ffd8 	bl	80070d2 <VL53L1_set_powerforce_register>
 8007122:	4603      	mov	r3, r0
 8007124:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 8007126:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b086      	sub	sp, #24
 8007136:	af00      	add	r7, sp, #0
 8007138:	4603      	mov	r3, r0
 800713a:	460a      	mov	r2, r1
 800713c:	80fb      	strh	r3, [r7, #6]
 800713e:	4613      	mov	r3, r2
 8007140:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	4618      	mov	r0, r3
 8007152:	f000 faa7 	bl	80076a4 <VL53L1_calc_pll_period_us>
 8007156:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8007158:	797b      	ldrb	r3, [r7, #5]
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fab6 	bl	80076cc <VL53L1_decode_vcsel_period>
 8007160:	4603      	mov	r3, r0
 8007162:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8007164:	697a      	ldr	r2, [r7, #20]
 8007166:	4613      	mov	r3, r2
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	4413      	add	r3, r2
 800716c:	021b      	lsls	r3, r3, #8
 800716e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	099b      	lsrs	r3, r3, #6
 8007174:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8007176:	7cfa      	ldrb	r2, [r7, #19]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	fb02 f303 	mul.w	r3, r2, r3
 800717e:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	099b      	lsrs	r3, r3, #6
 8007184:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8007186:	68fb      	ldr	r3, [r7, #12]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8007190:	b480      	push	{r7}
 8007192:	b089      	sub	sp, #36	; 0x24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	4608      	mov	r0, r1
 800719a:	4611      	mov	r1, r2
 800719c:	461a      	mov	r2, r3
 800719e:	4603      	mov	r3, r0
 80071a0:	817b      	strh	r3, [r7, #10]
 80071a2:	460b      	mov	r3, r1
 80071a4:	813b      	strh	r3, [r7, #8]
 80071a6:	4613      	mov	r3, r2
 80071a8:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	4a23      	ldr	r2, [pc, #140]	; (8007250 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80071c4:	fb82 1203 	smull	r1, r2, r2, r3
 80071c8:	1192      	asrs	r2, r2, #6
 80071ca:	17db      	asrs	r3, r3, #31
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 80071d0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	da03      	bge.n	80071e0 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 80071d8:	897b      	ldrh	r3, [r7, #10]
 80071da:	425b      	negs	r3, r3
 80071dc:	b29b      	uxth	r3, r3
 80071de:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 80071e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	da03      	bge.n	80071f0 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 80071e8:	893b      	ldrh	r3, [r7, #8]
 80071ea:	425b      	negs	r3, r3
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 80071f0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80071f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80071f8:	4413      	add	r3, r2
 80071fa:	015b      	lsls	r3, r3, #5
 80071fc:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	4a13      	ldr	r2, [pc, #76]	; (8007250 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8007202:	fb82 1203 	smull	r1, r2, r2, r3
 8007206:	1192      	asrs	r2, r2, #6
 8007208:	17db      	asrs	r3, r3, #31
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	4413      	add	r3, r2
 8007214:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8007216:	79fa      	ldrb	r2, [r7, #7]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	fb02 f303 	mul.w	r3, r2, r3
 800721e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	3310      	adds	r3, #16
 8007224:	2b00      	cmp	r3, #0
 8007226:	da00      	bge.n	800722a <VL53L1_calc_range_ignore_threshold+0x9a>
 8007228:	331f      	adds	r3, #31
 800722a:	115b      	asrs	r3, r3, #5
 800722c:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007234:	db03      	blt.n	800723e <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8007236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800723a:	83fb      	strh	r3, [r7, #30]
 800723c:	e001      	b.n	8007242 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8007242:	8bfb      	ldrh	r3, [r7, #30]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3724      	adds	r7, #36	; 0x24
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	10624dd3 	.word	0x10624dd3

08007254 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	031a      	lsls	r2, r3, #12
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	441a      	add	r2, r3
	timeout_mclks   =
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007272:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8007274:	68fb      	ldr	r3, [r7, #12]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff ffdc 	bl	8007254 <VL53L1_calc_timeout_mclks>
 800729c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 f85e 	bl	8007360 <VL53L1_encode_timeout>
 80072a4:	4603      	mov	r3, r0
 80072a6:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 80072a8:	897b      	ldrh	r3, [r7, #10]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 80072b2:	b4f0      	push	{r4, r5, r6, r7}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 80072bc:	2300      	movs	r3, #0
 80072be:	617b      	str	r3, [r7, #20]
	uint64_t tmp            = 0;
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f04f 0100 	mov.w	r1, #0
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f04f 0300 	mov.w	r3, #0
 80072dc:	fb02 fc01 	mul.w	ip, r2, r1
 80072e0:	fb00 f603 	mul.w	r6, r0, r3
 80072e4:	4466      	add	r6, ip
 80072e6:	fba0 2302 	umull	r2, r3, r0, r2
 80072ea:	18f1      	adds	r1, r6, r3
 80072ec:	460b      	mov	r3, r1
 80072ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80072f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80072f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072fa:	f512 6400 	adds.w	r4, r2, #2048	; 0x800
 80072fe:	f143 0500 	adc.w	r5, r3, #0
 8007302:	e9c7 4502 	strd	r4, r5, [r7, #8]
	tmp  = tmp >> 12;
 8007306:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800730a:	f04f 0200 	mov.w	r2, #0
 800730e:	f04f 0300 	mov.w	r3, #0
 8007312:	0b02      	lsrs	r2, r0, #12
 8007314:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007318:	0b0b      	lsrs	r3, r1, #12
 800731a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8007322:	697b      	ldr	r3, [r7, #20]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3718      	adds	r7, #24
 8007328:	46bd      	mov	sp, r7
 800732a:	bcf0      	pop	{r4, r5, r6, r7}
 800732c:	4770      	bx	lr

0800732e <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	4603      	mov	r3, r0
 8007336:	6039      	str	r1, [r7, #0]
 8007338:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8007342:	88fb      	ldrh	r3, [r7, #6]
 8007344:	4618      	mov	r0, r3
 8007346:	f000 f837 	bl	80073b8 <VL53L1_decode_timeout>
 800734a:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f7ff ffaf 	bl	80072b2 <VL53L1_calc_timeout_us>
 8007354:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8007356:	68bb      	ldr	r3, [r7, #8]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8007360:	b480      	push	{r7}
 8007362:	b087      	sub	sp, #28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d017      	beq.n	80073aa <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3b01      	subs	r3, #1
 800737e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007380:	e005      	b.n	800738e <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007388:	89fb      	ldrh	r3, [r7, #14]
 800738a:	3301      	adds	r3, #1
 800738c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f4      	bne.n	8007382 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007398:	89fb      	ldrh	r3, [r7, #14]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80073a6:	4413      	add	r3, r2
 80073a8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80073aa:	8afb      	ldrh	r3, [r7, #22]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	371c      	adds	r7, #28
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80073c6:	88fb      	ldrh	r3, [r7, #6]
 80073c8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	0a12      	lsrs	r2, r2, #8
 80073ce:	b292      	uxth	r2, r2
 80073d0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80073d6:	68fb      	ldr	r3, [r7, #12]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
 80073f0:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80073f2:	2300      	movs	r3, #0
 80073f4:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80073fe:	2300      	movs	r3, #0
 8007400:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8007402:	887b      	ldrh	r3, [r7, #2]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8007408:	23f1      	movs	r3, #241	; 0xf1
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e05d      	b.n	80074ca <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	799a      	ldrb	r2, [r3, #6]
 8007412:	887b      	ldrh	r3, [r7, #2]
 8007414:	4611      	mov	r1, r2
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff fe8b 	bl	8007132 <VL53L1_calc_macro_period_us>
 800741c:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800741e:	6979      	ldr	r1, [r7, #20]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff ff17 	bl	8007254 <VL53L1_calc_timeout_mclks>
 8007426:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	2bff      	cmp	r3, #255	; 0xff
 800742c:	d901      	bls.n	8007432 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800742e:	23ff      	movs	r3, #255	; 0xff
 8007430:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800743a:	6979      	ldr	r1, [r7, #20]
 800743c:	68b8      	ldr	r0, [r7, #8]
 800743e:	f7ff ff20 	bl	8007282 <VL53L1_calc_encoded_timeout>
 8007442:	4603      	mov	r3, r0
 8007444:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007446:	8a7b      	ldrh	r3, [r7, #18]
 8007448:	0a1b      	lsrs	r3, r3, #8
 800744a:	b29b      	uxth	r3, r3
 800744c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007450:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007452:	8a7b      	ldrh	r3, [r7, #18]
 8007454:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800745a:	6979      	ldr	r1, [r7, #20]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff ff10 	bl	8007282 <VL53L1_calc_encoded_timeout>
 8007462:	4603      	mov	r3, r0
 8007464:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007466:	8a7b      	ldrh	r3, [r7, #18]
 8007468:	0a1b      	lsrs	r3, r3, #8
 800746a:	b29b      	uxth	r3, r3
 800746c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007470:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007472:	8a7b      	ldrh	r3, [r7, #18]
 8007474:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	7a5a      	ldrb	r2, [r3, #9]
 800747e:	887b      	ldrh	r3, [r7, #2]
 8007480:	4611      	mov	r1, r2
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff fe55 	bl	8007132 <VL53L1_calc_macro_period_us>
 8007488:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800748a:	6979      	ldr	r1, [r7, #20]
 800748c:	68b8      	ldr	r0, [r7, #8]
 800748e:	f7ff fef8 	bl	8007282 <VL53L1_calc_encoded_timeout>
 8007492:	4603      	mov	r3, r0
 8007494:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007496:	8a7b      	ldrh	r3, [r7, #18]
 8007498:	0a1b      	lsrs	r3, r3, #8
 800749a:	b29b      	uxth	r3, r3
 800749c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80074a2:	8a7b      	ldrh	r3, [r7, #18]
 80074a4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 80074aa:	6979      	ldr	r1, [r7, #20]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff fee8 	bl	8007282 <VL53L1_calc_encoded_timeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80074b6:	8a7b      	ldrh	r3, [r7, #18]
 80074b8:	0a1b      	lsrs	r3, r3, #8
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80074c2:	8a7b      	ldrh	r3, [r7, #18]
 80074c4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80074ca:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	4603      	mov	r3, r0
 80074de:	603a      	str	r2, [r7, #0]
 80074e0:	71fb      	strb	r3, [r7, #7]
 80074e2:	460b      	mov	r3, r1
 80074e4:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 80074e6:	79fb      	ldrb	r3, [r7, #7]
 80074e8:	2b07      	cmp	r3, #7
 80074ea:	d90a      	bls.n	8007502 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 80074ec:	79bb      	ldrb	r3, [r7, #6]
 80074ee:	00db      	lsls	r3, r3, #3
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	79fb      	ldrb	r3, [r7, #7]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	3b71      	subs	r3, #113	; 0x71
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8007500:	e00a      	b.n	8007518 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8007502:	79bb      	ldrb	r3, [r7, #6]
 8007504:	f1c3 030f 	rsb	r3, r3, #15
 8007508:	b2db      	uxtb	r3, r3
 800750a:	00db      	lsls	r3, r3, #3
 800750c:	b2da      	uxtb	r2, r3
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	4413      	add	r3, r2
 8007512:	b2da      	uxtb	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	701a      	strb	r2, [r3, #0]
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
 8007530:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	091b      	lsrs	r3, r3, #4
 8007536:	b2da      	uxtb	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	b2da      	uxtb	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	701a      	strb	r2, [r3, #0]

}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	603a      	str	r2, [r7, #0]
 800755e:	71fb      	strb	r3, [r7, #7]
 8007560:	460b      	mov	r3, r1
 8007562:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8007564:	79bb      	ldrb	r3, [r7, #6]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	b2da      	uxtb	r2, r3
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	4413      	add	r3, r2
 800756e:	b2da      	uxtb	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	701a      	strb	r2, [r3, #0]

}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007588:	2300      	movs	r3, #0
 800758a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2203      	movs	r2, #3
 8007594:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 80075d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80075f4:	2300      	movs	r3, #0
 80075f6:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	229b      	movs	r2, #155	; 0x9b
 8007608:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800760a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800760e:	4618      	mov	r0, r3
 8007610:	371c      	adds	r7, #28
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800761a:	b480      	push	{r7}
 800761c:	b085      	sub	sp, #20
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007626:	2300      	movs	r3, #0
 8007628:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 8007648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800764c:	b2da      	uxtb	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800765a:	f003 0303 	and.w	r3, r3, #3
 800765e:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800766a:	4413      	add	r3, r2
 800766c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2201      	movs	r2, #1
 8007678:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 8007694:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80076b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80076bc:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 80076be:	68fb      	ldr	r3, [r7, #12]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	4603      	mov	r3, r0
 80076d4:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	3301      	adds	r3, #1
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3714      	adds	r7, #20
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b085      	sub	sp, #20
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	4603      	mov	r3, r0
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	607a      	str	r2, [r7, #4]
 80076fe:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8007700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007704:	2b00      	cmp	r3, #0
 8007706:	da10      	bge.n	800772a <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	43db      	mvns	r3, r3
 800770c:	b2db      	uxtb	r3, r3
 800770e:	f003 0307 	and.w	r3, r3, #7
 8007712:	b2db      	uxtb	r3, r3
 8007714:	3308      	adds	r3, #8
 8007716:	b2da      	uxtb	r2, r3
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	3b80      	subs	r3, #128	; 0x80
 8007720:	10db      	asrs	r3, r3, #3
 8007722:	b2da      	uxtb	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8007728:	e00c      	b.n	8007744 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	b2da      	uxtb	r2, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800773c:	10db      	asrs	r3, r3, #3
 800773e:	b2da      	uxtb	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	701a      	strb	r2, [r3, #0]
}
 8007744:	bf00      	nop
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	460b      	mov	r3, r1
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800775e:	2300      	movs	r3, #0
 8007760:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007762:	897b      	ldrh	r3, [r7, #10]
 8007764:	2b0a      	cmp	r3, #10
 8007766:	d802      	bhi.n	800776e <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007768:	f06f 0309 	mvn.w	r3, #9
 800776c:	e047      	b.n	80077fe <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007776:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8007784:	f002 020f 	and.w	r2, r2, #15
 8007788:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800778a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8007794:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007798:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800779a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80077a4:	f002 0203 	and.w	r2, r2, #3
 80077a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80077aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80077b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80077b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80077ba:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	88d8      	ldrh	r0, [r3, #6]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3305      	adds	r3, #5
 80077c4:	461a      	mov	r2, r3
 80077c6:	2102      	movs	r1, #2
 80077c8:	f7ff fb77 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80077d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80077de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 80077e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80077ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80077ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 80077f8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80077fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b086      	sub	sp, #24
 800780a:	af00      	add	r7, sp, #0
 800780c:	4603      	mov	r3, r0
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	607a      	str	r2, [r7, #4]
 8007812:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007814:	2300      	movs	r3, #0
 8007816:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007818:	89fb      	ldrh	r3, [r7, #14]
 800781a:	2b0a      	cmp	r3, #10
 800781c:	d802      	bhi.n	8007824 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800781e:	f06f 0309 	mvn.w	r3, #9
 8007822:	e046      	b.n	80078b2 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782c:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3301      	adds	r3, #1
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	3302      	adds	r3, #2
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800784c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	3303      	adds	r3, #3
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	3304      	adds	r3, #4
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	3305      	adds	r3, #5
 8007876:	4619      	mov	r1, r3
 8007878:	2002      	movs	r0, #2
 800787a:	f7ff fb49 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 800787e:	4603      	mov	r3, r0
 8007880:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	79da      	ldrb	r2, [r3, #7]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	7a1a      	ldrb	r2, [r3, #8]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	3309      	adds	r3, #9
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078a0:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	7a9a      	ldrb	r2, [r3, #10]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80078ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b086      	sub	sp, #24
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80078c4:	2300      	movs	r3, #0
 80078c6:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80078c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d108      	bne.n	80078e2 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80078d0:	f107 020c 	add.w	r2, r7, #12
 80078d4:	230b      	movs	r3, #11
 80078d6:	2101      	movs	r1, #1
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 f8e7 	bl	8008aac <VL53L1_ReadMulti>
 80078de:	4603      	mov	r3, r0
 80078e0:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80078e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d108      	bne.n	80078fc <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80078ea:	f107 030c 	add.w	r3, r7, #12
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	4619      	mov	r1, r3
 80078f2:	200b      	movs	r0, #11
 80078f4:	f7ff ff87 	bl	8007806 <VL53L1_i2c_decode_static_nvm_managed>
 80078f8:	4603      	mov	r3, r0
 80078fa:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80078fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	460b      	mov	r3, r1
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007916:	2300      	movs	r3, #0
 8007918:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800791a:	897b      	ldrh	r3, [r7, #10]
 800791c:	2b16      	cmp	r3, #22
 800791e:	d802      	bhi.n	8007926 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007920:	f06f 0309 	mvn.w	r3, #9
 8007924:	e076      	b.n	8007a14 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007936:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8007940:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800794a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8007954:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800795e:	f002 020f 	and.w	r2, r2, #15
 8007962:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8007964:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800796e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8007978:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800797c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800797e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8007988:	f002 0203 	and.w	r2, r2, #3
 800798c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800798e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8958      	ldrh	r0, [r3, #10]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3309      	adds	r3, #9
 8007998:	461a      	mov	r2, r3
 800799a:	2102      	movs	r1, #2
 800799c:	f7ff fa8d 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	330b      	adds	r3, #11
 80079aa:	461a      	mov	r2, r3
 80079ac:	2102      	movs	r1, #2
 80079ae:	f7ff facf 	bl	8006f50 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	330d      	adds	r3, #13
 80079bc:	461a      	mov	r2, r3
 80079be:	2102      	movs	r1, #2
 80079c0:	f7ff fac6 	bl	8006f50 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	8a18      	ldrh	r0, [r3, #16]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	330f      	adds	r3, #15
 80079cc:	461a      	mov	r2, r3
 80079ce:	2102      	movs	r1, #2
 80079d0:	f7ff fa73 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 80079da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079de:	b218      	sxth	r0, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3311      	adds	r3, #17
 80079e4:	461a      	mov	r2, r3
 80079e6:	2102      	movs	r1, #2
 80079e8:	f7ff fab2 	bl	8006f50 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3313      	adds	r3, #19
 80079f6:	461a      	mov	r2, r3
 80079f8:	2102      	movs	r1, #2
 80079fa:	f7ff faa9 	bl	8006f50 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	3315      	adds	r3, #21
 8007a08:	461a      	mov	r2, r3
 8007a0a:	2102      	movs	r1, #2
 8007a0c:	f7ff faa0 	bl	8006f50 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8007a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007a2e:	89fb      	ldrh	r3, [r7, #14]
 8007a30:	2b16      	cmp	r3, #22
 8007a32:	d802      	bhi.n	8007a3a <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007a34:	f06f 0309 	mvn.w	r3, #9
 8007a38:	e079      	b.n	8007b2e <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	785a      	ldrb	r2, [r3, #1]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	789a      	ldrb	r2, [r3, #2]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	78da      	ldrb	r2, [r3, #3]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	791a      	ldrb	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	3305      	adds	r3, #5
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	f003 030f 	and.w	r3, r3, #15
 8007a6c:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	799a      	ldrb	r2, [r3, #6]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	3307      	adds	r3, #7
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a84:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	3309      	adds	r3, #9
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	2002      	movs	r0, #2
 8007aa2:	f7ff fa35 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	330b      	adds	r3, #11
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	2002      	movs	r0, #2
 8007ab6:	f7ff fa77 	bl	8006fa8 <VL53L1_i2c_decode_int16_t>
 8007aba:	4603      	mov	r3, r0
 8007abc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	330d      	adds	r3, #13
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	2002      	movs	r0, #2
 8007aca:	f7ff fa6d 	bl	8006fa8 <VL53L1_i2c_decode_int16_t>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	330f      	adds	r3, #15
 8007ada:	4619      	mov	r1, r3
 8007adc:	2002      	movs	r0, #2
 8007ade:	f7ff fa17 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	3311      	adds	r3, #17
 8007aee:	4619      	mov	r1, r3
 8007af0:	2002      	movs	r0, #2
 8007af2:	f7ff fa59 	bl	8006fa8 <VL53L1_i2c_decode_int16_t>
 8007af6:	4603      	mov	r3, r0
 8007af8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007afc:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	3313      	adds	r3, #19
 8007b06:	4619      	mov	r1, r3
 8007b08:	2002      	movs	r0, #2
 8007b0a:	f7ff fa4d 	bl	8006fa8 <VL53L1_i2c_decode_int16_t>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	3315      	adds	r3, #21
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	2002      	movs	r0, #2
 8007b1e:	f7ff fa43 	bl	8006fa8 <VL53L1_i2c_decode_int16_t>
 8007b22:	4603      	mov	r3, r0
 8007b24:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8007b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b088      	sub	sp, #32
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007b40:	2300      	movs	r3, #0
 8007b42:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007b44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d108      	bne.n	8007b5e <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8007b4c:	f107 0208 	add.w	r2, r7, #8
 8007b50:	2317      	movs	r3, #23
 8007b52:	210d      	movs	r1, #13
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 ffa9 	bl	8008aac <VL53L1_ReadMulti>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8007b5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d108      	bne.n	8007b78 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8007b66:	f107 0308 	add.w	r3, r7, #8
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	2017      	movs	r0, #23
 8007b70:	f7ff ff54 	bl	8007a1c <VL53L1_i2c_decode_customer_nvm_managed>
 8007b74:	4603      	mov	r3, r0
 8007b76:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8007b78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3720      	adds	r7, #32
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007b92:	2300      	movs	r3, #0
 8007b94:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007b96:	897b      	ldrh	r3, [r7, #10]
 8007b98:	2b1f      	cmp	r3, #31
 8007b9a:	d802      	bhi.n	8007ba2 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007b9c:	f06f 0309 	mvn.w	r3, #9
 8007ba0:	e0cf      	b.n	8007d42 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	2102      	movs	r1, #2
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff f985 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8007bb8:	f002 0201 	and.w	r2, r2, #1
 8007bbc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8007bbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8007bc8:	f002 020f 	and.w	r2, r2, #15
 8007bcc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8007bce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8007bd8:	f002 020f 	and.w	r2, r2, #15
 8007bdc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8007bde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8007be8:	f002 021f 	and.w	r2, r2, #31
 8007bec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8007bee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8007bf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007bfc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007bfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8007c08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007c0c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8007c0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8007c18:	f002 0201 	and.w	r2, r2, #1
 8007c1c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8007c1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8007c28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8007c32:	f002 0201 	and.w	r2, r2, #1
 8007c36:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8007c38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8007c42:	f002 0203 	and.w	r2, r2, #3
 8007c46:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8007c48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007c52:	f002 021f 	and.w	r2, r2, #31
 8007c56:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8007c58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8007c62:	f002 0203 	and.w	r2, r2, #3
 8007c66:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8007c68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8007c72:	f002 0203 	and.w	r2, r2, #3
 8007c76:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8007c78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007c82:	f002 0207 	and.w	r2, r2, #7
 8007c86:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8007c88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007c92:	f002 021f 	and.w	r2, r2, #31
 8007c96:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8007c98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007ca2:	f002 0201 	and.w	r2, r2, #1
 8007ca6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8007ca8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8007cb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8007cbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8007cc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8007cd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8007cda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8007ce4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	8b18      	ldrh	r0, [r3, #24]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	3318      	adds	r3, #24
 8007cee:	461a      	mov	r2, r3
 8007cf0:	2102      	movs	r1, #2
 8007cf2:	f7ff f8e2 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8007cfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8007d08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8007d12:	f002 020f 	and.w	r2, r2, #15
 8007d16:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8007d18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8007d22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8007d2c:	f002 020f 	and.w	r2, r2, #15
 8007d30:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8007d32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8007d3c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b086      	sub	sp, #24
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	460b      	mov	r3, r1
 8007d54:	607a      	str	r2, [r7, #4]
 8007d56:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007d5c:	897b      	ldrh	r3, [r7, #10]
 8007d5e:	2b15      	cmp	r3, #21
 8007d60:	d802      	bhi.n	8007d68 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007d62:	f06f 0309 	mvn.w	r3, #9
 8007d66:	e070      	b.n	8007e4a <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007d78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8007d82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8007d8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d90:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8007d92:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8007d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d9c:	b298      	uxth	r0, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3304      	adds	r3, #4
 8007da2:	461a      	mov	r2, r3
 8007da4:	2102      	movs	r1, #2
 8007da6:	f7ff f888 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8007db2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007db6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007db8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8007dc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8007dcc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8007dd6:	f002 0201 	and.w	r2, r2, #1
 8007dda:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8007ddc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8007de6:	f002 0207 	and.w	r2, r2, #7
 8007dea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8007dec:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8998      	ldrh	r0, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	330c      	adds	r3, #12
 8007df6:	461a      	mov	r2, r3
 8007df8:	2102      	movs	r1, #2
 8007dfa:	f7ff f85e 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	89d8      	ldrh	r0, [r3, #14]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	330e      	adds	r3, #14
 8007e06:	461a      	mov	r2, r3
 8007e08:	2102      	movs	r1, #2
 8007e0a:	f7ff f856 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8a18      	ldrh	r0, [r3, #16]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3310      	adds	r3, #16
 8007e16:	461a      	mov	r2, r3
 8007e18:	2102      	movs	r1, #2
 8007e1a:	f7ff f84e 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8007e26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8007e30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8007e3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8007e44:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b086      	sub	sp, #24
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	607a      	str	r2, [r7, #4]
 8007e5e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007e60:	2300      	movs	r3, #0
 8007e62:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007e64:	897b      	ldrh	r3, [r7, #10]
 8007e66:	2b16      	cmp	r3, #22
 8007e68:	d802      	bhi.n	8007e70 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007e6a:	f06f 0309 	mvn.w	r3, #9
 8007e6e:	e06e      	b.n	8007f4e <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007e86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8007e90:	f002 020f 	and.w	r2, r2, #15
 8007e94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8007e96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8007ea0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8007eaa:	f002 020f 	and.w	r2, r2, #15
 8007eae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8007eb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8007eba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8007ec4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007ec8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007eca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8007ed4:	f002 020f 	and.w	r2, r2, #15
 8007ed8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8007eda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8007ee4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8007eee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007ef2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8007ef4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	8958      	ldrh	r0, [r3, #10]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	330a      	adds	r3, #10
 8007efe:	461a      	mov	r2, r3
 8007f00:	2102      	movs	r1, #2
 8007f02:	f7fe ffda 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	8998      	ldrh	r0, [r3, #12]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	330c      	adds	r3, #12
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2102      	movs	r1, #2
 8007f12:	f7fe ffd2 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8007f1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8007f28:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6918      	ldr	r0, [r3, #16]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3312      	adds	r3, #18
 8007f32:	461a      	mov	r2, r3
 8007f34:	2104      	movs	r1, #4
 8007f36:	f7ff f860 	bl	8006ffa <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8007f42:	f002 0201 	and.w	r2, r2, #1
 8007f46:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8007f48:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b086      	sub	sp, #24
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	607a      	str	r2, [r7, #4]
 8007f62:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007f68:	897b      	ldrh	r3, [r7, #10]
 8007f6a:	2b11      	cmp	r3, #17
 8007f6c:	d802      	bhi.n	8007f74 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007f6e:	f06f 0309 	mvn.w	r3, #9
 8007f72:	e071      	b.n	8008058 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	f003 0303 	and.w	r3, r3, #3
 8007f7c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8858      	ldrh	r0, [r3, #2]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	2102      	movs	r1, #2
 8007f8e:	f7fe ff94 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8898      	ldrh	r0, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	3303      	adds	r3, #3
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	2102      	movs	r1, #2
 8007f9e:	f7fe ff8c 	bl	8006eba <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8007faa:	f002 0201 	and.w	r2, r2, #1
 8007fae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8007fb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8007fba:	f002 0207 	and.w	r2, r2, #7
 8007fbe:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007fc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8007fca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8007fd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8007fde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007fe2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8007fe4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8007fee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ff2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8007ff4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8007ffe:	f002 0203 	and.w	r2, r2, #3
 8008002:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8008004:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800800e:	f002 0203 	and.w	r2, r2, #3
 8008012:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8008014:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800801e:	f002 020f 	and.w	r2, r2, #15
 8008022:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8008024:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800802e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8008038:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8008042:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800804c:	f002 0203 	and.w	r2, r2, #3
 8008050:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8008052:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008054:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	460b      	mov	r3, r1
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800806e:	2300      	movs	r3, #0
 8008070:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8008072:	897b      	ldrh	r3, [r7, #10]
 8008074:	2b04      	cmp	r3, #4
 8008076:	d802      	bhi.n	800807e <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008078:	f06f 0309 	mvn.w	r3, #9
 800807c:	e025      	b.n	80080ca <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8008094:	f002 0201 	and.w	r2, r2, #1
 8008098:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800809a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 80080a4:	f002 0201 	and.w	r2, r2, #1
 80080a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80080aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 80080b4:	f002 0203 	and.w	r2, r2, #3
 80080b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80080ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3304      	adds	r3, #4
		pdata->system__mode_start;
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80080c4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80080c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr

080080d6 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b086      	sub	sp, #24
 80080da:	af00      	add	r7, sp, #0
 80080dc:	4603      	mov	r3, r0
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	607a      	str	r2, [r7, #4]
 80080e2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80080e4:	2300      	movs	r3, #0
 80080e6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	2b2b      	cmp	r3, #43	; 0x2b
 80080ec:	d802      	bhi.n	80080f4 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80080ee:	f06f 0309 	mvn.w	r3, #9
 80080f2:	e0e2      	b.n	80082ba <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080fc:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	785a      	ldrb	r2, [r3, #1]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	3302      	adds	r3, #2
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	f003 030f 	and.w	r3, r3, #15
 8008114:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	78da      	ldrb	r2, [r3, #3]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	3304      	adds	r3, #4
 8008126:	4619      	mov	r1, r3
 8008128:	2002      	movs	r0, #2
 800812a:	f7fe fef1 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 800812e:	4603      	mov	r3, r0
 8008130:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	3306      	adds	r3, #6
 800813a:	4619      	mov	r1, r3
 800813c:	2002      	movs	r0, #2
 800813e:	f7fe fee7 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 8008142:	4603      	mov	r3, r0
 8008144:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	3308      	adds	r3, #8
 800814e:	4619      	mov	r1, r3
 8008150:	2002      	movs	r0, #2
 8008152:	f7fe fedd 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 8008156:	4603      	mov	r3, r0
 8008158:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	330a      	adds	r3, #10
 8008162:	4619      	mov	r1, r3
 8008164:	2002      	movs	r0, #2
 8008166:	f7fe fed3 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 800816a:	4603      	mov	r3, r0
 800816c:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	330c      	adds	r3, #12
 8008176:	4619      	mov	r1, r3
 8008178:	2002      	movs	r0, #2
 800817a:	f7fe fec9 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 800817e:	4603      	mov	r3, r0
 8008180:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	330e      	adds	r3, #14
 800818a:	4619      	mov	r1, r3
 800818c:	2002      	movs	r0, #2
 800818e:	f7fe febf 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 8008192:	4603      	mov	r3, r0
 8008194:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3310      	adds	r3, #16
 800819e:	4619      	mov	r1, r3
 80081a0:	2002      	movs	r0, #2
 80081a2:	f7fe feb5 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 80081a6:	4603      	mov	r3, r0
 80081a8:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	3312      	adds	r3, #18
 80081b2:	4619      	mov	r1, r3
 80081b4:	2002      	movs	r0, #2
 80081b6:	f7fe feab 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 80081ba:	4603      	mov	r3, r0
 80081bc:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3314      	adds	r3, #20
 80081c6:	4619      	mov	r1, r3
 80081c8:	2002      	movs	r0, #2
 80081ca:	f7fe fea1 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 80081ce:	4603      	mov	r3, r0
 80081d0:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	3316      	adds	r3, #22
 80081da:	4619      	mov	r1, r3
 80081dc:	2002      	movs	r0, #2
 80081de:	f7fe fe97 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 80081e2:	4603      	mov	r3, r0
 80081e4:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	3318      	adds	r3, #24
 80081ee:	4619      	mov	r1, r3
 80081f0:	2002      	movs	r0, #2
 80081f2:	f7fe fe8d 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 80081f6:	4603      	mov	r3, r0
 80081f8:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	331a      	adds	r3, #26
 8008202:	4619      	mov	r1, r3
 8008204:	2002      	movs	r0, #2
 8008206:	f7fe fe83 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 800820a:	4603      	mov	r3, r0
 800820c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	331c      	adds	r3, #28
 8008216:	4619      	mov	r1, r3
 8008218:	2002      	movs	r0, #2
 800821a:	f7fe fe79 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 800821e:	4603      	mov	r3, r0
 8008220:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	331e      	adds	r3, #30
 800822a:	4619      	mov	r1, r3
 800822c:	2002      	movs	r0, #2
 800822e:	f7fe fe6f 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 8008232:	4603      	mov	r3, r0
 8008234:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	3320      	adds	r3, #32
 800823e:	4619      	mov	r1, r3
 8008240:	2002      	movs	r0, #2
 8008242:	f7fe fe65 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 8008246:	4603      	mov	r3, r0
 8008248:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	3322      	adds	r3, #34	; 0x22
 8008252:	4619      	mov	r1, r3
 8008254:	2002      	movs	r0, #2
 8008256:	f7fe fe5b 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 800825a:	4603      	mov	r3, r0
 800825c:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	3324      	adds	r3, #36	; 0x24
 8008266:	4619      	mov	r1, r3
 8008268:	2002      	movs	r0, #2
 800826a:	f7fe fe51 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 800826e:	4603      	mov	r3, r0
 8008270:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	3326      	adds	r3, #38	; 0x26
 800827a:	4619      	mov	r1, r3
 800827c:	2002      	movs	r0, #2
 800827e:	f7fe fe47 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 8008282:	4603      	mov	r3, r0
 8008284:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	3328      	adds	r3, #40	; 0x28
 800828e:	4619      	mov	r1, r3
 8008290:	2002      	movs	r0, #2
 8008292:	f7fe fe3d 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 8008296:	4603      	mov	r3, r0
 8008298:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80082b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b086      	sub	sp, #24
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	4603      	mov	r3, r0
 80082ca:	60b9      	str	r1, [r7, #8]
 80082cc:	607a      	str	r2, [r7, #4]
 80082ce:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80082d0:	2300      	movs	r3, #0
 80082d2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 80082d4:	89fb      	ldrh	r3, [r7, #14]
 80082d6:	2b20      	cmp	r3, #32
 80082d8:	d802      	bhi.n	80082e0 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80082da:	f06f 0309 	mvn.w	r3, #9
 80082de:	e04d      	b.n	800837c <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	2004      	movs	r0, #4
 80082e4:	f7fe feb3 	bl	800704e <VL53L1_i2c_decode_uint32_t>
 80082e8:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	3304      	adds	r3, #4
 80082f2:	4619      	mov	r1, r3
 80082f4:	2004      	movs	r0, #4
 80082f6:	f7fe feaa 	bl	800704e <VL53L1_i2c_decode_uint32_t>
 80082fa:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3308      	adds	r3, #8
 8008304:	4619      	mov	r1, r3
 8008306:	2004      	movs	r0, #4
 8008308:	f7fe febe 	bl	8007088 <VL53L1_i2c_decode_int32_t>
 800830c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	330c      	adds	r3, #12
 8008316:	4619      	mov	r1, r3
 8008318:	2004      	movs	r0, #4
 800831a:	f7fe fe98 	bl	800704e <VL53L1_i2c_decode_uint32_t>
 800831e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	3310      	adds	r3, #16
 8008328:	4619      	mov	r1, r3
 800832a:	2004      	movs	r0, #4
 800832c:	f7fe fe8f 	bl	800704e <VL53L1_i2c_decode_uint32_t>
 8008330:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	3314      	adds	r3, #20
 800833a:	4619      	mov	r1, r3
 800833c:	2004      	movs	r0, #4
 800833e:	f7fe fe86 	bl	800704e <VL53L1_i2c_decode_uint32_t>
 8008342:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	3318      	adds	r3, #24
 800834c:	4619      	mov	r1, r3
 800834e:	2004      	movs	r0, #4
 8008350:	f7fe fe9a 	bl	8007088 <VL53L1_i2c_decode_int32_t>
 8008354:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	331c      	adds	r3, #28
 800835e:	4619      	mov	r1, r3
 8008360:	2004      	movs	r0, #4
 8008362:	f7fe fe74 	bl	800704e <VL53L1_i2c_decode_uint32_t>
 8008366:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8008378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008392:	2300      	movs	r3, #0
 8008394:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8008396:	89fb      	ldrh	r3, [r7, #14]
 8008398:	2b37      	cmp	r3, #55	; 0x37
 800839a:	d802      	bhi.n	80083a2 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800839c:	f06f 0309 	mvn.w	r3, #9
 80083a0:	e15e      	b.n	8008660 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 80083a2:	68b9      	ldr	r1, [r7, #8]
 80083a4:	2002      	movs	r0, #2
 80083a6:	f7fe fdb3 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 80083aa:	4603      	mov	r3, r0
 80083ac:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	3302      	adds	r3, #2
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083bc:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	3303      	adds	r3, #3
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083cc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	3304      	adds	r3, #4
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	f003 0303 	and.w	r3, r3, #3
 80083dc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	3305      	adds	r3, #5
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	3306      	adds	r3, #6
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083fc:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	3307      	adds	r3, #7
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800840c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	3308      	adds	r3, #8
 8008416:	4619      	mov	r1, r3
 8008418:	2002      	movs	r0, #2
 800841a:	f7fe fd79 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 800841e:	4603      	mov	r3, r0
 8008420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008424:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	330a      	adds	r3, #10
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	f003 0303 	and.w	r3, r3, #3
 8008434:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	330b      	adds	r3, #11
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	330c      	adds	r3, #12
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	330d      	adds	r3, #13
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f003 0307 	and.w	r3, r3, #7
 8008464:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	330e      	adds	r3, #14
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	330f      	adds	r3, #15
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	f003 0303 	and.w	r3, r3, #3
 8008484:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	7c1a      	ldrb	r2, [r3, #16]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	7c5a      	ldrb	r2, [r3, #17]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	3312      	adds	r3, #18
 800849e:	4619      	mov	r1, r3
 80084a0:	2002      	movs	r0, #2
 80084a2:	f7fe fd35 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 80084a6:	4603      	mov	r3, r0
 80084a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084ac:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	3316      	adds	r3, #22
 80084b6:	4619      	mov	r1, r3
 80084b8:	2002      	movs	r0, #2
 80084ba:	f7fe fd29 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 80084be:	4603      	mov	r3, r0
 80084c0:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	3318      	adds	r3, #24
 80084ca:	4619      	mov	r1, r3
 80084cc:	2002      	movs	r0, #2
 80084ce:	f7fe fd1f 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 80084d2:	4603      	mov	r3, r0
 80084d4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	331a      	adds	r3, #26
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	331b      	adds	r3, #27
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	f003 0307 	and.w	r3, r3, #7
 80084f4:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	7f1a      	ldrb	r2, [r3, #28]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	7f5a      	ldrb	r2, [r3, #29]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	331e      	adds	r3, #30
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008514:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	331f      	adds	r3, #31
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008524:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	3320      	adds	r3, #32
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	3321      	adds	r3, #33	; 0x21
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	f003 030f 	and.w	r3, r3, #15
 8008544:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	3325      	adds	r3, #37	; 0x25
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	f003 0301 	and.w	r3, r3, #1
 8008578:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	3326      	adds	r3, #38	; 0x26
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	3327      	adds	r3, #39	; 0x27
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	f003 031f 	and.w	r3, r3, #31
 800859c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3328      	adds	r3, #40	; 0x28
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	f003 031f 	and.w	r3, r3, #31
 80085ae:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	3329      	adds	r3, #41	; 0x29
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	f003 031f 	and.w	r3, r3, #31
 80085c0:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	332a      	adds	r3, #42	; 0x2a
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	332b      	adds	r3, #43	; 0x2b
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	f003 0301 	and.w	r3, r3, #1
 80085e4:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	332c      	adds	r3, #44	; 0x2c
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	f003 0303 	and.w	r3, r3, #3
 80085f6:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	332d      	adds	r3, #45	; 0x2d
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008608:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	332e      	adds	r3, #46	; 0x2e
 8008614:	4619      	mov	r1, r3
 8008616:	2004      	movs	r0, #4
 8008618:	f7fe fd19 	bl	800704e <VL53L1_i2c_decode_uint32_t>
 800861c:	4603      	mov	r3, r0
 800861e:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	3332      	adds	r3, #50	; 0x32
 800862a:	4619      	mov	r1, r3
 800862c:	2004      	movs	r0, #4
 800862e:	f7fe fd0e 	bl	800704e <VL53L1_i2c_decode_uint32_t>
 8008632:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	3336      	adds	r3, #54	; 0x36
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	3337      	adds	r3, #55	; 0x37
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800865c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008676:	2300      	movs	r3, #0
 8008678:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800867a:	89fb      	ldrh	r3, [r7, #14]
 800867c:	2b30      	cmp	r3, #48	; 0x30
 800867e:	d802      	bhi.n	8008686 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008680:	f06f 0309 	mvn.w	r3, #9
 8008684:	e112      	b.n	80088ac <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	785a      	ldrb	r2, [r3, #1]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	789a      	ldrb	r2, [r3, #2]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	3303      	adds	r3, #3
 80086a2:	4619      	mov	r1, r3
 80086a4:	2002      	movs	r0, #2
 80086a6:	f7fe fc33 	bl	8006f10 <VL53L1_i2c_decode_uint16_t>
 80086aa:	4603      	mov	r3, r0
 80086ac:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	3305      	adds	r3, #5
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086bc:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	3306      	adds	r3, #6
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	3307      	adds	r3, #7
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	f003 0307 	and.w	r3, r3, #7
 80086dc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	3308      	adds	r3, #8
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086ec:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	3309      	adds	r3, #9
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086fc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	330a      	adds	r3, #10
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	330b      	adds	r3, #11
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	330c      	adds	r3, #12
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	f003 0301 	and.w	r3, r3, #1
 800872c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	330d      	adds	r3, #13
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800873c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	330e      	adds	r3, #14
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800874c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	7bda      	ldrb	r2, [r3, #15]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	7c1a      	ldrb	r2, [r3, #16]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	7c5a      	ldrb	r2, [r3, #17]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	7c9a      	ldrb	r2, [r3, #18]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	7cda      	ldrb	r2, [r3, #19]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	7d1a      	ldrb	r2, [r3, #20]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	7d5a      	ldrb	r2, [r3, #21]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	7d9a      	ldrb	r2, [r3, #22]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	7dda      	ldrb	r2, [r3, #23]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	7e1a      	ldrb	r2, [r3, #24]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	7e5a      	ldrb	r2, [r3, #25]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	7e9a      	ldrb	r2, [r3, #26]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	7eda      	ldrb	r2, [r3, #27]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	7f1a      	ldrb	r2, [r3, #28]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	7f5a      	ldrb	r2, [r3, #29]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	7f9a      	ldrb	r2, [r3, #30]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	7fda      	ldrb	r2, [r3, #31]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	f893 2020 	ldrb.w	r2, [r3, #32]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80088a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b090      	sub	sp, #64	; 0x40
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80088be:	2300      	movs	r3, #0
 80088c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80088c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10a      	bne.n	80088e2 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80088cc:	f107 020c 	add.w	r2, r7, #12
 80088d0:	2331      	movs	r3, #49	; 0x31
 80088d2:	f240 110f 	movw	r1, #271	; 0x10f
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f8e8 	bl	8008aac <VL53L1_ReadMulti>
 80088dc:	4603      	mov	r3, r0
 80088de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80088e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d109      	bne.n	80088fe <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80088ea:	f107 030c 	add.w	r3, r7, #12
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	4619      	mov	r1, r3
 80088f2:	2031      	movs	r0, #49	; 0x31
 80088f4:	f7ff feb8 	bl	8008668 <VL53L1_i2c_decode_nvm_copy_data>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80088fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008902:	4618      	mov	r0, r3
 8008904:	3740      	adds	r7, #64	; 0x40
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af02      	add	r7, sp, #8
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8008918:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f9b9 	bl	8008c94 <VL53L1_WaitUs>
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8008926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d10b      	bne.n	8008946 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800892e:	2301      	movs	r3, #1
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	2301      	movs	r3, #1
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	2301      	movs	r3, #1
 8008938:	22e5      	movs	r2, #229	; 0xe5
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f9bf 	bl	8008cc0 <VL53L1_WaitValueMaskEx>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8008946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d103      	bne.n	8008956 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800894e:	2103      	movs	r1, #3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f7fe f896 	bl	8006a82 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8008956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b088      	sub	sp, #32
 8008966:	af02      	add	r7, sp, #8
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800896c:	2300      	movs	r3, #0
 800896e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 8008982:	f003 0310 	and.w	r3, r3, #16
 8008986:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d102      	bne.n	8008994 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 800898e:	2301      	movs	r3, #1
 8008990:	75fb      	strb	r3, [r7, #23]
 8008992:	e001      	b.n	8008998 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 8008994:	2300      	movs	r3, #0
 8008996:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	2201      	movs	r2, #1
 800899c:	9201      	str	r2, [sp, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	9200      	str	r2, [sp, #0]
 80089a2:	2231      	movs	r2, #49	; 0x31
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f98a 	bl	8008cc0 <VL53L1_WaitValueMaskEx>
 80089ac:	4603      	mov	r3, r0
 80089ae:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 80089b0:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af02      	add	r7, sp, #8
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	330a      	adds	r3, #10
 80089cc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 80089da:	b299      	uxth	r1, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	b29a      	uxth	r2, r3
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	4613      	mov	r3, r2
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	f7f8 fd94 	bl	8001514 <HAL_I2C_Master_Transmit>
 80089ec:	4603      	mov	r3, r0
 80089ee:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80089f0:	693b      	ldr	r3, [r7, #16]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b088      	sub	sp, #32
 80089fe:	af02      	add	r7, sp, #8
 8008a00:	60f8      	str	r0, [r7, #12]
 8008a02:	60b9      	str	r1, [r7, #8]
 8008a04:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	330a      	adds	r3, #10
 8008a0a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8008a18:	f043 0301 	orr.w	r3, r3, #1
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	b299      	uxth	r1, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	f7f8 fe66 	bl	80016fc <HAL_I2C_Master_Receive>
 8008a30:	4603      	mov	r3, r0
 8008a32:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008a34:	693b      	ldr	r3, [r7, #16]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3718      	adds	r7, #24
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
	...

08008a40 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008a50:	2300      	movs	r3, #0
 8008a52:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2bff      	cmp	r3, #255	; 0xff
 8008a58:	d902      	bls.n	8008a60 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8008a5a:	f06f 0303 	mvn.w	r3, #3
 8008a5e:	e01d      	b.n	8008a9c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8008a60:	897b      	ldrh	r3, [r7, #10]
 8008a62:	0a1b      	lsrs	r3, r3, #8
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	4b0e      	ldr	r3, [pc, #56]	; (8008aa4 <VL53L1_WriteMulti+0x64>)
 8008a6a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008a6c:	897b      	ldrh	r3, [r7, #10]
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	4b0c      	ldr	r3, [pc, #48]	; (8008aa4 <VL53L1_WriteMulti+0x64>)
 8008a72:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	480b      	ldr	r0, [pc, #44]	; (8008aa8 <VL53L1_WriteMulti+0x68>)
 8008a7a:	f000 f9df 	bl	8008e3c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	3302      	adds	r3, #2
 8008a82:	461a      	mov	r2, r3
 8008a84:	4907      	ldr	r1, [pc, #28]	; (8008aa4 <VL53L1_WriteMulti+0x64>)
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff ff98 	bl	80089bc <_I2CWrite>
 8008a8c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008a94:	23f3      	movs	r3, #243	; 0xf3
 8008a96:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8008a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20000308 	.word	0x20000308
 8008aa8:	2000030a 	.word	0x2000030a

08008aac <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008ac0:	897b      	ldrh	r3, [r7, #10]
 8008ac2:	0a1b      	lsrs	r3, r3, #8
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	b2da      	uxtb	r2, r3
 8008ac8:	4b12      	ldr	r3, [pc, #72]	; (8008b14 <VL53L1_ReadMulti+0x68>)
 8008aca:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008acc:	897b      	ldrh	r3, [r7, #10]
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	4b10      	ldr	r3, [pc, #64]	; (8008b14 <VL53L1_ReadMulti+0x68>)
 8008ad2:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	490f      	ldr	r1, [pc, #60]	; (8008b14 <VL53L1_ReadMulti+0x68>)
 8008ad8:	68f8      	ldr	r0, [r7, #12]
 8008ada:	f7ff ff6f 	bl	80089bc <_I2CWrite>
 8008ade:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008ae6:	23f3      	movs	r3, #243	; 0xf3
 8008ae8:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008aea:	e00c      	b.n	8008b06 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	6879      	ldr	r1, [r7, #4]
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f7ff ff82 	bl	80089fa <_I2CRead>
 8008af6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008afe:	23f3      	movs	r3, #243	; 0xf3
 8008b00:	75fb      	strb	r3, [r7, #23]
 8008b02:	e000      	b.n	8008b06 <VL53L1_ReadMulti+0x5a>
    }
done:
 8008b04:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8008b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3718      	adds	r7, #24
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	bf00      	nop
 8008b14:	20000308 	.word	0x20000308

08008b18 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	807b      	strh	r3, [r7, #2]
 8008b24:	4613      	mov	r3, r2
 8008b26:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008b2c:	887b      	ldrh	r3, [r7, #2]
 8008b2e:	0a1b      	lsrs	r3, r3, #8
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <VL53L1_WrByte+0x50>)
 8008b36:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008b38:	887b      	ldrh	r3, [r7, #2]
 8008b3a:	b2da      	uxtb	r2, r3
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <VL53L1_WrByte+0x50>)
 8008b3e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8008b40:	4a09      	ldr	r2, [pc, #36]	; (8008b68 <VL53L1_WrByte+0x50>)
 8008b42:	787b      	ldrb	r3, [r7, #1]
 8008b44:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008b46:	2203      	movs	r2, #3
 8008b48:	4907      	ldr	r1, [pc, #28]	; (8008b68 <VL53L1_WrByte+0x50>)
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7ff ff36 	bl	80089bc <_I2CWrite>
 8008b50:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008b58:	23f3      	movs	r3, #243	; 0xf3
 8008b5a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8008b5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20000308 	.word	0x20000308

08008b6c <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	460b      	mov	r3, r1
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8008b7e:	897b      	ldrh	r3, [r7, #10]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	4b12      	ldr	r3, [pc, #72]	; (8008bd0 <VL53L1_RdByte+0x64>)
 8008b88:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008b8a:	897b      	ldrh	r3, [r7, #10]
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <VL53L1_RdByte+0x64>)
 8008b90:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008b92:	2202      	movs	r2, #2
 8008b94:	490e      	ldr	r1, [pc, #56]	; (8008bd0 <VL53L1_RdByte+0x64>)
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f7ff ff10 	bl	80089bc <_I2CWrite>
 8008b9c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008ba4:	23f3      	movs	r3, #243	; 0xf3
 8008ba6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008ba8:	e00c      	b.n	8008bc4 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008baa:	2201      	movs	r2, #1
 8008bac:	6879      	ldr	r1, [r7, #4]
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f7ff ff23 	bl	80089fa <_I2CRead>
 8008bb4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d002      	beq.n	8008bc2 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008bbc:	23f3      	movs	r3, #243	; 0xf3
 8008bbe:	75fb      	strb	r3, [r7, #23]
 8008bc0:	e000      	b.n	8008bc4 <VL53L1_RdByte+0x58>
    }
done:
 8008bc2:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8008bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000308 	.word	0x20000308

08008bd4 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008be6:	897b      	ldrh	r3, [r7, #10]
 8008be8:	0a1b      	lsrs	r3, r3, #8
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	4b18      	ldr	r3, [pc, #96]	; (8008c50 <VL53L1_RdWord+0x7c>)
 8008bf0:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008bf2:	897b      	ldrh	r3, [r7, #10]
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	4b16      	ldr	r3, [pc, #88]	; (8008c50 <VL53L1_RdWord+0x7c>)
 8008bf8:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	4914      	ldr	r1, [pc, #80]	; (8008c50 <VL53L1_RdWord+0x7c>)
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff fedc 	bl	80089bc <_I2CWrite>
 8008c04:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c0c:	23f3      	movs	r3, #243	; 0xf3
 8008c0e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008c10:	e017      	b.n	8008c42 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008c12:	2202      	movs	r2, #2
 8008c14:	490e      	ldr	r1, [pc, #56]	; (8008c50 <VL53L1_RdWord+0x7c>)
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f7ff feef 	bl	80089fa <_I2CRead>
 8008c1c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c24:	23f3      	movs	r3, #243	; 0xf3
 8008c26:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008c28:	e00b      	b.n	8008c42 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008c2a:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <VL53L1_RdWord+0x7c>)
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	021b      	lsls	r3, r3, #8
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <VL53L1_RdWord+0x7c>)
 8008c36:	785b      	ldrb	r3, [r3, #1]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	4413      	add	r3, r2
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8008c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3718      	adds	r7, #24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	20000308 	.word	0x20000308

08008c54 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8008c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b082      	sub	sp, #8
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
 8008c7e:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7f8 f900 	bl	8000e88 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	4a06      	ldr	r2, [pc, #24]	; (8008cbc <VL53L1_WaitUs+0x28>)
 8008ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8008ca6:	1192      	asrs	r2, r2, #6
 8008ca8:	17db      	asrs	r3, r3, #31
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7f8 f8eb 	bl	8000e88 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	10624dd3 	.word	0x10624dd3

08008cc0 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8008cc0:	b590      	push	{r4, r7, lr}
 8008cc2:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	f107 040c 	add.w	r4, r7, #12
 8008ccc:	6020      	str	r0, [r4, #0]
 8008cce:	f107 0008 	add.w	r0, r7, #8
 8008cd2:	6001      	str	r1, [r0, #0]
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	1dbb      	adds	r3, r7, #6
 8008cd8:	801a      	strh	r2, [r3, #0]
 8008cda:	1d7b      	adds	r3, r7, #5
 8008cdc:	460a      	mov	r2, r1
 8008cde:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8008cec:	2300      	movs	r3, #0
 8008cee:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8008d04:	f107 0310 	add.w	r3, r7, #16
 8008d08:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008d0c:	4935      	ldr	r1, [pc, #212]	; (8008de4 <VL53L1_WaitValueMaskEx+0x124>)
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fd0c 	bl	800972c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 8008d14:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff ff9b 	bl	8008c54 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8008d1e:	e03f      	b.n	8008da0 <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8008d20:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10b      	bne.n	8008d40 <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 8008d28:	f207 2213 	addw	r2, r7, #531	; 0x213
 8008d2c:	1dbb      	adds	r3, r7, #6
 8008d2e:	8819      	ldrh	r1, [r3, #0]
 8008d30:	f107 030c 	add.w	r3, r7, #12
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	f7ff ff19 	bl	8008b6c <VL53L1_RdByte>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8008d40:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8008d44:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8008d48:	4013      	ands	r3, r2
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	1d7a      	adds	r2, r7, #5
 8008d4e:	7812      	ldrb	r2, [r2, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d102      	bne.n	8008d5a <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 8008d54:	2301      	movs	r3, #1
 8008d56:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8008d5a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d112      	bne.n	8008d88 <VL53L1_WaitValueMaskEx+0xc8>
 8008d62:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10e      	bne.n	8008d88 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 8008d6a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8008d72:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8008d76:	f107 030c 	add.w	r3, r7, #12
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	6818      	ldr	r0, [r3, #0]
 8008d7e:	f7ff ff7a 	bl	8008c76 <VL53L1_WaitMs>
 8008d82:	4603      	mov	r3, r0
 8008d84:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 8008d88:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7ff ff61 	bl	8008c54 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8008d92:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8008d96:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8008da0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10a      	bne.n	8008dbe <VL53L1_WaitValueMaskEx+0xfe>
 8008da8:	f107 0308 	add.w	r3, r7, #8
 8008dac:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d203      	bcs.n	8008dbe <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 8008db6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0b0      	beq.n	8008d20 <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8008dbe:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d106      	bne.n	8008dd4 <VL53L1_WaitValueMaskEx+0x114>
 8008dc6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 8008dce:	23f9      	movs	r3, #249	; 0xf9
 8008dd0:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8008dd4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd90      	pop	{r4, r7, pc}
 8008de2:	bf00      	nop
 8008de4:	0800bae0 	.word	0x0800bae0

08008de8 <__errno>:
 8008de8:	4b01      	ldr	r3, [pc, #4]	; (8008df0 <__errno+0x8>)
 8008dea:	6818      	ldr	r0, [r3, #0]
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	2000003c 	.word	0x2000003c

08008df4 <__libc_init_array>:
 8008df4:	b570      	push	{r4, r5, r6, lr}
 8008df6:	4d0d      	ldr	r5, [pc, #52]	; (8008e2c <__libc_init_array+0x38>)
 8008df8:	4c0d      	ldr	r4, [pc, #52]	; (8008e30 <__libc_init_array+0x3c>)
 8008dfa:	1b64      	subs	r4, r4, r5
 8008dfc:	10a4      	asrs	r4, r4, #2
 8008dfe:	2600      	movs	r6, #0
 8008e00:	42a6      	cmp	r6, r4
 8008e02:	d109      	bne.n	8008e18 <__libc_init_array+0x24>
 8008e04:	4d0b      	ldr	r5, [pc, #44]	; (8008e34 <__libc_init_array+0x40>)
 8008e06:	4c0c      	ldr	r4, [pc, #48]	; (8008e38 <__libc_init_array+0x44>)
 8008e08:	f002 fe34 	bl	800ba74 <_init>
 8008e0c:	1b64      	subs	r4, r4, r5
 8008e0e:	10a4      	asrs	r4, r4, #2
 8008e10:	2600      	movs	r6, #0
 8008e12:	42a6      	cmp	r6, r4
 8008e14:	d105      	bne.n	8008e22 <__libc_init_array+0x2e>
 8008e16:	bd70      	pop	{r4, r5, r6, pc}
 8008e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e1c:	4798      	blx	r3
 8008e1e:	3601      	adds	r6, #1
 8008e20:	e7ee      	b.n	8008e00 <__libc_init_array+0xc>
 8008e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e26:	4798      	blx	r3
 8008e28:	3601      	adds	r6, #1
 8008e2a:	e7f2      	b.n	8008e12 <__libc_init_array+0x1e>
 8008e2c:	0800bee4 	.word	0x0800bee4
 8008e30:	0800bee4 	.word	0x0800bee4
 8008e34:	0800bee4 	.word	0x0800bee4
 8008e38:	0800bee8 	.word	0x0800bee8

08008e3c <memcpy>:
 8008e3c:	440a      	add	r2, r1
 8008e3e:	4291      	cmp	r1, r2
 8008e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e44:	d100      	bne.n	8008e48 <memcpy+0xc>
 8008e46:	4770      	bx	lr
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e52:	4291      	cmp	r1, r2
 8008e54:	d1f9      	bne.n	8008e4a <memcpy+0xe>
 8008e56:	bd10      	pop	{r4, pc}

08008e58 <memset>:
 8008e58:	4402      	add	r2, r0
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d100      	bne.n	8008e62 <memset+0xa>
 8008e60:	4770      	bx	lr
 8008e62:	f803 1b01 	strb.w	r1, [r3], #1
 8008e66:	e7f9      	b.n	8008e5c <memset+0x4>

08008e68 <__cvt>:
 8008e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e6a:	ed2d 8b02 	vpush	{d8}
 8008e6e:	eeb0 8b40 	vmov.f64	d8, d0
 8008e72:	b085      	sub	sp, #20
 8008e74:	4617      	mov	r7, r2
 8008e76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8008e78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008e7a:	ee18 2a90 	vmov	r2, s17
 8008e7e:	f025 0520 	bic.w	r5, r5, #32
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	bfb6      	itet	lt
 8008e86:	222d      	movlt	r2, #45	; 0x2d
 8008e88:	2200      	movge	r2, #0
 8008e8a:	eeb1 8b40 	vneglt.f64	d8, d0
 8008e8e:	2d46      	cmp	r5, #70	; 0x46
 8008e90:	460c      	mov	r4, r1
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	d004      	beq.n	8008ea0 <__cvt+0x38>
 8008e96:	2d45      	cmp	r5, #69	; 0x45
 8008e98:	d100      	bne.n	8008e9c <__cvt+0x34>
 8008e9a:	3401      	adds	r4, #1
 8008e9c:	2102      	movs	r1, #2
 8008e9e:	e000      	b.n	8008ea2 <__cvt+0x3a>
 8008ea0:	2103      	movs	r1, #3
 8008ea2:	ab03      	add	r3, sp, #12
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	ab02      	add	r3, sp, #8
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	4622      	mov	r2, r4
 8008eac:	4633      	mov	r3, r6
 8008eae:	eeb0 0b48 	vmov.f64	d0, d8
 8008eb2:	f000 fcd9 	bl	8009868 <_dtoa_r>
 8008eb6:	2d47      	cmp	r5, #71	; 0x47
 8008eb8:	d109      	bne.n	8008ece <__cvt+0x66>
 8008eba:	07fb      	lsls	r3, r7, #31
 8008ebc:	d407      	bmi.n	8008ece <__cvt+0x66>
 8008ebe:	9b03      	ldr	r3, [sp, #12]
 8008ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ec2:	1a1b      	subs	r3, r3, r0
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	b005      	add	sp, #20
 8008ec8:	ecbd 8b02 	vpop	{d8}
 8008ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ece:	2d46      	cmp	r5, #70	; 0x46
 8008ed0:	eb00 0204 	add.w	r2, r0, r4
 8008ed4:	d10c      	bne.n	8008ef0 <__cvt+0x88>
 8008ed6:	7803      	ldrb	r3, [r0, #0]
 8008ed8:	2b30      	cmp	r3, #48	; 0x30
 8008eda:	d107      	bne.n	8008eec <__cvt+0x84>
 8008edc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee4:	bf1c      	itt	ne
 8008ee6:	f1c4 0401 	rsbne	r4, r4, #1
 8008eea:	6034      	strne	r4, [r6, #0]
 8008eec:	6833      	ldr	r3, [r6, #0]
 8008eee:	441a      	add	r2, r3
 8008ef0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef8:	bf08      	it	eq
 8008efa:	9203      	streq	r2, [sp, #12]
 8008efc:	2130      	movs	r1, #48	; 0x30
 8008efe:	9b03      	ldr	r3, [sp, #12]
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d2dc      	bcs.n	8008ebe <__cvt+0x56>
 8008f04:	1c5c      	adds	r4, r3, #1
 8008f06:	9403      	str	r4, [sp, #12]
 8008f08:	7019      	strb	r1, [r3, #0]
 8008f0a:	e7f8      	b.n	8008efe <__cvt+0x96>

08008f0c <__exponent>:
 8008f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2900      	cmp	r1, #0
 8008f12:	bfb8      	it	lt
 8008f14:	4249      	neglt	r1, r1
 8008f16:	f803 2b02 	strb.w	r2, [r3], #2
 8008f1a:	bfb4      	ite	lt
 8008f1c:	222d      	movlt	r2, #45	; 0x2d
 8008f1e:	222b      	movge	r2, #43	; 0x2b
 8008f20:	2909      	cmp	r1, #9
 8008f22:	7042      	strb	r2, [r0, #1]
 8008f24:	dd2a      	ble.n	8008f7c <__exponent+0x70>
 8008f26:	f10d 0407 	add.w	r4, sp, #7
 8008f2a:	46a4      	mov	ip, r4
 8008f2c:	270a      	movs	r7, #10
 8008f2e:	46a6      	mov	lr, r4
 8008f30:	460a      	mov	r2, r1
 8008f32:	fb91 f6f7 	sdiv	r6, r1, r7
 8008f36:	fb07 1516 	mls	r5, r7, r6, r1
 8008f3a:	3530      	adds	r5, #48	; 0x30
 8008f3c:	2a63      	cmp	r2, #99	; 0x63
 8008f3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008f46:	4631      	mov	r1, r6
 8008f48:	dcf1      	bgt.n	8008f2e <__exponent+0x22>
 8008f4a:	3130      	adds	r1, #48	; 0x30
 8008f4c:	f1ae 0502 	sub.w	r5, lr, #2
 8008f50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008f54:	1c44      	adds	r4, r0, #1
 8008f56:	4629      	mov	r1, r5
 8008f58:	4561      	cmp	r1, ip
 8008f5a:	d30a      	bcc.n	8008f72 <__exponent+0x66>
 8008f5c:	f10d 0209 	add.w	r2, sp, #9
 8008f60:	eba2 020e 	sub.w	r2, r2, lr
 8008f64:	4565      	cmp	r5, ip
 8008f66:	bf88      	it	hi
 8008f68:	2200      	movhi	r2, #0
 8008f6a:	4413      	add	r3, r2
 8008f6c:	1a18      	subs	r0, r3, r0
 8008f6e:	b003      	add	sp, #12
 8008f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008f7a:	e7ed      	b.n	8008f58 <__exponent+0x4c>
 8008f7c:	2330      	movs	r3, #48	; 0x30
 8008f7e:	3130      	adds	r1, #48	; 0x30
 8008f80:	7083      	strb	r3, [r0, #2]
 8008f82:	70c1      	strb	r1, [r0, #3]
 8008f84:	1d03      	adds	r3, r0, #4
 8008f86:	e7f1      	b.n	8008f6c <__exponent+0x60>

08008f88 <_printf_float>:
 8008f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8c:	b08b      	sub	sp, #44	; 0x2c
 8008f8e:	460c      	mov	r4, r1
 8008f90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008f94:	4616      	mov	r6, r2
 8008f96:	461f      	mov	r7, r3
 8008f98:	4605      	mov	r5, r0
 8008f9a:	f001 f9e7 	bl	800a36c <_localeconv_r>
 8008f9e:	f8d0 b000 	ldr.w	fp, [r0]
 8008fa2:	4658      	mov	r0, fp
 8008fa4:	f7f7 f94c 	bl	8000240 <strlen>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	9308      	str	r3, [sp, #32]
 8008fac:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008fb4:	6822      	ldr	r2, [r4, #0]
 8008fb6:	3307      	adds	r3, #7
 8008fb8:	f023 0307 	bic.w	r3, r3, #7
 8008fbc:	f103 0108 	add.w	r1, r3, #8
 8008fc0:	f8c8 1000 	str.w	r1, [r8]
 8008fc4:	4682      	mov	sl, r0
 8008fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8008fce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009230 <_printf_float+0x2a8>
 8008fd2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008fd6:	eeb0 6bc0 	vabs.f64	d6, d0
 8008fda:	eeb4 6b47 	vcmp.f64	d6, d7
 8008fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe2:	dd24      	ble.n	800902e <_printf_float+0xa6>
 8008fe4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fec:	d502      	bpl.n	8008ff4 <_printf_float+0x6c>
 8008fee:	232d      	movs	r3, #45	; 0x2d
 8008ff0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ff4:	4b90      	ldr	r3, [pc, #576]	; (8009238 <_printf_float+0x2b0>)
 8008ff6:	4891      	ldr	r0, [pc, #580]	; (800923c <_printf_float+0x2b4>)
 8008ff8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008ffc:	bf94      	ite	ls
 8008ffe:	4698      	movls	r8, r3
 8009000:	4680      	movhi	r8, r0
 8009002:	2303      	movs	r3, #3
 8009004:	6123      	str	r3, [r4, #16]
 8009006:	f022 0204 	bic.w	r2, r2, #4
 800900a:	2300      	movs	r3, #0
 800900c:	6022      	str	r2, [r4, #0]
 800900e:	9304      	str	r3, [sp, #16]
 8009010:	9700      	str	r7, [sp, #0]
 8009012:	4633      	mov	r3, r6
 8009014:	aa09      	add	r2, sp, #36	; 0x24
 8009016:	4621      	mov	r1, r4
 8009018:	4628      	mov	r0, r5
 800901a:	f000 f9d3 	bl	80093c4 <_printf_common>
 800901e:	3001      	adds	r0, #1
 8009020:	f040 808a 	bne.w	8009138 <_printf_float+0x1b0>
 8009024:	f04f 30ff 	mov.w	r0, #4294967295
 8009028:	b00b      	add	sp, #44	; 0x2c
 800902a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902e:	eeb4 0b40 	vcmp.f64	d0, d0
 8009032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009036:	d709      	bvc.n	800904c <_printf_float+0xc4>
 8009038:	ee10 3a90 	vmov	r3, s1
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfbc      	itt	lt
 8009040:	232d      	movlt	r3, #45	; 0x2d
 8009042:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009046:	487e      	ldr	r0, [pc, #504]	; (8009240 <_printf_float+0x2b8>)
 8009048:	4b7e      	ldr	r3, [pc, #504]	; (8009244 <_printf_float+0x2bc>)
 800904a:	e7d5      	b.n	8008ff8 <_printf_float+0x70>
 800904c:	6863      	ldr	r3, [r4, #4]
 800904e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009052:	9104      	str	r1, [sp, #16]
 8009054:	1c59      	adds	r1, r3, #1
 8009056:	d13c      	bne.n	80090d2 <_printf_float+0x14a>
 8009058:	2306      	movs	r3, #6
 800905a:	6063      	str	r3, [r4, #4]
 800905c:	2300      	movs	r3, #0
 800905e:	9303      	str	r3, [sp, #12]
 8009060:	ab08      	add	r3, sp, #32
 8009062:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009066:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800906a:	ab07      	add	r3, sp, #28
 800906c:	6861      	ldr	r1, [r4, #4]
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	6022      	str	r2, [r4, #0]
 8009072:	f10d 031b 	add.w	r3, sp, #27
 8009076:	4628      	mov	r0, r5
 8009078:	f7ff fef6 	bl	8008e68 <__cvt>
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	9907      	ldr	r1, [sp, #28]
 8009080:	2b47      	cmp	r3, #71	; 0x47
 8009082:	4680      	mov	r8, r0
 8009084:	d108      	bne.n	8009098 <_printf_float+0x110>
 8009086:	1cc8      	adds	r0, r1, #3
 8009088:	db02      	blt.n	8009090 <_printf_float+0x108>
 800908a:	6863      	ldr	r3, [r4, #4]
 800908c:	4299      	cmp	r1, r3
 800908e:	dd41      	ble.n	8009114 <_printf_float+0x18c>
 8009090:	f1a9 0902 	sub.w	r9, r9, #2
 8009094:	fa5f f989 	uxtb.w	r9, r9
 8009098:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800909c:	d820      	bhi.n	80090e0 <_printf_float+0x158>
 800909e:	3901      	subs	r1, #1
 80090a0:	464a      	mov	r2, r9
 80090a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090a6:	9107      	str	r1, [sp, #28]
 80090a8:	f7ff ff30 	bl	8008f0c <__exponent>
 80090ac:	9a08      	ldr	r2, [sp, #32]
 80090ae:	9004      	str	r0, [sp, #16]
 80090b0:	1813      	adds	r3, r2, r0
 80090b2:	2a01      	cmp	r2, #1
 80090b4:	6123      	str	r3, [r4, #16]
 80090b6:	dc02      	bgt.n	80090be <_printf_float+0x136>
 80090b8:	6822      	ldr	r2, [r4, #0]
 80090ba:	07d2      	lsls	r2, r2, #31
 80090bc:	d501      	bpl.n	80090c2 <_printf_float+0x13a>
 80090be:	3301      	adds	r3, #1
 80090c0:	6123      	str	r3, [r4, #16]
 80090c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d0a2      	beq.n	8009010 <_printf_float+0x88>
 80090ca:	232d      	movs	r3, #45	; 0x2d
 80090cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090d0:	e79e      	b.n	8009010 <_printf_float+0x88>
 80090d2:	9904      	ldr	r1, [sp, #16]
 80090d4:	2947      	cmp	r1, #71	; 0x47
 80090d6:	d1c1      	bne.n	800905c <_printf_float+0xd4>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1bf      	bne.n	800905c <_printf_float+0xd4>
 80090dc:	2301      	movs	r3, #1
 80090de:	e7bc      	b.n	800905a <_printf_float+0xd2>
 80090e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80090e4:	d118      	bne.n	8009118 <_printf_float+0x190>
 80090e6:	2900      	cmp	r1, #0
 80090e8:	6863      	ldr	r3, [r4, #4]
 80090ea:	dd0b      	ble.n	8009104 <_printf_float+0x17c>
 80090ec:	6121      	str	r1, [r4, #16]
 80090ee:	b913      	cbnz	r3, 80090f6 <_printf_float+0x16e>
 80090f0:	6822      	ldr	r2, [r4, #0]
 80090f2:	07d0      	lsls	r0, r2, #31
 80090f4:	d502      	bpl.n	80090fc <_printf_float+0x174>
 80090f6:	3301      	adds	r3, #1
 80090f8:	440b      	add	r3, r1
 80090fa:	6123      	str	r3, [r4, #16]
 80090fc:	2300      	movs	r3, #0
 80090fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8009100:	9304      	str	r3, [sp, #16]
 8009102:	e7de      	b.n	80090c2 <_printf_float+0x13a>
 8009104:	b913      	cbnz	r3, 800910c <_printf_float+0x184>
 8009106:	6822      	ldr	r2, [r4, #0]
 8009108:	07d2      	lsls	r2, r2, #31
 800910a:	d501      	bpl.n	8009110 <_printf_float+0x188>
 800910c:	3302      	adds	r3, #2
 800910e:	e7f4      	b.n	80090fa <_printf_float+0x172>
 8009110:	2301      	movs	r3, #1
 8009112:	e7f2      	b.n	80090fa <_printf_float+0x172>
 8009114:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	4299      	cmp	r1, r3
 800911c:	db05      	blt.n	800912a <_printf_float+0x1a2>
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	6121      	str	r1, [r4, #16]
 8009122:	07d8      	lsls	r0, r3, #31
 8009124:	d5ea      	bpl.n	80090fc <_printf_float+0x174>
 8009126:	1c4b      	adds	r3, r1, #1
 8009128:	e7e7      	b.n	80090fa <_printf_float+0x172>
 800912a:	2900      	cmp	r1, #0
 800912c:	bfd4      	ite	le
 800912e:	f1c1 0202 	rsble	r2, r1, #2
 8009132:	2201      	movgt	r2, #1
 8009134:	4413      	add	r3, r2
 8009136:	e7e0      	b.n	80090fa <_printf_float+0x172>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	055a      	lsls	r2, r3, #21
 800913c:	d407      	bmi.n	800914e <_printf_float+0x1c6>
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	4642      	mov	r2, r8
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	d12a      	bne.n	80091a2 <_printf_float+0x21a>
 800914c:	e76a      	b.n	8009024 <_printf_float+0x9c>
 800914e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009152:	f240 80e2 	bls.w	800931a <_printf_float+0x392>
 8009156:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800915a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800915e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009162:	d133      	bne.n	80091cc <_printf_float+0x244>
 8009164:	4a38      	ldr	r2, [pc, #224]	; (8009248 <_printf_float+0x2c0>)
 8009166:	2301      	movs	r3, #1
 8009168:	4631      	mov	r1, r6
 800916a:	4628      	mov	r0, r5
 800916c:	47b8      	blx	r7
 800916e:	3001      	adds	r0, #1
 8009170:	f43f af58 	beq.w	8009024 <_printf_float+0x9c>
 8009174:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009178:	429a      	cmp	r2, r3
 800917a:	db02      	blt.n	8009182 <_printf_float+0x1fa>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	07d8      	lsls	r0, r3, #31
 8009180:	d50f      	bpl.n	80091a2 <_printf_float+0x21a>
 8009182:	4653      	mov	r3, sl
 8009184:	465a      	mov	r2, fp
 8009186:	4631      	mov	r1, r6
 8009188:	4628      	mov	r0, r5
 800918a:	47b8      	blx	r7
 800918c:	3001      	adds	r0, #1
 800918e:	f43f af49 	beq.w	8009024 <_printf_float+0x9c>
 8009192:	f04f 0800 	mov.w	r8, #0
 8009196:	f104 091a 	add.w	r9, r4, #26
 800919a:	9b08      	ldr	r3, [sp, #32]
 800919c:	3b01      	subs	r3, #1
 800919e:	4543      	cmp	r3, r8
 80091a0:	dc09      	bgt.n	80091b6 <_printf_float+0x22e>
 80091a2:	6823      	ldr	r3, [r4, #0]
 80091a4:	079b      	lsls	r3, r3, #30
 80091a6:	f100 8108 	bmi.w	80093ba <_printf_float+0x432>
 80091aa:	68e0      	ldr	r0, [r4, #12]
 80091ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ae:	4298      	cmp	r0, r3
 80091b0:	bfb8      	it	lt
 80091b2:	4618      	movlt	r0, r3
 80091b4:	e738      	b.n	8009028 <_printf_float+0xa0>
 80091b6:	2301      	movs	r3, #1
 80091b8:	464a      	mov	r2, r9
 80091ba:	4631      	mov	r1, r6
 80091bc:	4628      	mov	r0, r5
 80091be:	47b8      	blx	r7
 80091c0:	3001      	adds	r0, #1
 80091c2:	f43f af2f 	beq.w	8009024 <_printf_float+0x9c>
 80091c6:	f108 0801 	add.w	r8, r8, #1
 80091ca:	e7e6      	b.n	800919a <_printf_float+0x212>
 80091cc:	9b07      	ldr	r3, [sp, #28]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	dc3c      	bgt.n	800924c <_printf_float+0x2c4>
 80091d2:	4a1d      	ldr	r2, [pc, #116]	; (8009248 <_printf_float+0x2c0>)
 80091d4:	2301      	movs	r3, #1
 80091d6:	4631      	mov	r1, r6
 80091d8:	4628      	mov	r0, r5
 80091da:	47b8      	blx	r7
 80091dc:	3001      	adds	r0, #1
 80091de:	f43f af21 	beq.w	8009024 <_printf_float+0x9c>
 80091e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	d102      	bne.n	80091f0 <_printf_float+0x268>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	07d9      	lsls	r1, r3, #31
 80091ee:	d5d8      	bpl.n	80091a2 <_printf_float+0x21a>
 80091f0:	4653      	mov	r3, sl
 80091f2:	465a      	mov	r2, fp
 80091f4:	4631      	mov	r1, r6
 80091f6:	4628      	mov	r0, r5
 80091f8:	47b8      	blx	r7
 80091fa:	3001      	adds	r0, #1
 80091fc:	f43f af12 	beq.w	8009024 <_printf_float+0x9c>
 8009200:	f04f 0900 	mov.w	r9, #0
 8009204:	f104 0a1a 	add.w	sl, r4, #26
 8009208:	9b07      	ldr	r3, [sp, #28]
 800920a:	425b      	negs	r3, r3
 800920c:	454b      	cmp	r3, r9
 800920e:	dc01      	bgt.n	8009214 <_printf_float+0x28c>
 8009210:	9b08      	ldr	r3, [sp, #32]
 8009212:	e795      	b.n	8009140 <_printf_float+0x1b8>
 8009214:	2301      	movs	r3, #1
 8009216:	4652      	mov	r2, sl
 8009218:	4631      	mov	r1, r6
 800921a:	4628      	mov	r0, r5
 800921c:	47b8      	blx	r7
 800921e:	3001      	adds	r0, #1
 8009220:	f43f af00 	beq.w	8009024 <_printf_float+0x9c>
 8009224:	f109 0901 	add.w	r9, r9, #1
 8009228:	e7ee      	b.n	8009208 <_printf_float+0x280>
 800922a:	bf00      	nop
 800922c:	f3af 8000 	nop.w
 8009230:	ffffffff 	.word	0xffffffff
 8009234:	7fefffff 	.word	0x7fefffff
 8009238:	0800bb00 	.word	0x0800bb00
 800923c:	0800bb04 	.word	0x0800bb04
 8009240:	0800bb0c 	.word	0x0800bb0c
 8009244:	0800bb08 	.word	0x0800bb08
 8009248:	0800bb10 	.word	0x0800bb10
 800924c:	9a08      	ldr	r2, [sp, #32]
 800924e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009250:	429a      	cmp	r2, r3
 8009252:	bfa8      	it	ge
 8009254:	461a      	movge	r2, r3
 8009256:	2a00      	cmp	r2, #0
 8009258:	4691      	mov	r9, r2
 800925a:	dc38      	bgt.n	80092ce <_printf_float+0x346>
 800925c:	2300      	movs	r3, #0
 800925e:	9305      	str	r3, [sp, #20]
 8009260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009264:	f104 021a 	add.w	r2, r4, #26
 8009268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800926a:	9905      	ldr	r1, [sp, #20]
 800926c:	9304      	str	r3, [sp, #16]
 800926e:	eba3 0309 	sub.w	r3, r3, r9
 8009272:	428b      	cmp	r3, r1
 8009274:	dc33      	bgt.n	80092de <_printf_float+0x356>
 8009276:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800927a:	429a      	cmp	r2, r3
 800927c:	db3c      	blt.n	80092f8 <_printf_float+0x370>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	07da      	lsls	r2, r3, #31
 8009282:	d439      	bmi.n	80092f8 <_printf_float+0x370>
 8009284:	9a08      	ldr	r2, [sp, #32]
 8009286:	9b04      	ldr	r3, [sp, #16]
 8009288:	9907      	ldr	r1, [sp, #28]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	eba2 0901 	sub.w	r9, r2, r1
 8009290:	4599      	cmp	r9, r3
 8009292:	bfa8      	it	ge
 8009294:	4699      	movge	r9, r3
 8009296:	f1b9 0f00 	cmp.w	r9, #0
 800929a:	dc35      	bgt.n	8009308 <_printf_float+0x380>
 800929c:	f04f 0800 	mov.w	r8, #0
 80092a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092a4:	f104 0a1a 	add.w	sl, r4, #26
 80092a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80092ac:	1a9b      	subs	r3, r3, r2
 80092ae:	eba3 0309 	sub.w	r3, r3, r9
 80092b2:	4543      	cmp	r3, r8
 80092b4:	f77f af75 	ble.w	80091a2 <_printf_float+0x21a>
 80092b8:	2301      	movs	r3, #1
 80092ba:	4652      	mov	r2, sl
 80092bc:	4631      	mov	r1, r6
 80092be:	4628      	mov	r0, r5
 80092c0:	47b8      	blx	r7
 80092c2:	3001      	adds	r0, #1
 80092c4:	f43f aeae 	beq.w	8009024 <_printf_float+0x9c>
 80092c8:	f108 0801 	add.w	r8, r8, #1
 80092cc:	e7ec      	b.n	80092a8 <_printf_float+0x320>
 80092ce:	4613      	mov	r3, r2
 80092d0:	4631      	mov	r1, r6
 80092d2:	4642      	mov	r2, r8
 80092d4:	4628      	mov	r0, r5
 80092d6:	47b8      	blx	r7
 80092d8:	3001      	adds	r0, #1
 80092da:	d1bf      	bne.n	800925c <_printf_float+0x2d4>
 80092dc:	e6a2      	b.n	8009024 <_printf_float+0x9c>
 80092de:	2301      	movs	r3, #1
 80092e0:	4631      	mov	r1, r6
 80092e2:	4628      	mov	r0, r5
 80092e4:	9204      	str	r2, [sp, #16]
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f ae9b 	beq.w	8009024 <_printf_float+0x9c>
 80092ee:	9b05      	ldr	r3, [sp, #20]
 80092f0:	9a04      	ldr	r2, [sp, #16]
 80092f2:	3301      	adds	r3, #1
 80092f4:	9305      	str	r3, [sp, #20]
 80092f6:	e7b7      	b.n	8009268 <_printf_float+0x2e0>
 80092f8:	4653      	mov	r3, sl
 80092fa:	465a      	mov	r2, fp
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	d1be      	bne.n	8009284 <_printf_float+0x2fc>
 8009306:	e68d      	b.n	8009024 <_printf_float+0x9c>
 8009308:	9a04      	ldr	r2, [sp, #16]
 800930a:	464b      	mov	r3, r9
 800930c:	4442      	add	r2, r8
 800930e:	4631      	mov	r1, r6
 8009310:	4628      	mov	r0, r5
 8009312:	47b8      	blx	r7
 8009314:	3001      	adds	r0, #1
 8009316:	d1c1      	bne.n	800929c <_printf_float+0x314>
 8009318:	e684      	b.n	8009024 <_printf_float+0x9c>
 800931a:	9a08      	ldr	r2, [sp, #32]
 800931c:	2a01      	cmp	r2, #1
 800931e:	dc01      	bgt.n	8009324 <_printf_float+0x39c>
 8009320:	07db      	lsls	r3, r3, #31
 8009322:	d537      	bpl.n	8009394 <_printf_float+0x40c>
 8009324:	2301      	movs	r3, #1
 8009326:	4642      	mov	r2, r8
 8009328:	4631      	mov	r1, r6
 800932a:	4628      	mov	r0, r5
 800932c:	47b8      	blx	r7
 800932e:	3001      	adds	r0, #1
 8009330:	f43f ae78 	beq.w	8009024 <_printf_float+0x9c>
 8009334:	4653      	mov	r3, sl
 8009336:	465a      	mov	r2, fp
 8009338:	4631      	mov	r1, r6
 800933a:	4628      	mov	r0, r5
 800933c:	47b8      	blx	r7
 800933e:	3001      	adds	r0, #1
 8009340:	f43f ae70 	beq.w	8009024 <_printf_float+0x9c>
 8009344:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009348:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800934c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009350:	d01b      	beq.n	800938a <_printf_float+0x402>
 8009352:	9b08      	ldr	r3, [sp, #32]
 8009354:	f108 0201 	add.w	r2, r8, #1
 8009358:	3b01      	subs	r3, #1
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	47b8      	blx	r7
 8009360:	3001      	adds	r0, #1
 8009362:	d10e      	bne.n	8009382 <_printf_float+0x3fa>
 8009364:	e65e      	b.n	8009024 <_printf_float+0x9c>
 8009366:	2301      	movs	r3, #1
 8009368:	464a      	mov	r2, r9
 800936a:	4631      	mov	r1, r6
 800936c:	4628      	mov	r0, r5
 800936e:	47b8      	blx	r7
 8009370:	3001      	adds	r0, #1
 8009372:	f43f ae57 	beq.w	8009024 <_printf_float+0x9c>
 8009376:	f108 0801 	add.w	r8, r8, #1
 800937a:	9b08      	ldr	r3, [sp, #32]
 800937c:	3b01      	subs	r3, #1
 800937e:	4543      	cmp	r3, r8
 8009380:	dcf1      	bgt.n	8009366 <_printf_float+0x3de>
 8009382:	9b04      	ldr	r3, [sp, #16]
 8009384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009388:	e6db      	b.n	8009142 <_printf_float+0x1ba>
 800938a:	f04f 0800 	mov.w	r8, #0
 800938e:	f104 091a 	add.w	r9, r4, #26
 8009392:	e7f2      	b.n	800937a <_printf_float+0x3f2>
 8009394:	2301      	movs	r3, #1
 8009396:	4642      	mov	r2, r8
 8009398:	e7df      	b.n	800935a <_printf_float+0x3d2>
 800939a:	2301      	movs	r3, #1
 800939c:	464a      	mov	r2, r9
 800939e:	4631      	mov	r1, r6
 80093a0:	4628      	mov	r0, r5
 80093a2:	47b8      	blx	r7
 80093a4:	3001      	adds	r0, #1
 80093a6:	f43f ae3d 	beq.w	8009024 <_printf_float+0x9c>
 80093aa:	f108 0801 	add.w	r8, r8, #1
 80093ae:	68e3      	ldr	r3, [r4, #12]
 80093b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093b2:	1a5b      	subs	r3, r3, r1
 80093b4:	4543      	cmp	r3, r8
 80093b6:	dcf0      	bgt.n	800939a <_printf_float+0x412>
 80093b8:	e6f7      	b.n	80091aa <_printf_float+0x222>
 80093ba:	f04f 0800 	mov.w	r8, #0
 80093be:	f104 0919 	add.w	r9, r4, #25
 80093c2:	e7f4      	b.n	80093ae <_printf_float+0x426>

080093c4 <_printf_common>:
 80093c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c8:	4616      	mov	r6, r2
 80093ca:	4699      	mov	r9, r3
 80093cc:	688a      	ldr	r2, [r1, #8]
 80093ce:	690b      	ldr	r3, [r1, #16]
 80093d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093d4:	4293      	cmp	r3, r2
 80093d6:	bfb8      	it	lt
 80093d8:	4613      	movlt	r3, r2
 80093da:	6033      	str	r3, [r6, #0]
 80093dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093e0:	4607      	mov	r7, r0
 80093e2:	460c      	mov	r4, r1
 80093e4:	b10a      	cbz	r2, 80093ea <_printf_common+0x26>
 80093e6:	3301      	adds	r3, #1
 80093e8:	6033      	str	r3, [r6, #0]
 80093ea:	6823      	ldr	r3, [r4, #0]
 80093ec:	0699      	lsls	r1, r3, #26
 80093ee:	bf42      	ittt	mi
 80093f0:	6833      	ldrmi	r3, [r6, #0]
 80093f2:	3302      	addmi	r3, #2
 80093f4:	6033      	strmi	r3, [r6, #0]
 80093f6:	6825      	ldr	r5, [r4, #0]
 80093f8:	f015 0506 	ands.w	r5, r5, #6
 80093fc:	d106      	bne.n	800940c <_printf_common+0x48>
 80093fe:	f104 0a19 	add.w	sl, r4, #25
 8009402:	68e3      	ldr	r3, [r4, #12]
 8009404:	6832      	ldr	r2, [r6, #0]
 8009406:	1a9b      	subs	r3, r3, r2
 8009408:	42ab      	cmp	r3, r5
 800940a:	dc26      	bgt.n	800945a <_printf_common+0x96>
 800940c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009410:	1e13      	subs	r3, r2, #0
 8009412:	6822      	ldr	r2, [r4, #0]
 8009414:	bf18      	it	ne
 8009416:	2301      	movne	r3, #1
 8009418:	0692      	lsls	r2, r2, #26
 800941a:	d42b      	bmi.n	8009474 <_printf_common+0xb0>
 800941c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009420:	4649      	mov	r1, r9
 8009422:	4638      	mov	r0, r7
 8009424:	47c0      	blx	r8
 8009426:	3001      	adds	r0, #1
 8009428:	d01e      	beq.n	8009468 <_printf_common+0xa4>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	68e5      	ldr	r5, [r4, #12]
 800942e:	6832      	ldr	r2, [r6, #0]
 8009430:	f003 0306 	and.w	r3, r3, #6
 8009434:	2b04      	cmp	r3, #4
 8009436:	bf08      	it	eq
 8009438:	1aad      	subeq	r5, r5, r2
 800943a:	68a3      	ldr	r3, [r4, #8]
 800943c:	6922      	ldr	r2, [r4, #16]
 800943e:	bf0c      	ite	eq
 8009440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009444:	2500      	movne	r5, #0
 8009446:	4293      	cmp	r3, r2
 8009448:	bfc4      	itt	gt
 800944a:	1a9b      	subgt	r3, r3, r2
 800944c:	18ed      	addgt	r5, r5, r3
 800944e:	2600      	movs	r6, #0
 8009450:	341a      	adds	r4, #26
 8009452:	42b5      	cmp	r5, r6
 8009454:	d11a      	bne.n	800948c <_printf_common+0xc8>
 8009456:	2000      	movs	r0, #0
 8009458:	e008      	b.n	800946c <_printf_common+0xa8>
 800945a:	2301      	movs	r3, #1
 800945c:	4652      	mov	r2, sl
 800945e:	4649      	mov	r1, r9
 8009460:	4638      	mov	r0, r7
 8009462:	47c0      	blx	r8
 8009464:	3001      	adds	r0, #1
 8009466:	d103      	bne.n	8009470 <_printf_common+0xac>
 8009468:	f04f 30ff 	mov.w	r0, #4294967295
 800946c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009470:	3501      	adds	r5, #1
 8009472:	e7c6      	b.n	8009402 <_printf_common+0x3e>
 8009474:	18e1      	adds	r1, r4, r3
 8009476:	1c5a      	adds	r2, r3, #1
 8009478:	2030      	movs	r0, #48	; 0x30
 800947a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800947e:	4422      	add	r2, r4
 8009480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009488:	3302      	adds	r3, #2
 800948a:	e7c7      	b.n	800941c <_printf_common+0x58>
 800948c:	2301      	movs	r3, #1
 800948e:	4622      	mov	r2, r4
 8009490:	4649      	mov	r1, r9
 8009492:	4638      	mov	r0, r7
 8009494:	47c0      	blx	r8
 8009496:	3001      	adds	r0, #1
 8009498:	d0e6      	beq.n	8009468 <_printf_common+0xa4>
 800949a:	3601      	adds	r6, #1
 800949c:	e7d9      	b.n	8009452 <_printf_common+0x8e>
	...

080094a0 <_printf_i>:
 80094a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	460c      	mov	r4, r1
 80094a6:	4691      	mov	r9, r2
 80094a8:	7e27      	ldrb	r7, [r4, #24]
 80094aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80094ac:	2f78      	cmp	r7, #120	; 0x78
 80094ae:	4680      	mov	r8, r0
 80094b0:	469a      	mov	sl, r3
 80094b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094b6:	d807      	bhi.n	80094c8 <_printf_i+0x28>
 80094b8:	2f62      	cmp	r7, #98	; 0x62
 80094ba:	d80a      	bhi.n	80094d2 <_printf_i+0x32>
 80094bc:	2f00      	cmp	r7, #0
 80094be:	f000 80d8 	beq.w	8009672 <_printf_i+0x1d2>
 80094c2:	2f58      	cmp	r7, #88	; 0x58
 80094c4:	f000 80a3 	beq.w	800960e <_printf_i+0x16e>
 80094c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094d0:	e03a      	b.n	8009548 <_printf_i+0xa8>
 80094d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094d6:	2b15      	cmp	r3, #21
 80094d8:	d8f6      	bhi.n	80094c8 <_printf_i+0x28>
 80094da:	a001      	add	r0, pc, #4	; (adr r0, 80094e0 <_printf_i+0x40>)
 80094dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80094e0:	08009539 	.word	0x08009539
 80094e4:	0800954d 	.word	0x0800954d
 80094e8:	080094c9 	.word	0x080094c9
 80094ec:	080094c9 	.word	0x080094c9
 80094f0:	080094c9 	.word	0x080094c9
 80094f4:	080094c9 	.word	0x080094c9
 80094f8:	0800954d 	.word	0x0800954d
 80094fc:	080094c9 	.word	0x080094c9
 8009500:	080094c9 	.word	0x080094c9
 8009504:	080094c9 	.word	0x080094c9
 8009508:	080094c9 	.word	0x080094c9
 800950c:	08009659 	.word	0x08009659
 8009510:	0800957d 	.word	0x0800957d
 8009514:	0800963b 	.word	0x0800963b
 8009518:	080094c9 	.word	0x080094c9
 800951c:	080094c9 	.word	0x080094c9
 8009520:	0800967b 	.word	0x0800967b
 8009524:	080094c9 	.word	0x080094c9
 8009528:	0800957d 	.word	0x0800957d
 800952c:	080094c9 	.word	0x080094c9
 8009530:	080094c9 	.word	0x080094c9
 8009534:	08009643 	.word	0x08009643
 8009538:	680b      	ldr	r3, [r1, #0]
 800953a:	1d1a      	adds	r2, r3, #4
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	600a      	str	r2, [r1, #0]
 8009540:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009548:	2301      	movs	r3, #1
 800954a:	e0a3      	b.n	8009694 <_printf_i+0x1f4>
 800954c:	6825      	ldr	r5, [r4, #0]
 800954e:	6808      	ldr	r0, [r1, #0]
 8009550:	062e      	lsls	r6, r5, #24
 8009552:	f100 0304 	add.w	r3, r0, #4
 8009556:	d50a      	bpl.n	800956e <_printf_i+0xce>
 8009558:	6805      	ldr	r5, [r0, #0]
 800955a:	600b      	str	r3, [r1, #0]
 800955c:	2d00      	cmp	r5, #0
 800955e:	da03      	bge.n	8009568 <_printf_i+0xc8>
 8009560:	232d      	movs	r3, #45	; 0x2d
 8009562:	426d      	negs	r5, r5
 8009564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009568:	485e      	ldr	r0, [pc, #376]	; (80096e4 <_printf_i+0x244>)
 800956a:	230a      	movs	r3, #10
 800956c:	e019      	b.n	80095a2 <_printf_i+0x102>
 800956e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009572:	6805      	ldr	r5, [r0, #0]
 8009574:	600b      	str	r3, [r1, #0]
 8009576:	bf18      	it	ne
 8009578:	b22d      	sxthne	r5, r5
 800957a:	e7ef      	b.n	800955c <_printf_i+0xbc>
 800957c:	680b      	ldr	r3, [r1, #0]
 800957e:	6825      	ldr	r5, [r4, #0]
 8009580:	1d18      	adds	r0, r3, #4
 8009582:	6008      	str	r0, [r1, #0]
 8009584:	0628      	lsls	r0, r5, #24
 8009586:	d501      	bpl.n	800958c <_printf_i+0xec>
 8009588:	681d      	ldr	r5, [r3, #0]
 800958a:	e002      	b.n	8009592 <_printf_i+0xf2>
 800958c:	0669      	lsls	r1, r5, #25
 800958e:	d5fb      	bpl.n	8009588 <_printf_i+0xe8>
 8009590:	881d      	ldrh	r5, [r3, #0]
 8009592:	4854      	ldr	r0, [pc, #336]	; (80096e4 <_printf_i+0x244>)
 8009594:	2f6f      	cmp	r7, #111	; 0x6f
 8009596:	bf0c      	ite	eq
 8009598:	2308      	moveq	r3, #8
 800959a:	230a      	movne	r3, #10
 800959c:	2100      	movs	r1, #0
 800959e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095a2:	6866      	ldr	r6, [r4, #4]
 80095a4:	60a6      	str	r6, [r4, #8]
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	bfa2      	ittt	ge
 80095aa:	6821      	ldrge	r1, [r4, #0]
 80095ac:	f021 0104 	bicge.w	r1, r1, #4
 80095b0:	6021      	strge	r1, [r4, #0]
 80095b2:	b90d      	cbnz	r5, 80095b8 <_printf_i+0x118>
 80095b4:	2e00      	cmp	r6, #0
 80095b6:	d04d      	beq.n	8009654 <_printf_i+0x1b4>
 80095b8:	4616      	mov	r6, r2
 80095ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80095be:	fb03 5711 	mls	r7, r3, r1, r5
 80095c2:	5dc7      	ldrb	r7, [r0, r7]
 80095c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095c8:	462f      	mov	r7, r5
 80095ca:	42bb      	cmp	r3, r7
 80095cc:	460d      	mov	r5, r1
 80095ce:	d9f4      	bls.n	80095ba <_printf_i+0x11a>
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d10b      	bne.n	80095ec <_printf_i+0x14c>
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	07df      	lsls	r7, r3, #31
 80095d8:	d508      	bpl.n	80095ec <_printf_i+0x14c>
 80095da:	6923      	ldr	r3, [r4, #16]
 80095dc:	6861      	ldr	r1, [r4, #4]
 80095de:	4299      	cmp	r1, r3
 80095e0:	bfde      	ittt	le
 80095e2:	2330      	movle	r3, #48	; 0x30
 80095e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80095e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80095ec:	1b92      	subs	r2, r2, r6
 80095ee:	6122      	str	r2, [r4, #16]
 80095f0:	f8cd a000 	str.w	sl, [sp]
 80095f4:	464b      	mov	r3, r9
 80095f6:	aa03      	add	r2, sp, #12
 80095f8:	4621      	mov	r1, r4
 80095fa:	4640      	mov	r0, r8
 80095fc:	f7ff fee2 	bl	80093c4 <_printf_common>
 8009600:	3001      	adds	r0, #1
 8009602:	d14c      	bne.n	800969e <_printf_i+0x1fe>
 8009604:	f04f 30ff 	mov.w	r0, #4294967295
 8009608:	b004      	add	sp, #16
 800960a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960e:	4835      	ldr	r0, [pc, #212]	; (80096e4 <_printf_i+0x244>)
 8009610:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009614:	6823      	ldr	r3, [r4, #0]
 8009616:	680e      	ldr	r6, [r1, #0]
 8009618:	061f      	lsls	r7, r3, #24
 800961a:	f856 5b04 	ldr.w	r5, [r6], #4
 800961e:	600e      	str	r6, [r1, #0]
 8009620:	d514      	bpl.n	800964c <_printf_i+0x1ac>
 8009622:	07d9      	lsls	r1, r3, #31
 8009624:	bf44      	itt	mi
 8009626:	f043 0320 	orrmi.w	r3, r3, #32
 800962a:	6023      	strmi	r3, [r4, #0]
 800962c:	b91d      	cbnz	r5, 8009636 <_printf_i+0x196>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	f023 0320 	bic.w	r3, r3, #32
 8009634:	6023      	str	r3, [r4, #0]
 8009636:	2310      	movs	r3, #16
 8009638:	e7b0      	b.n	800959c <_printf_i+0xfc>
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	f043 0320 	orr.w	r3, r3, #32
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	2378      	movs	r3, #120	; 0x78
 8009644:	4828      	ldr	r0, [pc, #160]	; (80096e8 <_printf_i+0x248>)
 8009646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800964a:	e7e3      	b.n	8009614 <_printf_i+0x174>
 800964c:	065e      	lsls	r6, r3, #25
 800964e:	bf48      	it	mi
 8009650:	b2ad      	uxthmi	r5, r5
 8009652:	e7e6      	b.n	8009622 <_printf_i+0x182>
 8009654:	4616      	mov	r6, r2
 8009656:	e7bb      	b.n	80095d0 <_printf_i+0x130>
 8009658:	680b      	ldr	r3, [r1, #0]
 800965a:	6826      	ldr	r6, [r4, #0]
 800965c:	6960      	ldr	r0, [r4, #20]
 800965e:	1d1d      	adds	r5, r3, #4
 8009660:	600d      	str	r5, [r1, #0]
 8009662:	0635      	lsls	r5, r6, #24
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	d501      	bpl.n	800966c <_printf_i+0x1cc>
 8009668:	6018      	str	r0, [r3, #0]
 800966a:	e002      	b.n	8009672 <_printf_i+0x1d2>
 800966c:	0671      	lsls	r1, r6, #25
 800966e:	d5fb      	bpl.n	8009668 <_printf_i+0x1c8>
 8009670:	8018      	strh	r0, [r3, #0]
 8009672:	2300      	movs	r3, #0
 8009674:	6123      	str	r3, [r4, #16]
 8009676:	4616      	mov	r6, r2
 8009678:	e7ba      	b.n	80095f0 <_printf_i+0x150>
 800967a:	680b      	ldr	r3, [r1, #0]
 800967c:	1d1a      	adds	r2, r3, #4
 800967e:	600a      	str	r2, [r1, #0]
 8009680:	681e      	ldr	r6, [r3, #0]
 8009682:	6862      	ldr	r2, [r4, #4]
 8009684:	2100      	movs	r1, #0
 8009686:	4630      	mov	r0, r6
 8009688:	f7f6 fde2 	bl	8000250 <memchr>
 800968c:	b108      	cbz	r0, 8009692 <_printf_i+0x1f2>
 800968e:	1b80      	subs	r0, r0, r6
 8009690:	6060      	str	r0, [r4, #4]
 8009692:	6863      	ldr	r3, [r4, #4]
 8009694:	6123      	str	r3, [r4, #16]
 8009696:	2300      	movs	r3, #0
 8009698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800969c:	e7a8      	b.n	80095f0 <_printf_i+0x150>
 800969e:	6923      	ldr	r3, [r4, #16]
 80096a0:	4632      	mov	r2, r6
 80096a2:	4649      	mov	r1, r9
 80096a4:	4640      	mov	r0, r8
 80096a6:	47d0      	blx	sl
 80096a8:	3001      	adds	r0, #1
 80096aa:	d0ab      	beq.n	8009604 <_printf_i+0x164>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	079b      	lsls	r3, r3, #30
 80096b0:	d413      	bmi.n	80096da <_printf_i+0x23a>
 80096b2:	68e0      	ldr	r0, [r4, #12]
 80096b4:	9b03      	ldr	r3, [sp, #12]
 80096b6:	4298      	cmp	r0, r3
 80096b8:	bfb8      	it	lt
 80096ba:	4618      	movlt	r0, r3
 80096bc:	e7a4      	b.n	8009608 <_printf_i+0x168>
 80096be:	2301      	movs	r3, #1
 80096c0:	4632      	mov	r2, r6
 80096c2:	4649      	mov	r1, r9
 80096c4:	4640      	mov	r0, r8
 80096c6:	47d0      	blx	sl
 80096c8:	3001      	adds	r0, #1
 80096ca:	d09b      	beq.n	8009604 <_printf_i+0x164>
 80096cc:	3501      	adds	r5, #1
 80096ce:	68e3      	ldr	r3, [r4, #12]
 80096d0:	9903      	ldr	r1, [sp, #12]
 80096d2:	1a5b      	subs	r3, r3, r1
 80096d4:	42ab      	cmp	r3, r5
 80096d6:	dcf2      	bgt.n	80096be <_printf_i+0x21e>
 80096d8:	e7eb      	b.n	80096b2 <_printf_i+0x212>
 80096da:	2500      	movs	r5, #0
 80096dc:	f104 0619 	add.w	r6, r4, #25
 80096e0:	e7f5      	b.n	80096ce <_printf_i+0x22e>
 80096e2:	bf00      	nop
 80096e4:	0800bb12 	.word	0x0800bb12
 80096e8:	0800bb23 	.word	0x0800bb23

080096ec <siprintf>:
 80096ec:	b40e      	push	{r1, r2, r3}
 80096ee:	b500      	push	{lr}
 80096f0:	b09c      	sub	sp, #112	; 0x70
 80096f2:	ab1d      	add	r3, sp, #116	; 0x74
 80096f4:	9002      	str	r0, [sp, #8]
 80096f6:	9006      	str	r0, [sp, #24]
 80096f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096fc:	4809      	ldr	r0, [pc, #36]	; (8009724 <siprintf+0x38>)
 80096fe:	9107      	str	r1, [sp, #28]
 8009700:	9104      	str	r1, [sp, #16]
 8009702:	4909      	ldr	r1, [pc, #36]	; (8009728 <siprintf+0x3c>)
 8009704:	f853 2b04 	ldr.w	r2, [r3], #4
 8009708:	9105      	str	r1, [sp, #20]
 800970a:	6800      	ldr	r0, [r0, #0]
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	a902      	add	r1, sp, #8
 8009710:	f001 facc 	bl	800acac <_svfiprintf_r>
 8009714:	9b02      	ldr	r3, [sp, #8]
 8009716:	2200      	movs	r2, #0
 8009718:	701a      	strb	r2, [r3, #0]
 800971a:	b01c      	add	sp, #112	; 0x70
 800971c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009720:	b003      	add	sp, #12
 8009722:	4770      	bx	lr
 8009724:	2000003c 	.word	0x2000003c
 8009728:	ffff0208 	.word	0xffff0208

0800972c <strncpy>:
 800972c:	b510      	push	{r4, lr}
 800972e:	3901      	subs	r1, #1
 8009730:	4603      	mov	r3, r0
 8009732:	b132      	cbz	r2, 8009742 <strncpy+0x16>
 8009734:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009738:	f803 4b01 	strb.w	r4, [r3], #1
 800973c:	3a01      	subs	r2, #1
 800973e:	2c00      	cmp	r4, #0
 8009740:	d1f7      	bne.n	8009732 <strncpy+0x6>
 8009742:	441a      	add	r2, r3
 8009744:	2100      	movs	r1, #0
 8009746:	4293      	cmp	r3, r2
 8009748:	d100      	bne.n	800974c <strncpy+0x20>
 800974a:	bd10      	pop	{r4, pc}
 800974c:	f803 1b01 	strb.w	r1, [r3], #1
 8009750:	e7f9      	b.n	8009746 <strncpy+0x1a>

08009752 <quorem>:
 8009752:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009756:	6903      	ldr	r3, [r0, #16]
 8009758:	690c      	ldr	r4, [r1, #16]
 800975a:	42a3      	cmp	r3, r4
 800975c:	4607      	mov	r7, r0
 800975e:	f2c0 8081 	blt.w	8009864 <quorem+0x112>
 8009762:	3c01      	subs	r4, #1
 8009764:	f101 0814 	add.w	r8, r1, #20
 8009768:	f100 0514 	add.w	r5, r0, #20
 800976c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800977a:	3301      	adds	r3, #1
 800977c:	429a      	cmp	r2, r3
 800977e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009782:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009786:	fbb2 f6f3 	udiv	r6, r2, r3
 800978a:	d331      	bcc.n	80097f0 <quorem+0x9e>
 800978c:	f04f 0e00 	mov.w	lr, #0
 8009790:	4640      	mov	r0, r8
 8009792:	46ac      	mov	ip, r5
 8009794:	46f2      	mov	sl, lr
 8009796:	f850 2b04 	ldr.w	r2, [r0], #4
 800979a:	b293      	uxth	r3, r2
 800979c:	fb06 e303 	mla	r3, r6, r3, lr
 80097a0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	ebaa 0303 	sub.w	r3, sl, r3
 80097aa:	0c12      	lsrs	r2, r2, #16
 80097ac:	f8dc a000 	ldr.w	sl, [ip]
 80097b0:	fb06 e202 	mla	r2, r6, r2, lr
 80097b4:	fa13 f38a 	uxtah	r3, r3, sl
 80097b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097bc:	fa1f fa82 	uxth.w	sl, r2
 80097c0:	f8dc 2000 	ldr.w	r2, [ip]
 80097c4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80097c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097d2:	4581      	cmp	r9, r0
 80097d4:	f84c 3b04 	str.w	r3, [ip], #4
 80097d8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097dc:	d2db      	bcs.n	8009796 <quorem+0x44>
 80097de:	f855 300b 	ldr.w	r3, [r5, fp]
 80097e2:	b92b      	cbnz	r3, 80097f0 <quorem+0x9e>
 80097e4:	9b01      	ldr	r3, [sp, #4]
 80097e6:	3b04      	subs	r3, #4
 80097e8:	429d      	cmp	r5, r3
 80097ea:	461a      	mov	r2, r3
 80097ec:	d32e      	bcc.n	800984c <quorem+0xfa>
 80097ee:	613c      	str	r4, [r7, #16]
 80097f0:	4638      	mov	r0, r7
 80097f2:	f001 f845 	bl	800a880 <__mcmp>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	db24      	blt.n	8009844 <quorem+0xf2>
 80097fa:	3601      	adds	r6, #1
 80097fc:	4628      	mov	r0, r5
 80097fe:	f04f 0c00 	mov.w	ip, #0
 8009802:	f858 2b04 	ldr.w	r2, [r8], #4
 8009806:	f8d0 e000 	ldr.w	lr, [r0]
 800980a:	b293      	uxth	r3, r2
 800980c:	ebac 0303 	sub.w	r3, ip, r3
 8009810:	0c12      	lsrs	r2, r2, #16
 8009812:	fa13 f38e 	uxtah	r3, r3, lr
 8009816:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800981a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800981e:	b29b      	uxth	r3, r3
 8009820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009824:	45c1      	cmp	r9, r8
 8009826:	f840 3b04 	str.w	r3, [r0], #4
 800982a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800982e:	d2e8      	bcs.n	8009802 <quorem+0xb0>
 8009830:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009834:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009838:	b922      	cbnz	r2, 8009844 <quorem+0xf2>
 800983a:	3b04      	subs	r3, #4
 800983c:	429d      	cmp	r5, r3
 800983e:	461a      	mov	r2, r3
 8009840:	d30a      	bcc.n	8009858 <quorem+0x106>
 8009842:	613c      	str	r4, [r7, #16]
 8009844:	4630      	mov	r0, r6
 8009846:	b003      	add	sp, #12
 8009848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984c:	6812      	ldr	r2, [r2, #0]
 800984e:	3b04      	subs	r3, #4
 8009850:	2a00      	cmp	r2, #0
 8009852:	d1cc      	bne.n	80097ee <quorem+0x9c>
 8009854:	3c01      	subs	r4, #1
 8009856:	e7c7      	b.n	80097e8 <quorem+0x96>
 8009858:	6812      	ldr	r2, [r2, #0]
 800985a:	3b04      	subs	r3, #4
 800985c:	2a00      	cmp	r2, #0
 800985e:	d1f0      	bne.n	8009842 <quorem+0xf0>
 8009860:	3c01      	subs	r4, #1
 8009862:	e7eb      	b.n	800983c <quorem+0xea>
 8009864:	2000      	movs	r0, #0
 8009866:	e7ee      	b.n	8009846 <quorem+0xf4>

08009868 <_dtoa_r>:
 8009868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	ec59 8b10 	vmov	r8, r9, d0
 8009870:	b095      	sub	sp, #84	; 0x54
 8009872:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009874:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009876:	9107      	str	r1, [sp, #28]
 8009878:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800987c:	4606      	mov	r6, r0
 800987e:	9209      	str	r2, [sp, #36]	; 0x24
 8009880:	9310      	str	r3, [sp, #64]	; 0x40
 8009882:	b975      	cbnz	r5, 80098a2 <_dtoa_r+0x3a>
 8009884:	2010      	movs	r0, #16
 8009886:	f000 fd75 	bl	800a374 <malloc>
 800988a:	4602      	mov	r2, r0
 800988c:	6270      	str	r0, [r6, #36]	; 0x24
 800988e:	b920      	cbnz	r0, 800989a <_dtoa_r+0x32>
 8009890:	4bab      	ldr	r3, [pc, #684]	; (8009b40 <_dtoa_r+0x2d8>)
 8009892:	21ea      	movs	r1, #234	; 0xea
 8009894:	48ab      	ldr	r0, [pc, #684]	; (8009b44 <_dtoa_r+0x2dc>)
 8009896:	f001 fb19 	bl	800aecc <__assert_func>
 800989a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800989e:	6005      	str	r5, [r0, #0]
 80098a0:	60c5      	str	r5, [r0, #12]
 80098a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80098a4:	6819      	ldr	r1, [r3, #0]
 80098a6:	b151      	cbz	r1, 80098be <_dtoa_r+0x56>
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	604a      	str	r2, [r1, #4]
 80098ac:	2301      	movs	r3, #1
 80098ae:	4093      	lsls	r3, r2
 80098b0:	608b      	str	r3, [r1, #8]
 80098b2:	4630      	mov	r0, r6
 80098b4:	f000 fda6 	bl	800a404 <_Bfree>
 80098b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	f1b9 0300 	subs.w	r3, r9, #0
 80098c2:	bfbb      	ittet	lt
 80098c4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098c8:	9303      	strlt	r3, [sp, #12]
 80098ca:	2300      	movge	r3, #0
 80098cc:	2201      	movlt	r2, #1
 80098ce:	bfac      	ite	ge
 80098d0:	6023      	strge	r3, [r4, #0]
 80098d2:	6022      	strlt	r2, [r4, #0]
 80098d4:	4b9c      	ldr	r3, [pc, #624]	; (8009b48 <_dtoa_r+0x2e0>)
 80098d6:	9c03      	ldr	r4, [sp, #12]
 80098d8:	43a3      	bics	r3, r4
 80098da:	d11a      	bne.n	8009912 <_dtoa_r+0xaa>
 80098dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098de:	f242 730f 	movw	r3, #9999	; 0x270f
 80098e2:	6013      	str	r3, [r2, #0]
 80098e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80098e8:	ea53 0308 	orrs.w	r3, r3, r8
 80098ec:	f000 8512 	beq.w	800a314 <_dtoa_r+0xaac>
 80098f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80098f2:	b953      	cbnz	r3, 800990a <_dtoa_r+0xa2>
 80098f4:	4b95      	ldr	r3, [pc, #596]	; (8009b4c <_dtoa_r+0x2e4>)
 80098f6:	e01f      	b.n	8009938 <_dtoa_r+0xd0>
 80098f8:	4b95      	ldr	r3, [pc, #596]	; (8009b50 <_dtoa_r+0x2e8>)
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	3308      	adds	r3, #8
 80098fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	9800      	ldr	r0, [sp, #0]
 8009904:	b015      	add	sp, #84	; 0x54
 8009906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990a:	4b90      	ldr	r3, [pc, #576]	; (8009b4c <_dtoa_r+0x2e4>)
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	3303      	adds	r3, #3
 8009910:	e7f5      	b.n	80098fe <_dtoa_r+0x96>
 8009912:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009916:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800991a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009922:	d10b      	bne.n	800993c <_dtoa_r+0xd4>
 8009924:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009926:	2301      	movs	r3, #1
 8009928:	6013      	str	r3, [r2, #0]
 800992a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800992c:	2b00      	cmp	r3, #0
 800992e:	f000 84ee 	beq.w	800a30e <_dtoa_r+0xaa6>
 8009932:	4888      	ldr	r0, [pc, #544]	; (8009b54 <_dtoa_r+0x2ec>)
 8009934:	6018      	str	r0, [r3, #0]
 8009936:	1e43      	subs	r3, r0, #1
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	e7e2      	b.n	8009902 <_dtoa_r+0x9a>
 800993c:	a913      	add	r1, sp, #76	; 0x4c
 800993e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009942:	aa12      	add	r2, sp, #72	; 0x48
 8009944:	4630      	mov	r0, r6
 8009946:	f001 f83f 	bl	800a9c8 <__d2b>
 800994a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800994e:	4605      	mov	r5, r0
 8009950:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009952:	2900      	cmp	r1, #0
 8009954:	d047      	beq.n	80099e6 <_dtoa_r+0x17e>
 8009956:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009958:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800995c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009960:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009964:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009968:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800996c:	2400      	movs	r4, #0
 800996e:	ec43 2b16 	vmov	d6, r2, r3
 8009972:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009976:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009b28 <_dtoa_r+0x2c0>
 800997a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800997e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009b30 <_dtoa_r+0x2c8>
 8009982:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009986:	eeb0 7b46 	vmov.f64	d7, d6
 800998a:	ee06 1a90 	vmov	s13, r1
 800998e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8009992:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009b38 <_dtoa_r+0x2d0>
 8009996:	eea5 7b06 	vfma.f64	d7, d5, d6
 800999a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800999e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80099a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a6:	ee16 ba90 	vmov	fp, s13
 80099aa:	9411      	str	r4, [sp, #68]	; 0x44
 80099ac:	d508      	bpl.n	80099c0 <_dtoa_r+0x158>
 80099ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80099b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80099b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ba:	bf18      	it	ne
 80099bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80099c0:	f1bb 0f16 	cmp.w	fp, #22
 80099c4:	d832      	bhi.n	8009a2c <_dtoa_r+0x1c4>
 80099c6:	4b64      	ldr	r3, [pc, #400]	; (8009b58 <_dtoa_r+0x2f0>)
 80099c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099cc:	ed93 7b00 	vldr	d7, [r3]
 80099d0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80099d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099dc:	d501      	bpl.n	80099e2 <_dtoa_r+0x17a>
 80099de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099e2:	2300      	movs	r3, #0
 80099e4:	e023      	b.n	8009a2e <_dtoa_r+0x1c6>
 80099e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80099e8:	4401      	add	r1, r0
 80099ea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	bfc3      	ittte	gt
 80099f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099f6:	fa04 f303 	lslgt.w	r3, r4, r3
 80099fa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80099fe:	f1c3 0320 	rsble	r3, r3, #32
 8009a02:	bfc6      	itte	gt
 8009a04:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009a08:	ea43 0308 	orrgt.w	r3, r3, r8
 8009a0c:	fa08 f303 	lslle.w	r3, r8, r3
 8009a10:	ee07 3a90 	vmov	s15, r3
 8009a14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009a18:	3901      	subs	r1, #1
 8009a1a:	ed8d 7b00 	vstr	d7, [sp]
 8009a1e:	9c01      	ldr	r4, [sp, #4]
 8009a20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a24:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009a28:	2401      	movs	r4, #1
 8009a2a:	e7a0      	b.n	800996e <_dtoa_r+0x106>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a30:	1a43      	subs	r3, r0, r1
 8009a32:	1e5a      	subs	r2, r3, #1
 8009a34:	bf45      	ittet	mi
 8009a36:	f1c3 0301 	rsbmi	r3, r3, #1
 8009a3a:	9305      	strmi	r3, [sp, #20]
 8009a3c:	2300      	movpl	r3, #0
 8009a3e:	2300      	movmi	r3, #0
 8009a40:	9206      	str	r2, [sp, #24]
 8009a42:	bf54      	ite	pl
 8009a44:	9305      	strpl	r3, [sp, #20]
 8009a46:	9306      	strmi	r3, [sp, #24]
 8009a48:	f1bb 0f00 	cmp.w	fp, #0
 8009a4c:	db18      	blt.n	8009a80 <_dtoa_r+0x218>
 8009a4e:	9b06      	ldr	r3, [sp, #24]
 8009a50:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009a54:	445b      	add	r3, fp
 8009a56:	9306      	str	r3, [sp, #24]
 8009a58:	2300      	movs	r3, #0
 8009a5a:	9a07      	ldr	r2, [sp, #28]
 8009a5c:	2a09      	cmp	r2, #9
 8009a5e:	d849      	bhi.n	8009af4 <_dtoa_r+0x28c>
 8009a60:	2a05      	cmp	r2, #5
 8009a62:	bfc4      	itt	gt
 8009a64:	3a04      	subgt	r2, #4
 8009a66:	9207      	strgt	r2, [sp, #28]
 8009a68:	9a07      	ldr	r2, [sp, #28]
 8009a6a:	f1a2 0202 	sub.w	r2, r2, #2
 8009a6e:	bfcc      	ite	gt
 8009a70:	2400      	movgt	r4, #0
 8009a72:	2401      	movle	r4, #1
 8009a74:	2a03      	cmp	r2, #3
 8009a76:	d848      	bhi.n	8009b0a <_dtoa_r+0x2a2>
 8009a78:	e8df f002 	tbb	[pc, r2]
 8009a7c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009a80:	9b05      	ldr	r3, [sp, #20]
 8009a82:	2200      	movs	r2, #0
 8009a84:	eba3 030b 	sub.w	r3, r3, fp
 8009a88:	9305      	str	r3, [sp, #20]
 8009a8a:	920e      	str	r2, [sp, #56]	; 0x38
 8009a8c:	f1cb 0300 	rsb	r3, fp, #0
 8009a90:	e7e3      	b.n	8009a5a <_dtoa_r+0x1f2>
 8009a92:	2200      	movs	r2, #0
 8009a94:	9208      	str	r2, [sp, #32]
 8009a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a98:	2a00      	cmp	r2, #0
 8009a9a:	dc39      	bgt.n	8009b10 <_dtoa_r+0x2a8>
 8009a9c:	f04f 0a01 	mov.w	sl, #1
 8009aa0:	46d1      	mov	r9, sl
 8009aa2:	4652      	mov	r2, sl
 8009aa4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009aa8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009aaa:	2100      	movs	r1, #0
 8009aac:	6079      	str	r1, [r7, #4]
 8009aae:	2004      	movs	r0, #4
 8009ab0:	f100 0c14 	add.w	ip, r0, #20
 8009ab4:	4594      	cmp	ip, r2
 8009ab6:	6879      	ldr	r1, [r7, #4]
 8009ab8:	d92f      	bls.n	8009b1a <_dtoa_r+0x2b2>
 8009aba:	4630      	mov	r0, r6
 8009abc:	930c      	str	r3, [sp, #48]	; 0x30
 8009abe:	f000 fc61 	bl	800a384 <_Balloc>
 8009ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ac4:	9000      	str	r0, [sp, #0]
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d149      	bne.n	8009b60 <_dtoa_r+0x2f8>
 8009acc:	4b23      	ldr	r3, [pc, #140]	; (8009b5c <_dtoa_r+0x2f4>)
 8009ace:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ad2:	e6df      	b.n	8009894 <_dtoa_r+0x2c>
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	e7dd      	b.n	8009a94 <_dtoa_r+0x22c>
 8009ad8:	2200      	movs	r2, #0
 8009ada:	9208      	str	r2, [sp, #32]
 8009adc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ade:	eb0b 0a02 	add.w	sl, fp, r2
 8009ae2:	f10a 0901 	add.w	r9, sl, #1
 8009ae6:	464a      	mov	r2, r9
 8009ae8:	2a01      	cmp	r2, #1
 8009aea:	bfb8      	it	lt
 8009aec:	2201      	movlt	r2, #1
 8009aee:	e7db      	b.n	8009aa8 <_dtoa_r+0x240>
 8009af0:	2201      	movs	r2, #1
 8009af2:	e7f2      	b.n	8009ada <_dtoa_r+0x272>
 8009af4:	2401      	movs	r4, #1
 8009af6:	2200      	movs	r2, #0
 8009af8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009afc:	f04f 3aff 	mov.w	sl, #4294967295
 8009b00:	2100      	movs	r1, #0
 8009b02:	46d1      	mov	r9, sl
 8009b04:	2212      	movs	r2, #18
 8009b06:	9109      	str	r1, [sp, #36]	; 0x24
 8009b08:	e7ce      	b.n	8009aa8 <_dtoa_r+0x240>
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	9208      	str	r2, [sp, #32]
 8009b0e:	e7f5      	b.n	8009afc <_dtoa_r+0x294>
 8009b10:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009b14:	46d1      	mov	r9, sl
 8009b16:	4652      	mov	r2, sl
 8009b18:	e7c6      	b.n	8009aa8 <_dtoa_r+0x240>
 8009b1a:	3101      	adds	r1, #1
 8009b1c:	6079      	str	r1, [r7, #4]
 8009b1e:	0040      	lsls	r0, r0, #1
 8009b20:	e7c6      	b.n	8009ab0 <_dtoa_r+0x248>
 8009b22:	bf00      	nop
 8009b24:	f3af 8000 	nop.w
 8009b28:	636f4361 	.word	0x636f4361
 8009b2c:	3fd287a7 	.word	0x3fd287a7
 8009b30:	8b60c8b3 	.word	0x8b60c8b3
 8009b34:	3fc68a28 	.word	0x3fc68a28
 8009b38:	509f79fb 	.word	0x509f79fb
 8009b3c:	3fd34413 	.word	0x3fd34413
 8009b40:	0800bb41 	.word	0x0800bb41
 8009b44:	0800bb58 	.word	0x0800bb58
 8009b48:	7ff00000 	.word	0x7ff00000
 8009b4c:	0800bb3d 	.word	0x0800bb3d
 8009b50:	0800bb34 	.word	0x0800bb34
 8009b54:	0800bb11 	.word	0x0800bb11
 8009b58:	0800bc50 	.word	0x0800bc50
 8009b5c:	0800bbb7 	.word	0x0800bbb7
 8009b60:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009b62:	9900      	ldr	r1, [sp, #0]
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	f1b9 0f0e 	cmp.w	r9, #14
 8009b6a:	d872      	bhi.n	8009c52 <_dtoa_r+0x3ea>
 8009b6c:	2c00      	cmp	r4, #0
 8009b6e:	d070      	beq.n	8009c52 <_dtoa_r+0x3ea>
 8009b70:	f1bb 0f00 	cmp.w	fp, #0
 8009b74:	f340 80a6 	ble.w	8009cc4 <_dtoa_r+0x45c>
 8009b78:	49ca      	ldr	r1, [pc, #808]	; (8009ea4 <_dtoa_r+0x63c>)
 8009b7a:	f00b 020f 	and.w	r2, fp, #15
 8009b7e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009b82:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b86:	ed92 7b00 	vldr	d7, [r2]
 8009b8a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009b8e:	f000 808d 	beq.w	8009cac <_dtoa_r+0x444>
 8009b92:	4ac5      	ldr	r2, [pc, #788]	; (8009ea8 <_dtoa_r+0x640>)
 8009b94:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009b98:	ed92 6b08 	vldr	d6, [r2, #32]
 8009b9c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009ba0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009ba4:	f001 010f 	and.w	r1, r1, #15
 8009ba8:	2203      	movs	r2, #3
 8009baa:	48bf      	ldr	r0, [pc, #764]	; (8009ea8 <_dtoa_r+0x640>)
 8009bac:	2900      	cmp	r1, #0
 8009bae:	d17f      	bne.n	8009cb0 <_dtoa_r+0x448>
 8009bb0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009bb4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009bb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bbc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009bbe:	2900      	cmp	r1, #0
 8009bc0:	f000 80b2 	beq.w	8009d28 <_dtoa_r+0x4c0>
 8009bc4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009bc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bcc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd4:	f140 80a8 	bpl.w	8009d28 <_dtoa_r+0x4c0>
 8009bd8:	f1b9 0f00 	cmp.w	r9, #0
 8009bdc:	f000 80a4 	beq.w	8009d28 <_dtoa_r+0x4c0>
 8009be0:	f1ba 0f00 	cmp.w	sl, #0
 8009be4:	dd31      	ble.n	8009c4a <_dtoa_r+0x3e2>
 8009be6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009bea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bf2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009bf6:	3201      	adds	r2, #1
 8009bf8:	4650      	mov	r0, sl
 8009bfa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009bfe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009c02:	ee07 2a90 	vmov	s15, r2
 8009c06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009c0a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009c0e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8009c12:	9c03      	ldr	r4, [sp, #12]
 8009c14:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8009c18:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	f040 8086 	bne.w	8009d2e <_dtoa_r+0x4c6>
 8009c22:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009c26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009c2a:	ec42 1b17 	vmov	d7, r1, r2
 8009c2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c36:	f300 8272 	bgt.w	800a11e <_dtoa_r+0x8b6>
 8009c3a:	eeb1 7b47 	vneg.f64	d7, d7
 8009c3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c46:	f100 8267 	bmi.w	800a118 <_dtoa_r+0x8b0>
 8009c4a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8009c4e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009c52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	f2c0 8129 	blt.w	8009eac <_dtoa_r+0x644>
 8009c5a:	f1bb 0f0e 	cmp.w	fp, #14
 8009c5e:	f300 8125 	bgt.w	8009eac <_dtoa_r+0x644>
 8009c62:	4b90      	ldr	r3, [pc, #576]	; (8009ea4 <_dtoa_r+0x63c>)
 8009c64:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c68:	ed93 6b00 	vldr	d6, [r3]
 8009c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f280 80c3 	bge.w	8009dfa <_dtoa_r+0x592>
 8009c74:	f1b9 0f00 	cmp.w	r9, #0
 8009c78:	f300 80bf 	bgt.w	8009dfa <_dtoa_r+0x592>
 8009c7c:	f040 824c 	bne.w	800a118 <_dtoa_r+0x8b0>
 8009c80:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009c84:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009c88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c94:	464c      	mov	r4, r9
 8009c96:	464f      	mov	r7, r9
 8009c98:	f280 8222 	bge.w	800a0e0 <_dtoa_r+0x878>
 8009c9c:	f8dd 8000 	ldr.w	r8, [sp]
 8009ca0:	2331      	movs	r3, #49	; 0x31
 8009ca2:	f808 3b01 	strb.w	r3, [r8], #1
 8009ca6:	f10b 0b01 	add.w	fp, fp, #1
 8009caa:	e21e      	b.n	800a0ea <_dtoa_r+0x882>
 8009cac:	2202      	movs	r2, #2
 8009cae:	e77c      	b.n	8009baa <_dtoa_r+0x342>
 8009cb0:	07cc      	lsls	r4, r1, #31
 8009cb2:	d504      	bpl.n	8009cbe <_dtoa_r+0x456>
 8009cb4:	ed90 6b00 	vldr	d6, [r0]
 8009cb8:	3201      	adds	r2, #1
 8009cba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009cbe:	1049      	asrs	r1, r1, #1
 8009cc0:	3008      	adds	r0, #8
 8009cc2:	e773      	b.n	8009bac <_dtoa_r+0x344>
 8009cc4:	d02e      	beq.n	8009d24 <_dtoa_r+0x4bc>
 8009cc6:	f1cb 0100 	rsb	r1, fp, #0
 8009cca:	4a76      	ldr	r2, [pc, #472]	; (8009ea4 <_dtoa_r+0x63c>)
 8009ccc:	f001 000f 	and.w	r0, r1, #15
 8009cd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009cd4:	ed92 7b00 	vldr	d7, [r2]
 8009cd8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009cdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ce0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009ce4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8009ce8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8009cec:	486e      	ldr	r0, [pc, #440]	; (8009ea8 <_dtoa_r+0x640>)
 8009cee:	1109      	asrs	r1, r1, #4
 8009cf0:	2400      	movs	r4, #0
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	b939      	cbnz	r1, 8009d06 <_dtoa_r+0x49e>
 8009cf6:	2c00      	cmp	r4, #0
 8009cf8:	f43f af60 	beq.w	8009bbc <_dtoa_r+0x354>
 8009cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d04:	e75a      	b.n	8009bbc <_dtoa_r+0x354>
 8009d06:	07cf      	lsls	r7, r1, #31
 8009d08:	d509      	bpl.n	8009d1e <_dtoa_r+0x4b6>
 8009d0a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8009d0e:	ed90 7b00 	vldr	d7, [r0]
 8009d12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d16:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8009d1a:	3201      	adds	r2, #1
 8009d1c:	2401      	movs	r4, #1
 8009d1e:	1049      	asrs	r1, r1, #1
 8009d20:	3008      	adds	r0, #8
 8009d22:	e7e7      	b.n	8009cf4 <_dtoa_r+0x48c>
 8009d24:	2202      	movs	r2, #2
 8009d26:	e749      	b.n	8009bbc <_dtoa_r+0x354>
 8009d28:	465f      	mov	r7, fp
 8009d2a:	4648      	mov	r0, r9
 8009d2c:	e765      	b.n	8009bfa <_dtoa_r+0x392>
 8009d2e:	ec42 1b17 	vmov	d7, r1, r2
 8009d32:	4a5c      	ldr	r2, [pc, #368]	; (8009ea4 <_dtoa_r+0x63c>)
 8009d34:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009d38:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009d3c:	9a00      	ldr	r2, [sp, #0]
 8009d3e:	1814      	adds	r4, r2, r0
 8009d40:	9a08      	ldr	r2, [sp, #32]
 8009d42:	b352      	cbz	r2, 8009d9a <_dtoa_r+0x532>
 8009d44:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009d48:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009d4c:	f8dd 8000 	ldr.w	r8, [sp]
 8009d50:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009d54:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009d58:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009d5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009d60:	ee14 2a90 	vmov	r2, s9
 8009d64:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009d68:	3230      	adds	r2, #48	; 0x30
 8009d6a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009d6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d76:	f808 2b01 	strb.w	r2, [r8], #1
 8009d7a:	d439      	bmi.n	8009df0 <_dtoa_r+0x588>
 8009d7c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009d80:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d88:	d472      	bmi.n	8009e70 <_dtoa_r+0x608>
 8009d8a:	45a0      	cmp	r8, r4
 8009d8c:	f43f af5d 	beq.w	8009c4a <_dtoa_r+0x3e2>
 8009d90:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009d94:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d98:	e7e0      	b.n	8009d5c <_dtoa_r+0x4f4>
 8009d9a:	f8dd 8000 	ldr.w	r8, [sp]
 8009d9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009da2:	4621      	mov	r1, r4
 8009da4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009da8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009dac:	ee14 2a90 	vmov	r2, s9
 8009db0:	3230      	adds	r2, #48	; 0x30
 8009db2:	f808 2b01 	strb.w	r2, [r8], #1
 8009db6:	45a0      	cmp	r8, r4
 8009db8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009dbc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009dc0:	d118      	bne.n	8009df4 <_dtoa_r+0x58c>
 8009dc2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009dc6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009dca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dd2:	dc4d      	bgt.n	8009e70 <_dtoa_r+0x608>
 8009dd4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009dd8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009de0:	f57f af33 	bpl.w	8009c4a <_dtoa_r+0x3e2>
 8009de4:	4688      	mov	r8, r1
 8009de6:	3901      	subs	r1, #1
 8009de8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009dec:	2b30      	cmp	r3, #48	; 0x30
 8009dee:	d0f9      	beq.n	8009de4 <_dtoa_r+0x57c>
 8009df0:	46bb      	mov	fp, r7
 8009df2:	e02a      	b.n	8009e4a <_dtoa_r+0x5e2>
 8009df4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009df8:	e7d6      	b.n	8009da8 <_dtoa_r+0x540>
 8009dfa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dfe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009e02:	f8dd 8000 	ldr.w	r8, [sp]
 8009e06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009e0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009e0e:	ee15 3a10 	vmov	r3, s10
 8009e12:	3330      	adds	r3, #48	; 0x30
 8009e14:	f808 3b01 	strb.w	r3, [r8], #1
 8009e18:	9b00      	ldr	r3, [sp, #0]
 8009e1a:	eba8 0303 	sub.w	r3, r8, r3
 8009e1e:	4599      	cmp	r9, r3
 8009e20:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009e24:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009e28:	d133      	bne.n	8009e92 <_dtoa_r+0x62a>
 8009e2a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009e2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e36:	dc1a      	bgt.n	8009e6e <_dtoa_r+0x606>
 8009e38:	eeb4 7b46 	vcmp.f64	d7, d6
 8009e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e40:	d103      	bne.n	8009e4a <_dtoa_r+0x5e2>
 8009e42:	ee15 3a10 	vmov	r3, s10
 8009e46:	07d9      	lsls	r1, r3, #31
 8009e48:	d411      	bmi.n	8009e6e <_dtoa_r+0x606>
 8009e4a:	4629      	mov	r1, r5
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f000 fad9 	bl	800a404 <_Bfree>
 8009e52:	2300      	movs	r3, #0
 8009e54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009e56:	f888 3000 	strb.w	r3, [r8]
 8009e5a:	f10b 0301 	add.w	r3, fp, #1
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f43f ad4d 	beq.w	8009902 <_dtoa_r+0x9a>
 8009e68:	f8c3 8000 	str.w	r8, [r3]
 8009e6c:	e549      	b.n	8009902 <_dtoa_r+0x9a>
 8009e6e:	465f      	mov	r7, fp
 8009e70:	4643      	mov	r3, r8
 8009e72:	4698      	mov	r8, r3
 8009e74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e78:	2a39      	cmp	r2, #57	; 0x39
 8009e7a:	d106      	bne.n	8009e8a <_dtoa_r+0x622>
 8009e7c:	9a00      	ldr	r2, [sp, #0]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d1f7      	bne.n	8009e72 <_dtoa_r+0x60a>
 8009e82:	9900      	ldr	r1, [sp, #0]
 8009e84:	2230      	movs	r2, #48	; 0x30
 8009e86:	3701      	adds	r7, #1
 8009e88:	700a      	strb	r2, [r1, #0]
 8009e8a:	781a      	ldrb	r2, [r3, #0]
 8009e8c:	3201      	adds	r2, #1
 8009e8e:	701a      	strb	r2, [r3, #0]
 8009e90:	e7ae      	b.n	8009df0 <_dtoa_r+0x588>
 8009e92:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9e:	d1b2      	bne.n	8009e06 <_dtoa_r+0x59e>
 8009ea0:	e7d3      	b.n	8009e4a <_dtoa_r+0x5e2>
 8009ea2:	bf00      	nop
 8009ea4:	0800bc50 	.word	0x0800bc50
 8009ea8:	0800bc28 	.word	0x0800bc28
 8009eac:	9908      	ldr	r1, [sp, #32]
 8009eae:	2900      	cmp	r1, #0
 8009eb0:	f000 80d1 	beq.w	800a056 <_dtoa_r+0x7ee>
 8009eb4:	9907      	ldr	r1, [sp, #28]
 8009eb6:	2901      	cmp	r1, #1
 8009eb8:	f300 80b4 	bgt.w	800a024 <_dtoa_r+0x7bc>
 8009ebc:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009ebe:	2900      	cmp	r1, #0
 8009ec0:	f000 80ac 	beq.w	800a01c <_dtoa_r+0x7b4>
 8009ec4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009ec8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009ecc:	461c      	mov	r4, r3
 8009ece:	930a      	str	r3, [sp, #40]	; 0x28
 8009ed0:	9b05      	ldr	r3, [sp, #20]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	9305      	str	r3, [sp, #20]
 8009ed6:	9b06      	ldr	r3, [sp, #24]
 8009ed8:	2101      	movs	r1, #1
 8009eda:	4413      	add	r3, r2
 8009edc:	4630      	mov	r0, r6
 8009ede:	9306      	str	r3, [sp, #24]
 8009ee0:	f000 fb4c 	bl	800a57c <__i2b>
 8009ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee6:	4607      	mov	r7, r0
 8009ee8:	f1b8 0f00 	cmp.w	r8, #0
 8009eec:	dd0d      	ble.n	8009f0a <_dtoa_r+0x6a2>
 8009eee:	9a06      	ldr	r2, [sp, #24]
 8009ef0:	2a00      	cmp	r2, #0
 8009ef2:	dd0a      	ble.n	8009f0a <_dtoa_r+0x6a2>
 8009ef4:	4542      	cmp	r2, r8
 8009ef6:	9905      	ldr	r1, [sp, #20]
 8009ef8:	bfa8      	it	ge
 8009efa:	4642      	movge	r2, r8
 8009efc:	1a89      	subs	r1, r1, r2
 8009efe:	9105      	str	r1, [sp, #20]
 8009f00:	9906      	ldr	r1, [sp, #24]
 8009f02:	eba8 0802 	sub.w	r8, r8, r2
 8009f06:	1a8a      	subs	r2, r1, r2
 8009f08:	9206      	str	r2, [sp, #24]
 8009f0a:	b303      	cbz	r3, 8009f4e <_dtoa_r+0x6e6>
 8009f0c:	9a08      	ldr	r2, [sp, #32]
 8009f0e:	2a00      	cmp	r2, #0
 8009f10:	f000 80a6 	beq.w	800a060 <_dtoa_r+0x7f8>
 8009f14:	2c00      	cmp	r4, #0
 8009f16:	dd13      	ble.n	8009f40 <_dtoa_r+0x6d8>
 8009f18:	4639      	mov	r1, r7
 8009f1a:	4622      	mov	r2, r4
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009f20:	f000 fbe8 	bl	800a6f4 <__pow5mult>
 8009f24:	462a      	mov	r2, r5
 8009f26:	4601      	mov	r1, r0
 8009f28:	4607      	mov	r7, r0
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f000 fb3c 	bl	800a5a8 <__multiply>
 8009f30:	4629      	mov	r1, r5
 8009f32:	900a      	str	r0, [sp, #40]	; 0x28
 8009f34:	4630      	mov	r0, r6
 8009f36:	f000 fa65 	bl	800a404 <_Bfree>
 8009f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f3e:	4615      	mov	r5, r2
 8009f40:	1b1a      	subs	r2, r3, r4
 8009f42:	d004      	beq.n	8009f4e <_dtoa_r+0x6e6>
 8009f44:	4629      	mov	r1, r5
 8009f46:	4630      	mov	r0, r6
 8009f48:	f000 fbd4 	bl	800a6f4 <__pow5mult>
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	2101      	movs	r1, #1
 8009f50:	4630      	mov	r0, r6
 8009f52:	f000 fb13 	bl	800a57c <__i2b>
 8009f56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	f340 8082 	ble.w	800a064 <_dtoa_r+0x7fc>
 8009f60:	461a      	mov	r2, r3
 8009f62:	4601      	mov	r1, r0
 8009f64:	4630      	mov	r0, r6
 8009f66:	f000 fbc5 	bl	800a6f4 <__pow5mult>
 8009f6a:	9b07      	ldr	r3, [sp, #28]
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	4604      	mov	r4, r0
 8009f70:	dd7b      	ble.n	800a06a <_dtoa_r+0x802>
 8009f72:	2300      	movs	r3, #0
 8009f74:	930a      	str	r3, [sp, #40]	; 0x28
 8009f76:	6922      	ldr	r2, [r4, #16]
 8009f78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009f7c:	6910      	ldr	r0, [r2, #16]
 8009f7e:	f000 faad 	bl	800a4dc <__hi0bits>
 8009f82:	f1c0 0020 	rsb	r0, r0, #32
 8009f86:	9b06      	ldr	r3, [sp, #24]
 8009f88:	4418      	add	r0, r3
 8009f8a:	f010 001f 	ands.w	r0, r0, #31
 8009f8e:	f000 808d 	beq.w	800a0ac <_dtoa_r+0x844>
 8009f92:	f1c0 0220 	rsb	r2, r0, #32
 8009f96:	2a04      	cmp	r2, #4
 8009f98:	f340 8086 	ble.w	800a0a8 <_dtoa_r+0x840>
 8009f9c:	f1c0 001c 	rsb	r0, r0, #28
 8009fa0:	9b05      	ldr	r3, [sp, #20]
 8009fa2:	4403      	add	r3, r0
 8009fa4:	9305      	str	r3, [sp, #20]
 8009fa6:	9b06      	ldr	r3, [sp, #24]
 8009fa8:	4403      	add	r3, r0
 8009faa:	4480      	add	r8, r0
 8009fac:	9306      	str	r3, [sp, #24]
 8009fae:	9b05      	ldr	r3, [sp, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dd05      	ble.n	8009fc0 <_dtoa_r+0x758>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f000 fbf5 	bl	800a7a8 <__lshift>
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	9b06      	ldr	r3, [sp, #24]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	dd05      	ble.n	8009fd2 <_dtoa_r+0x76a>
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	461a      	mov	r2, r3
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f000 fbec 	bl	800a7a8 <__lshift>
 8009fd0:	4604      	mov	r4, r0
 8009fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d06b      	beq.n	800a0b0 <_dtoa_r+0x848>
 8009fd8:	4621      	mov	r1, r4
 8009fda:	4628      	mov	r0, r5
 8009fdc:	f000 fc50 	bl	800a880 <__mcmp>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	da65      	bge.n	800a0b0 <_dtoa_r+0x848>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	220a      	movs	r2, #10
 8009fea:	4630      	mov	r0, r6
 8009fec:	f000 fa2c 	bl	800a448 <__multadd>
 8009ff0:	9b08      	ldr	r3, [sp, #32]
 8009ff2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ff6:	4605      	mov	r5, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 8192 	beq.w	800a322 <_dtoa_r+0xaba>
 8009ffe:	4639      	mov	r1, r7
 800a000:	2300      	movs	r3, #0
 800a002:	220a      	movs	r2, #10
 800a004:	4630      	mov	r0, r6
 800a006:	f000 fa1f 	bl	800a448 <__multadd>
 800a00a:	f1ba 0f00 	cmp.w	sl, #0
 800a00e:	4607      	mov	r7, r0
 800a010:	f300 808e 	bgt.w	800a130 <_dtoa_r+0x8c8>
 800a014:	9b07      	ldr	r3, [sp, #28]
 800a016:	2b02      	cmp	r3, #2
 800a018:	dc51      	bgt.n	800a0be <_dtoa_r+0x856>
 800a01a:	e089      	b.n	800a130 <_dtoa_r+0x8c8>
 800a01c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a01e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a022:	e751      	b.n	8009ec8 <_dtoa_r+0x660>
 800a024:	f109 34ff 	add.w	r4, r9, #4294967295
 800a028:	42a3      	cmp	r3, r4
 800a02a:	bfbf      	itttt	lt
 800a02c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a02e:	1ae3      	sublt	r3, r4, r3
 800a030:	18d2      	addlt	r2, r2, r3
 800a032:	4613      	movlt	r3, r2
 800a034:	bfb7      	itett	lt
 800a036:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a038:	1b1c      	subge	r4, r3, r4
 800a03a:	4623      	movlt	r3, r4
 800a03c:	2400      	movlt	r4, #0
 800a03e:	f1b9 0f00 	cmp.w	r9, #0
 800a042:	bfb5      	itete	lt
 800a044:	9a05      	ldrlt	r2, [sp, #20]
 800a046:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800a04a:	eba2 0809 	sublt.w	r8, r2, r9
 800a04e:	464a      	movge	r2, r9
 800a050:	bfb8      	it	lt
 800a052:	2200      	movlt	r2, #0
 800a054:	e73b      	b.n	8009ece <_dtoa_r+0x666>
 800a056:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a05a:	9f08      	ldr	r7, [sp, #32]
 800a05c:	461c      	mov	r4, r3
 800a05e:	e743      	b.n	8009ee8 <_dtoa_r+0x680>
 800a060:	461a      	mov	r2, r3
 800a062:	e76f      	b.n	8009f44 <_dtoa_r+0x6dc>
 800a064:	9b07      	ldr	r3, [sp, #28]
 800a066:	2b01      	cmp	r3, #1
 800a068:	dc18      	bgt.n	800a09c <_dtoa_r+0x834>
 800a06a:	9b02      	ldr	r3, [sp, #8]
 800a06c:	b9b3      	cbnz	r3, 800a09c <_dtoa_r+0x834>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a074:	b9a2      	cbnz	r2, 800a0a0 <_dtoa_r+0x838>
 800a076:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a07a:	0d12      	lsrs	r2, r2, #20
 800a07c:	0512      	lsls	r2, r2, #20
 800a07e:	b18a      	cbz	r2, 800a0a4 <_dtoa_r+0x83c>
 800a080:	9b05      	ldr	r3, [sp, #20]
 800a082:	3301      	adds	r3, #1
 800a084:	9305      	str	r3, [sp, #20]
 800a086:	9b06      	ldr	r3, [sp, #24]
 800a088:	3301      	adds	r3, #1
 800a08a:	9306      	str	r3, [sp, #24]
 800a08c:	2301      	movs	r3, #1
 800a08e:	930a      	str	r3, [sp, #40]	; 0x28
 800a090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a092:	2b00      	cmp	r3, #0
 800a094:	f47f af6f 	bne.w	8009f76 <_dtoa_r+0x70e>
 800a098:	2001      	movs	r0, #1
 800a09a:	e774      	b.n	8009f86 <_dtoa_r+0x71e>
 800a09c:	2300      	movs	r3, #0
 800a09e:	e7f6      	b.n	800a08e <_dtoa_r+0x826>
 800a0a0:	9b02      	ldr	r3, [sp, #8]
 800a0a2:	e7f4      	b.n	800a08e <_dtoa_r+0x826>
 800a0a4:	920a      	str	r2, [sp, #40]	; 0x28
 800a0a6:	e7f3      	b.n	800a090 <_dtoa_r+0x828>
 800a0a8:	d081      	beq.n	8009fae <_dtoa_r+0x746>
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	301c      	adds	r0, #28
 800a0ae:	e777      	b.n	8009fa0 <_dtoa_r+0x738>
 800a0b0:	f1b9 0f00 	cmp.w	r9, #0
 800a0b4:	dc37      	bgt.n	800a126 <_dtoa_r+0x8be>
 800a0b6:	9b07      	ldr	r3, [sp, #28]
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	dd34      	ble.n	800a126 <_dtoa_r+0x8be>
 800a0bc:	46ca      	mov	sl, r9
 800a0be:	f1ba 0f00 	cmp.w	sl, #0
 800a0c2:	d10d      	bne.n	800a0e0 <_dtoa_r+0x878>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4653      	mov	r3, sl
 800a0c8:	2205      	movs	r2, #5
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f000 f9bc 	bl	800a448 <__multadd>
 800a0d0:	4601      	mov	r1, r0
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	f000 fbd3 	bl	800a880 <__mcmp>
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	f73f adde 	bgt.w	8009c9c <_dtoa_r+0x434>
 800a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e2:	f8dd 8000 	ldr.w	r8, [sp]
 800a0e6:	ea6f 0b03 	mvn.w	fp, r3
 800a0ea:	f04f 0900 	mov.w	r9, #0
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f000 f987 	bl	800a404 <_Bfree>
 800a0f6:	2f00      	cmp	r7, #0
 800a0f8:	f43f aea7 	beq.w	8009e4a <_dtoa_r+0x5e2>
 800a0fc:	f1b9 0f00 	cmp.w	r9, #0
 800a100:	d005      	beq.n	800a10e <_dtoa_r+0x8a6>
 800a102:	45b9      	cmp	r9, r7
 800a104:	d003      	beq.n	800a10e <_dtoa_r+0x8a6>
 800a106:	4649      	mov	r1, r9
 800a108:	4630      	mov	r0, r6
 800a10a:	f000 f97b 	bl	800a404 <_Bfree>
 800a10e:	4639      	mov	r1, r7
 800a110:	4630      	mov	r0, r6
 800a112:	f000 f977 	bl	800a404 <_Bfree>
 800a116:	e698      	b.n	8009e4a <_dtoa_r+0x5e2>
 800a118:	2400      	movs	r4, #0
 800a11a:	4627      	mov	r7, r4
 800a11c:	e7e0      	b.n	800a0e0 <_dtoa_r+0x878>
 800a11e:	46bb      	mov	fp, r7
 800a120:	4604      	mov	r4, r0
 800a122:	4607      	mov	r7, r0
 800a124:	e5ba      	b.n	8009c9c <_dtoa_r+0x434>
 800a126:	9b08      	ldr	r3, [sp, #32]
 800a128:	46ca      	mov	sl, r9
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f000 8100 	beq.w	800a330 <_dtoa_r+0xac8>
 800a130:	f1b8 0f00 	cmp.w	r8, #0
 800a134:	dd05      	ble.n	800a142 <_dtoa_r+0x8da>
 800a136:	4639      	mov	r1, r7
 800a138:	4642      	mov	r2, r8
 800a13a:	4630      	mov	r0, r6
 800a13c:	f000 fb34 	bl	800a7a8 <__lshift>
 800a140:	4607      	mov	r7, r0
 800a142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a144:	2b00      	cmp	r3, #0
 800a146:	d05d      	beq.n	800a204 <_dtoa_r+0x99c>
 800a148:	6879      	ldr	r1, [r7, #4]
 800a14a:	4630      	mov	r0, r6
 800a14c:	f000 f91a 	bl	800a384 <_Balloc>
 800a150:	4680      	mov	r8, r0
 800a152:	b928      	cbnz	r0, 800a160 <_dtoa_r+0x8f8>
 800a154:	4b82      	ldr	r3, [pc, #520]	; (800a360 <_dtoa_r+0xaf8>)
 800a156:	4602      	mov	r2, r0
 800a158:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a15c:	f7ff bb9a 	b.w	8009894 <_dtoa_r+0x2c>
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	3202      	adds	r2, #2
 800a164:	0092      	lsls	r2, r2, #2
 800a166:	f107 010c 	add.w	r1, r7, #12
 800a16a:	300c      	adds	r0, #12
 800a16c:	f7fe fe66 	bl	8008e3c <memcpy>
 800a170:	2201      	movs	r2, #1
 800a172:	4641      	mov	r1, r8
 800a174:	4630      	mov	r0, r6
 800a176:	f000 fb17 	bl	800a7a8 <__lshift>
 800a17a:	9b00      	ldr	r3, [sp, #0]
 800a17c:	3301      	adds	r3, #1
 800a17e:	9305      	str	r3, [sp, #20]
 800a180:	9b00      	ldr	r3, [sp, #0]
 800a182:	4453      	add	r3, sl
 800a184:	9309      	str	r3, [sp, #36]	; 0x24
 800a186:	9b02      	ldr	r3, [sp, #8]
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	46b9      	mov	r9, r7
 800a18e:	9308      	str	r3, [sp, #32]
 800a190:	4607      	mov	r7, r0
 800a192:	9b05      	ldr	r3, [sp, #20]
 800a194:	4621      	mov	r1, r4
 800a196:	3b01      	subs	r3, #1
 800a198:	4628      	mov	r0, r5
 800a19a:	9302      	str	r3, [sp, #8]
 800a19c:	f7ff fad9 	bl	8009752 <quorem>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	3330      	adds	r3, #48	; 0x30
 800a1a4:	9006      	str	r0, [sp, #24]
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a1ac:	f000 fb68 	bl	800a880 <__mcmp>
 800a1b0:	463a      	mov	r2, r7
 800a1b2:	4682      	mov	sl, r0
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f000 fb7e 	bl	800a8b8 <__mdiff>
 800a1bc:	68c2      	ldr	r2, [r0, #12]
 800a1be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	bb0a      	cbnz	r2, 800a208 <_dtoa_r+0x9a0>
 800a1c4:	4601      	mov	r1, r0
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f000 fb5a 	bl	800a880 <__mcmp>
 800a1cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	4641      	mov	r1, r8
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	920e      	str	r2, [sp, #56]	; 0x38
 800a1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a1d8:	f000 f914 	bl	800a404 <_Bfree>
 800a1dc:	9b07      	ldr	r3, [sp, #28]
 800a1de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a1e4:	ea43 0102 	orr.w	r1, r3, r2
 800a1e8:	9b08      	ldr	r3, [sp, #32]
 800a1ea:	430b      	orrs	r3, r1
 800a1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ee:	d10d      	bne.n	800a20c <_dtoa_r+0x9a4>
 800a1f0:	2b39      	cmp	r3, #57	; 0x39
 800a1f2:	d029      	beq.n	800a248 <_dtoa_r+0x9e0>
 800a1f4:	f1ba 0f00 	cmp.w	sl, #0
 800a1f8:	dd01      	ble.n	800a1fe <_dtoa_r+0x996>
 800a1fa:	9b06      	ldr	r3, [sp, #24]
 800a1fc:	3331      	adds	r3, #49	; 0x31
 800a1fe:	9a02      	ldr	r2, [sp, #8]
 800a200:	7013      	strb	r3, [r2, #0]
 800a202:	e774      	b.n	800a0ee <_dtoa_r+0x886>
 800a204:	4638      	mov	r0, r7
 800a206:	e7b8      	b.n	800a17a <_dtoa_r+0x912>
 800a208:	2201      	movs	r2, #1
 800a20a:	e7e1      	b.n	800a1d0 <_dtoa_r+0x968>
 800a20c:	f1ba 0f00 	cmp.w	sl, #0
 800a210:	db06      	blt.n	800a220 <_dtoa_r+0x9b8>
 800a212:	9907      	ldr	r1, [sp, #28]
 800a214:	ea41 0a0a 	orr.w	sl, r1, sl
 800a218:	9908      	ldr	r1, [sp, #32]
 800a21a:	ea5a 0101 	orrs.w	r1, sl, r1
 800a21e:	d120      	bne.n	800a262 <_dtoa_r+0x9fa>
 800a220:	2a00      	cmp	r2, #0
 800a222:	ddec      	ble.n	800a1fe <_dtoa_r+0x996>
 800a224:	4629      	mov	r1, r5
 800a226:	2201      	movs	r2, #1
 800a228:	4630      	mov	r0, r6
 800a22a:	9305      	str	r3, [sp, #20]
 800a22c:	f000 fabc 	bl	800a7a8 <__lshift>
 800a230:	4621      	mov	r1, r4
 800a232:	4605      	mov	r5, r0
 800a234:	f000 fb24 	bl	800a880 <__mcmp>
 800a238:	2800      	cmp	r0, #0
 800a23a:	9b05      	ldr	r3, [sp, #20]
 800a23c:	dc02      	bgt.n	800a244 <_dtoa_r+0x9dc>
 800a23e:	d1de      	bne.n	800a1fe <_dtoa_r+0x996>
 800a240:	07da      	lsls	r2, r3, #31
 800a242:	d5dc      	bpl.n	800a1fe <_dtoa_r+0x996>
 800a244:	2b39      	cmp	r3, #57	; 0x39
 800a246:	d1d8      	bne.n	800a1fa <_dtoa_r+0x992>
 800a248:	9a02      	ldr	r2, [sp, #8]
 800a24a:	2339      	movs	r3, #57	; 0x39
 800a24c:	7013      	strb	r3, [r2, #0]
 800a24e:	4643      	mov	r3, r8
 800a250:	4698      	mov	r8, r3
 800a252:	3b01      	subs	r3, #1
 800a254:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a258:	2a39      	cmp	r2, #57	; 0x39
 800a25a:	d051      	beq.n	800a300 <_dtoa_r+0xa98>
 800a25c:	3201      	adds	r2, #1
 800a25e:	701a      	strb	r2, [r3, #0]
 800a260:	e745      	b.n	800a0ee <_dtoa_r+0x886>
 800a262:	2a00      	cmp	r2, #0
 800a264:	dd03      	ble.n	800a26e <_dtoa_r+0xa06>
 800a266:	2b39      	cmp	r3, #57	; 0x39
 800a268:	d0ee      	beq.n	800a248 <_dtoa_r+0x9e0>
 800a26a:	3301      	adds	r3, #1
 800a26c:	e7c7      	b.n	800a1fe <_dtoa_r+0x996>
 800a26e:	9a05      	ldr	r2, [sp, #20]
 800a270:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a272:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a276:	428a      	cmp	r2, r1
 800a278:	d02b      	beq.n	800a2d2 <_dtoa_r+0xa6a>
 800a27a:	4629      	mov	r1, r5
 800a27c:	2300      	movs	r3, #0
 800a27e:	220a      	movs	r2, #10
 800a280:	4630      	mov	r0, r6
 800a282:	f000 f8e1 	bl	800a448 <__multadd>
 800a286:	45b9      	cmp	r9, r7
 800a288:	4605      	mov	r5, r0
 800a28a:	f04f 0300 	mov.w	r3, #0
 800a28e:	f04f 020a 	mov.w	r2, #10
 800a292:	4649      	mov	r1, r9
 800a294:	4630      	mov	r0, r6
 800a296:	d107      	bne.n	800a2a8 <_dtoa_r+0xa40>
 800a298:	f000 f8d6 	bl	800a448 <__multadd>
 800a29c:	4681      	mov	r9, r0
 800a29e:	4607      	mov	r7, r0
 800a2a0:	9b05      	ldr	r3, [sp, #20]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	9305      	str	r3, [sp, #20]
 800a2a6:	e774      	b.n	800a192 <_dtoa_r+0x92a>
 800a2a8:	f000 f8ce 	bl	800a448 <__multadd>
 800a2ac:	4639      	mov	r1, r7
 800a2ae:	4681      	mov	r9, r0
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	220a      	movs	r2, #10
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	f000 f8c7 	bl	800a448 <__multadd>
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	e7f0      	b.n	800a2a0 <_dtoa_r+0xa38>
 800a2be:	f1ba 0f00 	cmp.w	sl, #0
 800a2c2:	9a00      	ldr	r2, [sp, #0]
 800a2c4:	bfcc      	ite	gt
 800a2c6:	46d0      	movgt	r8, sl
 800a2c8:	f04f 0801 	movle.w	r8, #1
 800a2cc:	4490      	add	r8, r2
 800a2ce:	f04f 0900 	mov.w	r9, #0
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	9302      	str	r3, [sp, #8]
 800a2da:	f000 fa65 	bl	800a7a8 <__lshift>
 800a2de:	4621      	mov	r1, r4
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	f000 facd 	bl	800a880 <__mcmp>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	dcb1      	bgt.n	800a24e <_dtoa_r+0x9e6>
 800a2ea:	d102      	bne.n	800a2f2 <_dtoa_r+0xa8a>
 800a2ec:	9b02      	ldr	r3, [sp, #8]
 800a2ee:	07db      	lsls	r3, r3, #31
 800a2f0:	d4ad      	bmi.n	800a24e <_dtoa_r+0x9e6>
 800a2f2:	4643      	mov	r3, r8
 800a2f4:	4698      	mov	r8, r3
 800a2f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2fa:	2a30      	cmp	r2, #48	; 0x30
 800a2fc:	d0fa      	beq.n	800a2f4 <_dtoa_r+0xa8c>
 800a2fe:	e6f6      	b.n	800a0ee <_dtoa_r+0x886>
 800a300:	9a00      	ldr	r2, [sp, #0]
 800a302:	429a      	cmp	r2, r3
 800a304:	d1a4      	bne.n	800a250 <_dtoa_r+0x9e8>
 800a306:	f10b 0b01 	add.w	fp, fp, #1
 800a30a:	2331      	movs	r3, #49	; 0x31
 800a30c:	e778      	b.n	800a200 <_dtoa_r+0x998>
 800a30e:	4b15      	ldr	r3, [pc, #84]	; (800a364 <_dtoa_r+0xafc>)
 800a310:	f7ff bb12 	b.w	8009938 <_dtoa_r+0xd0>
 800a314:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a316:	2b00      	cmp	r3, #0
 800a318:	f47f aaee 	bne.w	80098f8 <_dtoa_r+0x90>
 800a31c:	4b12      	ldr	r3, [pc, #72]	; (800a368 <_dtoa_r+0xb00>)
 800a31e:	f7ff bb0b 	b.w	8009938 <_dtoa_r+0xd0>
 800a322:	f1ba 0f00 	cmp.w	sl, #0
 800a326:	dc03      	bgt.n	800a330 <_dtoa_r+0xac8>
 800a328:	9b07      	ldr	r3, [sp, #28]
 800a32a:	2b02      	cmp	r3, #2
 800a32c:	f73f aec7 	bgt.w	800a0be <_dtoa_r+0x856>
 800a330:	f8dd 8000 	ldr.w	r8, [sp]
 800a334:	4621      	mov	r1, r4
 800a336:	4628      	mov	r0, r5
 800a338:	f7ff fa0b 	bl	8009752 <quorem>
 800a33c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a340:	f808 3b01 	strb.w	r3, [r8], #1
 800a344:	9a00      	ldr	r2, [sp, #0]
 800a346:	eba8 0202 	sub.w	r2, r8, r2
 800a34a:	4592      	cmp	sl, r2
 800a34c:	ddb7      	ble.n	800a2be <_dtoa_r+0xa56>
 800a34e:	4629      	mov	r1, r5
 800a350:	2300      	movs	r3, #0
 800a352:	220a      	movs	r2, #10
 800a354:	4630      	mov	r0, r6
 800a356:	f000 f877 	bl	800a448 <__multadd>
 800a35a:	4605      	mov	r5, r0
 800a35c:	e7ea      	b.n	800a334 <_dtoa_r+0xacc>
 800a35e:	bf00      	nop
 800a360:	0800bbb7 	.word	0x0800bbb7
 800a364:	0800bb10 	.word	0x0800bb10
 800a368:	0800bb34 	.word	0x0800bb34

0800a36c <_localeconv_r>:
 800a36c:	4800      	ldr	r0, [pc, #0]	; (800a370 <_localeconv_r+0x4>)
 800a36e:	4770      	bx	lr
 800a370:	20000190 	.word	0x20000190

0800a374 <malloc>:
 800a374:	4b02      	ldr	r3, [pc, #8]	; (800a380 <malloc+0xc>)
 800a376:	4601      	mov	r1, r0
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	f000 bbe1 	b.w	800ab40 <_malloc_r>
 800a37e:	bf00      	nop
 800a380:	2000003c 	.word	0x2000003c

0800a384 <_Balloc>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a388:	4604      	mov	r4, r0
 800a38a:	460d      	mov	r5, r1
 800a38c:	b976      	cbnz	r6, 800a3ac <_Balloc+0x28>
 800a38e:	2010      	movs	r0, #16
 800a390:	f7ff fff0 	bl	800a374 <malloc>
 800a394:	4602      	mov	r2, r0
 800a396:	6260      	str	r0, [r4, #36]	; 0x24
 800a398:	b920      	cbnz	r0, 800a3a4 <_Balloc+0x20>
 800a39a:	4b18      	ldr	r3, [pc, #96]	; (800a3fc <_Balloc+0x78>)
 800a39c:	4818      	ldr	r0, [pc, #96]	; (800a400 <_Balloc+0x7c>)
 800a39e:	2166      	movs	r1, #102	; 0x66
 800a3a0:	f000 fd94 	bl	800aecc <__assert_func>
 800a3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3a8:	6006      	str	r6, [r0, #0]
 800a3aa:	60c6      	str	r6, [r0, #12]
 800a3ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a3ae:	68f3      	ldr	r3, [r6, #12]
 800a3b0:	b183      	cbz	r3, 800a3d4 <_Balloc+0x50>
 800a3b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b4:	68db      	ldr	r3, [r3, #12]
 800a3b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3ba:	b9b8      	cbnz	r0, 800a3ec <_Balloc+0x68>
 800a3bc:	2101      	movs	r1, #1
 800a3be:	fa01 f605 	lsl.w	r6, r1, r5
 800a3c2:	1d72      	adds	r2, r6, #5
 800a3c4:	0092      	lsls	r2, r2, #2
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f000 fb5a 	bl	800aa80 <_calloc_r>
 800a3cc:	b160      	cbz	r0, 800a3e8 <_Balloc+0x64>
 800a3ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3d2:	e00e      	b.n	800a3f2 <_Balloc+0x6e>
 800a3d4:	2221      	movs	r2, #33	; 0x21
 800a3d6:	2104      	movs	r1, #4
 800a3d8:	4620      	mov	r0, r4
 800a3da:	f000 fb51 	bl	800aa80 <_calloc_r>
 800a3de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3e0:	60f0      	str	r0, [r6, #12]
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1e4      	bne.n	800a3b2 <_Balloc+0x2e>
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	bd70      	pop	{r4, r5, r6, pc}
 800a3ec:	6802      	ldr	r2, [r0, #0]
 800a3ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3f8:	e7f7      	b.n	800a3ea <_Balloc+0x66>
 800a3fa:	bf00      	nop
 800a3fc:	0800bb41 	.word	0x0800bb41
 800a400:	0800bbc8 	.word	0x0800bbc8

0800a404 <_Bfree>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a408:	4605      	mov	r5, r0
 800a40a:	460c      	mov	r4, r1
 800a40c:	b976      	cbnz	r6, 800a42c <_Bfree+0x28>
 800a40e:	2010      	movs	r0, #16
 800a410:	f7ff ffb0 	bl	800a374 <malloc>
 800a414:	4602      	mov	r2, r0
 800a416:	6268      	str	r0, [r5, #36]	; 0x24
 800a418:	b920      	cbnz	r0, 800a424 <_Bfree+0x20>
 800a41a:	4b09      	ldr	r3, [pc, #36]	; (800a440 <_Bfree+0x3c>)
 800a41c:	4809      	ldr	r0, [pc, #36]	; (800a444 <_Bfree+0x40>)
 800a41e:	218a      	movs	r1, #138	; 0x8a
 800a420:	f000 fd54 	bl	800aecc <__assert_func>
 800a424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a428:	6006      	str	r6, [r0, #0]
 800a42a:	60c6      	str	r6, [r0, #12]
 800a42c:	b13c      	cbz	r4, 800a43e <_Bfree+0x3a>
 800a42e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a430:	6862      	ldr	r2, [r4, #4]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a438:	6021      	str	r1, [r4, #0]
 800a43a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	0800bb41 	.word	0x0800bb41
 800a444:	0800bbc8 	.word	0x0800bbc8

0800a448 <__multadd>:
 800a448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a44c:	690e      	ldr	r6, [r1, #16]
 800a44e:	4607      	mov	r7, r0
 800a450:	4698      	mov	r8, r3
 800a452:	460c      	mov	r4, r1
 800a454:	f101 0014 	add.w	r0, r1, #20
 800a458:	2300      	movs	r3, #0
 800a45a:	6805      	ldr	r5, [r0, #0]
 800a45c:	b2a9      	uxth	r1, r5
 800a45e:	fb02 8101 	mla	r1, r2, r1, r8
 800a462:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a466:	0c2d      	lsrs	r5, r5, #16
 800a468:	fb02 c505 	mla	r5, r2, r5, ip
 800a46c:	b289      	uxth	r1, r1
 800a46e:	3301      	adds	r3, #1
 800a470:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a474:	429e      	cmp	r6, r3
 800a476:	f840 1b04 	str.w	r1, [r0], #4
 800a47a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a47e:	dcec      	bgt.n	800a45a <__multadd+0x12>
 800a480:	f1b8 0f00 	cmp.w	r8, #0
 800a484:	d022      	beq.n	800a4cc <__multadd+0x84>
 800a486:	68a3      	ldr	r3, [r4, #8]
 800a488:	42b3      	cmp	r3, r6
 800a48a:	dc19      	bgt.n	800a4c0 <__multadd+0x78>
 800a48c:	6861      	ldr	r1, [r4, #4]
 800a48e:	4638      	mov	r0, r7
 800a490:	3101      	adds	r1, #1
 800a492:	f7ff ff77 	bl	800a384 <_Balloc>
 800a496:	4605      	mov	r5, r0
 800a498:	b928      	cbnz	r0, 800a4a6 <__multadd+0x5e>
 800a49a:	4602      	mov	r2, r0
 800a49c:	4b0d      	ldr	r3, [pc, #52]	; (800a4d4 <__multadd+0x8c>)
 800a49e:	480e      	ldr	r0, [pc, #56]	; (800a4d8 <__multadd+0x90>)
 800a4a0:	21b5      	movs	r1, #181	; 0xb5
 800a4a2:	f000 fd13 	bl	800aecc <__assert_func>
 800a4a6:	6922      	ldr	r2, [r4, #16]
 800a4a8:	3202      	adds	r2, #2
 800a4aa:	f104 010c 	add.w	r1, r4, #12
 800a4ae:	0092      	lsls	r2, r2, #2
 800a4b0:	300c      	adds	r0, #12
 800a4b2:	f7fe fcc3 	bl	8008e3c <memcpy>
 800a4b6:	4621      	mov	r1, r4
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	f7ff ffa3 	bl	800a404 <_Bfree>
 800a4be:	462c      	mov	r4, r5
 800a4c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a4c4:	3601      	adds	r6, #1
 800a4c6:	f8c3 8014 	str.w	r8, [r3, #20]
 800a4ca:	6126      	str	r6, [r4, #16]
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d2:	bf00      	nop
 800a4d4:	0800bbb7 	.word	0x0800bbb7
 800a4d8:	0800bbc8 	.word	0x0800bbc8

0800a4dc <__hi0bits>:
 800a4dc:	0c03      	lsrs	r3, r0, #16
 800a4de:	041b      	lsls	r3, r3, #16
 800a4e0:	b9d3      	cbnz	r3, 800a518 <__hi0bits+0x3c>
 800a4e2:	0400      	lsls	r0, r0, #16
 800a4e4:	2310      	movs	r3, #16
 800a4e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a4ea:	bf04      	itt	eq
 800a4ec:	0200      	lsleq	r0, r0, #8
 800a4ee:	3308      	addeq	r3, #8
 800a4f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a4f4:	bf04      	itt	eq
 800a4f6:	0100      	lsleq	r0, r0, #4
 800a4f8:	3304      	addeq	r3, #4
 800a4fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a4fe:	bf04      	itt	eq
 800a500:	0080      	lsleq	r0, r0, #2
 800a502:	3302      	addeq	r3, #2
 800a504:	2800      	cmp	r0, #0
 800a506:	db05      	blt.n	800a514 <__hi0bits+0x38>
 800a508:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a50c:	f103 0301 	add.w	r3, r3, #1
 800a510:	bf08      	it	eq
 800a512:	2320      	moveq	r3, #32
 800a514:	4618      	mov	r0, r3
 800a516:	4770      	bx	lr
 800a518:	2300      	movs	r3, #0
 800a51a:	e7e4      	b.n	800a4e6 <__hi0bits+0xa>

0800a51c <__lo0bits>:
 800a51c:	6803      	ldr	r3, [r0, #0]
 800a51e:	f013 0207 	ands.w	r2, r3, #7
 800a522:	4601      	mov	r1, r0
 800a524:	d00b      	beq.n	800a53e <__lo0bits+0x22>
 800a526:	07da      	lsls	r2, r3, #31
 800a528:	d424      	bmi.n	800a574 <__lo0bits+0x58>
 800a52a:	0798      	lsls	r0, r3, #30
 800a52c:	bf49      	itett	mi
 800a52e:	085b      	lsrmi	r3, r3, #1
 800a530:	089b      	lsrpl	r3, r3, #2
 800a532:	2001      	movmi	r0, #1
 800a534:	600b      	strmi	r3, [r1, #0]
 800a536:	bf5c      	itt	pl
 800a538:	600b      	strpl	r3, [r1, #0]
 800a53a:	2002      	movpl	r0, #2
 800a53c:	4770      	bx	lr
 800a53e:	b298      	uxth	r0, r3
 800a540:	b9b0      	cbnz	r0, 800a570 <__lo0bits+0x54>
 800a542:	0c1b      	lsrs	r3, r3, #16
 800a544:	2010      	movs	r0, #16
 800a546:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a54a:	bf04      	itt	eq
 800a54c:	0a1b      	lsreq	r3, r3, #8
 800a54e:	3008      	addeq	r0, #8
 800a550:	071a      	lsls	r2, r3, #28
 800a552:	bf04      	itt	eq
 800a554:	091b      	lsreq	r3, r3, #4
 800a556:	3004      	addeq	r0, #4
 800a558:	079a      	lsls	r2, r3, #30
 800a55a:	bf04      	itt	eq
 800a55c:	089b      	lsreq	r3, r3, #2
 800a55e:	3002      	addeq	r0, #2
 800a560:	07da      	lsls	r2, r3, #31
 800a562:	d403      	bmi.n	800a56c <__lo0bits+0x50>
 800a564:	085b      	lsrs	r3, r3, #1
 800a566:	f100 0001 	add.w	r0, r0, #1
 800a56a:	d005      	beq.n	800a578 <__lo0bits+0x5c>
 800a56c:	600b      	str	r3, [r1, #0]
 800a56e:	4770      	bx	lr
 800a570:	4610      	mov	r0, r2
 800a572:	e7e8      	b.n	800a546 <__lo0bits+0x2a>
 800a574:	2000      	movs	r0, #0
 800a576:	4770      	bx	lr
 800a578:	2020      	movs	r0, #32
 800a57a:	4770      	bx	lr

0800a57c <__i2b>:
 800a57c:	b510      	push	{r4, lr}
 800a57e:	460c      	mov	r4, r1
 800a580:	2101      	movs	r1, #1
 800a582:	f7ff feff 	bl	800a384 <_Balloc>
 800a586:	4602      	mov	r2, r0
 800a588:	b928      	cbnz	r0, 800a596 <__i2b+0x1a>
 800a58a:	4b05      	ldr	r3, [pc, #20]	; (800a5a0 <__i2b+0x24>)
 800a58c:	4805      	ldr	r0, [pc, #20]	; (800a5a4 <__i2b+0x28>)
 800a58e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a592:	f000 fc9b 	bl	800aecc <__assert_func>
 800a596:	2301      	movs	r3, #1
 800a598:	6144      	str	r4, [r0, #20]
 800a59a:	6103      	str	r3, [r0, #16]
 800a59c:	bd10      	pop	{r4, pc}
 800a59e:	bf00      	nop
 800a5a0:	0800bbb7 	.word	0x0800bbb7
 800a5a4:	0800bbc8 	.word	0x0800bbc8

0800a5a8 <__multiply>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	4614      	mov	r4, r2
 800a5ae:	690a      	ldr	r2, [r1, #16]
 800a5b0:	6923      	ldr	r3, [r4, #16]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	bfb8      	it	lt
 800a5b6:	460b      	movlt	r3, r1
 800a5b8:	460d      	mov	r5, r1
 800a5ba:	bfbc      	itt	lt
 800a5bc:	4625      	movlt	r5, r4
 800a5be:	461c      	movlt	r4, r3
 800a5c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a5c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a5c8:	68ab      	ldr	r3, [r5, #8]
 800a5ca:	6869      	ldr	r1, [r5, #4]
 800a5cc:	eb0a 0709 	add.w	r7, sl, r9
 800a5d0:	42bb      	cmp	r3, r7
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	bfb8      	it	lt
 800a5d6:	3101      	addlt	r1, #1
 800a5d8:	f7ff fed4 	bl	800a384 <_Balloc>
 800a5dc:	b930      	cbnz	r0, 800a5ec <__multiply+0x44>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	4b42      	ldr	r3, [pc, #264]	; (800a6ec <__multiply+0x144>)
 800a5e2:	4843      	ldr	r0, [pc, #268]	; (800a6f0 <__multiply+0x148>)
 800a5e4:	f240 115d 	movw	r1, #349	; 0x15d
 800a5e8:	f000 fc70 	bl	800aecc <__assert_func>
 800a5ec:	f100 0614 	add.w	r6, r0, #20
 800a5f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a5f4:	4633      	mov	r3, r6
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	4543      	cmp	r3, r8
 800a5fa:	d31e      	bcc.n	800a63a <__multiply+0x92>
 800a5fc:	f105 0c14 	add.w	ip, r5, #20
 800a600:	f104 0314 	add.w	r3, r4, #20
 800a604:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a608:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a60c:	9202      	str	r2, [sp, #8]
 800a60e:	ebac 0205 	sub.w	r2, ip, r5
 800a612:	3a15      	subs	r2, #21
 800a614:	f022 0203 	bic.w	r2, r2, #3
 800a618:	3204      	adds	r2, #4
 800a61a:	f105 0115 	add.w	r1, r5, #21
 800a61e:	458c      	cmp	ip, r1
 800a620:	bf38      	it	cc
 800a622:	2204      	movcc	r2, #4
 800a624:	9201      	str	r2, [sp, #4]
 800a626:	9a02      	ldr	r2, [sp, #8]
 800a628:	9303      	str	r3, [sp, #12]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d808      	bhi.n	800a640 <__multiply+0x98>
 800a62e:	2f00      	cmp	r7, #0
 800a630:	dc55      	bgt.n	800a6de <__multiply+0x136>
 800a632:	6107      	str	r7, [r0, #16]
 800a634:	b005      	add	sp, #20
 800a636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63a:	f843 2b04 	str.w	r2, [r3], #4
 800a63e:	e7db      	b.n	800a5f8 <__multiply+0x50>
 800a640:	f8b3 a000 	ldrh.w	sl, [r3]
 800a644:	f1ba 0f00 	cmp.w	sl, #0
 800a648:	d020      	beq.n	800a68c <__multiply+0xe4>
 800a64a:	f105 0e14 	add.w	lr, r5, #20
 800a64e:	46b1      	mov	r9, r6
 800a650:	2200      	movs	r2, #0
 800a652:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a656:	f8d9 b000 	ldr.w	fp, [r9]
 800a65a:	b2a1      	uxth	r1, r4
 800a65c:	fa1f fb8b 	uxth.w	fp, fp
 800a660:	fb0a b101 	mla	r1, sl, r1, fp
 800a664:	4411      	add	r1, r2
 800a666:	f8d9 2000 	ldr.w	r2, [r9]
 800a66a:	0c24      	lsrs	r4, r4, #16
 800a66c:	0c12      	lsrs	r2, r2, #16
 800a66e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a672:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a676:	b289      	uxth	r1, r1
 800a678:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a67c:	45f4      	cmp	ip, lr
 800a67e:	f849 1b04 	str.w	r1, [r9], #4
 800a682:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a686:	d8e4      	bhi.n	800a652 <__multiply+0xaa>
 800a688:	9901      	ldr	r1, [sp, #4]
 800a68a:	5072      	str	r2, [r6, r1]
 800a68c:	9a03      	ldr	r2, [sp, #12]
 800a68e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a692:	3304      	adds	r3, #4
 800a694:	f1b9 0f00 	cmp.w	r9, #0
 800a698:	d01f      	beq.n	800a6da <__multiply+0x132>
 800a69a:	6834      	ldr	r4, [r6, #0]
 800a69c:	f105 0114 	add.w	r1, r5, #20
 800a6a0:	46b6      	mov	lr, r6
 800a6a2:	f04f 0a00 	mov.w	sl, #0
 800a6a6:	880a      	ldrh	r2, [r1, #0]
 800a6a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a6ac:	fb09 b202 	mla	r2, r9, r2, fp
 800a6b0:	4492      	add	sl, r2
 800a6b2:	b2a4      	uxth	r4, r4
 800a6b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a6b8:	f84e 4b04 	str.w	r4, [lr], #4
 800a6bc:	f851 4b04 	ldr.w	r4, [r1], #4
 800a6c0:	f8be 2000 	ldrh.w	r2, [lr]
 800a6c4:	0c24      	lsrs	r4, r4, #16
 800a6c6:	fb09 2404 	mla	r4, r9, r4, r2
 800a6ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a6ce:	458c      	cmp	ip, r1
 800a6d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a6d4:	d8e7      	bhi.n	800a6a6 <__multiply+0xfe>
 800a6d6:	9a01      	ldr	r2, [sp, #4]
 800a6d8:	50b4      	str	r4, [r6, r2]
 800a6da:	3604      	adds	r6, #4
 800a6dc:	e7a3      	b.n	800a626 <__multiply+0x7e>
 800a6de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d1a5      	bne.n	800a632 <__multiply+0x8a>
 800a6e6:	3f01      	subs	r7, #1
 800a6e8:	e7a1      	b.n	800a62e <__multiply+0x86>
 800a6ea:	bf00      	nop
 800a6ec:	0800bbb7 	.word	0x0800bbb7
 800a6f0:	0800bbc8 	.word	0x0800bbc8

0800a6f4 <__pow5mult>:
 800a6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f8:	4615      	mov	r5, r2
 800a6fa:	f012 0203 	ands.w	r2, r2, #3
 800a6fe:	4606      	mov	r6, r0
 800a700:	460f      	mov	r7, r1
 800a702:	d007      	beq.n	800a714 <__pow5mult+0x20>
 800a704:	4c25      	ldr	r4, [pc, #148]	; (800a79c <__pow5mult+0xa8>)
 800a706:	3a01      	subs	r2, #1
 800a708:	2300      	movs	r3, #0
 800a70a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a70e:	f7ff fe9b 	bl	800a448 <__multadd>
 800a712:	4607      	mov	r7, r0
 800a714:	10ad      	asrs	r5, r5, #2
 800a716:	d03d      	beq.n	800a794 <__pow5mult+0xa0>
 800a718:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a71a:	b97c      	cbnz	r4, 800a73c <__pow5mult+0x48>
 800a71c:	2010      	movs	r0, #16
 800a71e:	f7ff fe29 	bl	800a374 <malloc>
 800a722:	4602      	mov	r2, r0
 800a724:	6270      	str	r0, [r6, #36]	; 0x24
 800a726:	b928      	cbnz	r0, 800a734 <__pow5mult+0x40>
 800a728:	4b1d      	ldr	r3, [pc, #116]	; (800a7a0 <__pow5mult+0xac>)
 800a72a:	481e      	ldr	r0, [pc, #120]	; (800a7a4 <__pow5mult+0xb0>)
 800a72c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a730:	f000 fbcc 	bl	800aecc <__assert_func>
 800a734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a738:	6004      	str	r4, [r0, #0]
 800a73a:	60c4      	str	r4, [r0, #12]
 800a73c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a744:	b94c      	cbnz	r4, 800a75a <__pow5mult+0x66>
 800a746:	f240 2171 	movw	r1, #625	; 0x271
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7ff ff16 	bl	800a57c <__i2b>
 800a750:	2300      	movs	r3, #0
 800a752:	f8c8 0008 	str.w	r0, [r8, #8]
 800a756:	4604      	mov	r4, r0
 800a758:	6003      	str	r3, [r0, #0]
 800a75a:	f04f 0900 	mov.w	r9, #0
 800a75e:	07eb      	lsls	r3, r5, #31
 800a760:	d50a      	bpl.n	800a778 <__pow5mult+0x84>
 800a762:	4639      	mov	r1, r7
 800a764:	4622      	mov	r2, r4
 800a766:	4630      	mov	r0, r6
 800a768:	f7ff ff1e 	bl	800a5a8 <__multiply>
 800a76c:	4639      	mov	r1, r7
 800a76e:	4680      	mov	r8, r0
 800a770:	4630      	mov	r0, r6
 800a772:	f7ff fe47 	bl	800a404 <_Bfree>
 800a776:	4647      	mov	r7, r8
 800a778:	106d      	asrs	r5, r5, #1
 800a77a:	d00b      	beq.n	800a794 <__pow5mult+0xa0>
 800a77c:	6820      	ldr	r0, [r4, #0]
 800a77e:	b938      	cbnz	r0, 800a790 <__pow5mult+0x9c>
 800a780:	4622      	mov	r2, r4
 800a782:	4621      	mov	r1, r4
 800a784:	4630      	mov	r0, r6
 800a786:	f7ff ff0f 	bl	800a5a8 <__multiply>
 800a78a:	6020      	str	r0, [r4, #0]
 800a78c:	f8c0 9000 	str.w	r9, [r0]
 800a790:	4604      	mov	r4, r0
 800a792:	e7e4      	b.n	800a75e <__pow5mult+0x6a>
 800a794:	4638      	mov	r0, r7
 800a796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a79a:	bf00      	nop
 800a79c:	0800bd18 	.word	0x0800bd18
 800a7a0:	0800bb41 	.word	0x0800bb41
 800a7a4:	0800bbc8 	.word	0x0800bbc8

0800a7a8 <__lshift>:
 800a7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	460c      	mov	r4, r1
 800a7ae:	6849      	ldr	r1, [r1, #4]
 800a7b0:	6923      	ldr	r3, [r4, #16]
 800a7b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7b6:	68a3      	ldr	r3, [r4, #8]
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	4691      	mov	r9, r2
 800a7bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7c0:	f108 0601 	add.w	r6, r8, #1
 800a7c4:	42b3      	cmp	r3, r6
 800a7c6:	db0b      	blt.n	800a7e0 <__lshift+0x38>
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	f7ff fddb 	bl	800a384 <_Balloc>
 800a7ce:	4605      	mov	r5, r0
 800a7d0:	b948      	cbnz	r0, 800a7e6 <__lshift+0x3e>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	4b28      	ldr	r3, [pc, #160]	; (800a878 <__lshift+0xd0>)
 800a7d6:	4829      	ldr	r0, [pc, #164]	; (800a87c <__lshift+0xd4>)
 800a7d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a7dc:	f000 fb76 	bl	800aecc <__assert_func>
 800a7e0:	3101      	adds	r1, #1
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	e7ee      	b.n	800a7c4 <__lshift+0x1c>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f100 0114 	add.w	r1, r0, #20
 800a7ec:	f100 0210 	add.w	r2, r0, #16
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	4553      	cmp	r3, sl
 800a7f4:	db33      	blt.n	800a85e <__lshift+0xb6>
 800a7f6:	6920      	ldr	r0, [r4, #16]
 800a7f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7fc:	f104 0314 	add.w	r3, r4, #20
 800a800:	f019 091f 	ands.w	r9, r9, #31
 800a804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a808:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a80c:	d02b      	beq.n	800a866 <__lshift+0xbe>
 800a80e:	f1c9 0e20 	rsb	lr, r9, #32
 800a812:	468a      	mov	sl, r1
 800a814:	2200      	movs	r2, #0
 800a816:	6818      	ldr	r0, [r3, #0]
 800a818:	fa00 f009 	lsl.w	r0, r0, r9
 800a81c:	4302      	orrs	r2, r0
 800a81e:	f84a 2b04 	str.w	r2, [sl], #4
 800a822:	f853 2b04 	ldr.w	r2, [r3], #4
 800a826:	459c      	cmp	ip, r3
 800a828:	fa22 f20e 	lsr.w	r2, r2, lr
 800a82c:	d8f3      	bhi.n	800a816 <__lshift+0x6e>
 800a82e:	ebac 0304 	sub.w	r3, ip, r4
 800a832:	3b15      	subs	r3, #21
 800a834:	f023 0303 	bic.w	r3, r3, #3
 800a838:	3304      	adds	r3, #4
 800a83a:	f104 0015 	add.w	r0, r4, #21
 800a83e:	4584      	cmp	ip, r0
 800a840:	bf38      	it	cc
 800a842:	2304      	movcc	r3, #4
 800a844:	50ca      	str	r2, [r1, r3]
 800a846:	b10a      	cbz	r2, 800a84c <__lshift+0xa4>
 800a848:	f108 0602 	add.w	r6, r8, #2
 800a84c:	3e01      	subs	r6, #1
 800a84e:	4638      	mov	r0, r7
 800a850:	612e      	str	r6, [r5, #16]
 800a852:	4621      	mov	r1, r4
 800a854:	f7ff fdd6 	bl	800a404 <_Bfree>
 800a858:	4628      	mov	r0, r5
 800a85a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a85e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a862:	3301      	adds	r3, #1
 800a864:	e7c5      	b.n	800a7f2 <__lshift+0x4a>
 800a866:	3904      	subs	r1, #4
 800a868:	f853 2b04 	ldr.w	r2, [r3], #4
 800a86c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a870:	459c      	cmp	ip, r3
 800a872:	d8f9      	bhi.n	800a868 <__lshift+0xc0>
 800a874:	e7ea      	b.n	800a84c <__lshift+0xa4>
 800a876:	bf00      	nop
 800a878:	0800bbb7 	.word	0x0800bbb7
 800a87c:	0800bbc8 	.word	0x0800bbc8

0800a880 <__mcmp>:
 800a880:	b530      	push	{r4, r5, lr}
 800a882:	6902      	ldr	r2, [r0, #16]
 800a884:	690c      	ldr	r4, [r1, #16]
 800a886:	1b12      	subs	r2, r2, r4
 800a888:	d10e      	bne.n	800a8a8 <__mcmp+0x28>
 800a88a:	f100 0314 	add.w	r3, r0, #20
 800a88e:	3114      	adds	r1, #20
 800a890:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a894:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a898:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a89c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8a0:	42a5      	cmp	r5, r4
 800a8a2:	d003      	beq.n	800a8ac <__mcmp+0x2c>
 800a8a4:	d305      	bcc.n	800a8b2 <__mcmp+0x32>
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	bd30      	pop	{r4, r5, pc}
 800a8ac:	4283      	cmp	r3, r0
 800a8ae:	d3f3      	bcc.n	800a898 <__mcmp+0x18>
 800a8b0:	e7fa      	b.n	800a8a8 <__mcmp+0x28>
 800a8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b6:	e7f7      	b.n	800a8a8 <__mcmp+0x28>

0800a8b8 <__mdiff>:
 800a8b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	460c      	mov	r4, r1
 800a8be:	4606      	mov	r6, r0
 800a8c0:	4611      	mov	r1, r2
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	4617      	mov	r7, r2
 800a8c6:	f7ff ffdb 	bl	800a880 <__mcmp>
 800a8ca:	1e05      	subs	r5, r0, #0
 800a8cc:	d110      	bne.n	800a8f0 <__mdiff+0x38>
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f7ff fd57 	bl	800a384 <_Balloc>
 800a8d6:	b930      	cbnz	r0, 800a8e6 <__mdiff+0x2e>
 800a8d8:	4b39      	ldr	r3, [pc, #228]	; (800a9c0 <__mdiff+0x108>)
 800a8da:	4602      	mov	r2, r0
 800a8dc:	f240 2132 	movw	r1, #562	; 0x232
 800a8e0:	4838      	ldr	r0, [pc, #224]	; (800a9c4 <__mdiff+0x10c>)
 800a8e2:	f000 faf3 	bl	800aecc <__assert_func>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	bfa4      	itt	ge
 800a8f2:	463b      	movge	r3, r7
 800a8f4:	4627      	movge	r7, r4
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	6879      	ldr	r1, [r7, #4]
 800a8fa:	bfa6      	itte	ge
 800a8fc:	461c      	movge	r4, r3
 800a8fe:	2500      	movge	r5, #0
 800a900:	2501      	movlt	r5, #1
 800a902:	f7ff fd3f 	bl	800a384 <_Balloc>
 800a906:	b920      	cbnz	r0, 800a912 <__mdiff+0x5a>
 800a908:	4b2d      	ldr	r3, [pc, #180]	; (800a9c0 <__mdiff+0x108>)
 800a90a:	4602      	mov	r2, r0
 800a90c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a910:	e7e6      	b.n	800a8e0 <__mdiff+0x28>
 800a912:	693e      	ldr	r6, [r7, #16]
 800a914:	60c5      	str	r5, [r0, #12]
 800a916:	6925      	ldr	r5, [r4, #16]
 800a918:	f107 0114 	add.w	r1, r7, #20
 800a91c:	f104 0914 	add.w	r9, r4, #20
 800a920:	f100 0e14 	add.w	lr, r0, #20
 800a924:	f107 0210 	add.w	r2, r7, #16
 800a928:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a92c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a930:	46f2      	mov	sl, lr
 800a932:	2700      	movs	r7, #0
 800a934:	f859 3b04 	ldr.w	r3, [r9], #4
 800a938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a93c:	fa1f f883 	uxth.w	r8, r3
 800a940:	fa17 f78b 	uxtah	r7, r7, fp
 800a944:	0c1b      	lsrs	r3, r3, #16
 800a946:	eba7 0808 	sub.w	r8, r7, r8
 800a94a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a94e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a952:	fa1f f888 	uxth.w	r8, r8
 800a956:	141f      	asrs	r7, r3, #16
 800a958:	454d      	cmp	r5, r9
 800a95a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a95e:	f84a 3b04 	str.w	r3, [sl], #4
 800a962:	d8e7      	bhi.n	800a934 <__mdiff+0x7c>
 800a964:	1b2b      	subs	r3, r5, r4
 800a966:	3b15      	subs	r3, #21
 800a968:	f023 0303 	bic.w	r3, r3, #3
 800a96c:	3304      	adds	r3, #4
 800a96e:	3415      	adds	r4, #21
 800a970:	42a5      	cmp	r5, r4
 800a972:	bf38      	it	cc
 800a974:	2304      	movcc	r3, #4
 800a976:	4419      	add	r1, r3
 800a978:	4473      	add	r3, lr
 800a97a:	469e      	mov	lr, r3
 800a97c:	460d      	mov	r5, r1
 800a97e:	4565      	cmp	r5, ip
 800a980:	d30e      	bcc.n	800a9a0 <__mdiff+0xe8>
 800a982:	f10c 0203 	add.w	r2, ip, #3
 800a986:	1a52      	subs	r2, r2, r1
 800a988:	f022 0203 	bic.w	r2, r2, #3
 800a98c:	3903      	subs	r1, #3
 800a98e:	458c      	cmp	ip, r1
 800a990:	bf38      	it	cc
 800a992:	2200      	movcc	r2, #0
 800a994:	441a      	add	r2, r3
 800a996:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a99a:	b17b      	cbz	r3, 800a9bc <__mdiff+0x104>
 800a99c:	6106      	str	r6, [r0, #16]
 800a99e:	e7a5      	b.n	800a8ec <__mdiff+0x34>
 800a9a0:	f855 8b04 	ldr.w	r8, [r5], #4
 800a9a4:	fa17 f488 	uxtah	r4, r7, r8
 800a9a8:	1422      	asrs	r2, r4, #16
 800a9aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a9ae:	b2a4      	uxth	r4, r4
 800a9b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a9b4:	f84e 4b04 	str.w	r4, [lr], #4
 800a9b8:	1417      	asrs	r7, r2, #16
 800a9ba:	e7e0      	b.n	800a97e <__mdiff+0xc6>
 800a9bc:	3e01      	subs	r6, #1
 800a9be:	e7ea      	b.n	800a996 <__mdiff+0xde>
 800a9c0:	0800bbb7 	.word	0x0800bbb7
 800a9c4:	0800bbc8 	.word	0x0800bbc8

0800a9c8 <__d2b>:
 800a9c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9cc:	4689      	mov	r9, r1
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	ec57 6b10 	vmov	r6, r7, d0
 800a9d4:	4690      	mov	r8, r2
 800a9d6:	f7ff fcd5 	bl	800a384 <_Balloc>
 800a9da:	4604      	mov	r4, r0
 800a9dc:	b930      	cbnz	r0, 800a9ec <__d2b+0x24>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	4b25      	ldr	r3, [pc, #148]	; (800aa78 <__d2b+0xb0>)
 800a9e2:	4826      	ldr	r0, [pc, #152]	; (800aa7c <__d2b+0xb4>)
 800a9e4:	f240 310a 	movw	r1, #778	; 0x30a
 800a9e8:	f000 fa70 	bl	800aecc <__assert_func>
 800a9ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a9f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9f4:	bb35      	cbnz	r5, 800aa44 <__d2b+0x7c>
 800a9f6:	2e00      	cmp	r6, #0
 800a9f8:	9301      	str	r3, [sp, #4]
 800a9fa:	d028      	beq.n	800aa4e <__d2b+0x86>
 800a9fc:	4668      	mov	r0, sp
 800a9fe:	9600      	str	r6, [sp, #0]
 800aa00:	f7ff fd8c 	bl	800a51c <__lo0bits>
 800aa04:	9900      	ldr	r1, [sp, #0]
 800aa06:	b300      	cbz	r0, 800aa4a <__d2b+0x82>
 800aa08:	9a01      	ldr	r2, [sp, #4]
 800aa0a:	f1c0 0320 	rsb	r3, r0, #32
 800aa0e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa12:	430b      	orrs	r3, r1
 800aa14:	40c2      	lsrs	r2, r0
 800aa16:	6163      	str	r3, [r4, #20]
 800aa18:	9201      	str	r2, [sp, #4]
 800aa1a:	9b01      	ldr	r3, [sp, #4]
 800aa1c:	61a3      	str	r3, [r4, #24]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bf14      	ite	ne
 800aa22:	2202      	movne	r2, #2
 800aa24:	2201      	moveq	r2, #1
 800aa26:	6122      	str	r2, [r4, #16]
 800aa28:	b1d5      	cbz	r5, 800aa60 <__d2b+0x98>
 800aa2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa2e:	4405      	add	r5, r0
 800aa30:	f8c9 5000 	str.w	r5, [r9]
 800aa34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa38:	f8c8 0000 	str.w	r0, [r8]
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	b003      	add	sp, #12
 800aa40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa48:	e7d5      	b.n	800a9f6 <__d2b+0x2e>
 800aa4a:	6161      	str	r1, [r4, #20]
 800aa4c:	e7e5      	b.n	800aa1a <__d2b+0x52>
 800aa4e:	a801      	add	r0, sp, #4
 800aa50:	f7ff fd64 	bl	800a51c <__lo0bits>
 800aa54:	9b01      	ldr	r3, [sp, #4]
 800aa56:	6163      	str	r3, [r4, #20]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	6122      	str	r2, [r4, #16]
 800aa5c:	3020      	adds	r0, #32
 800aa5e:	e7e3      	b.n	800aa28 <__d2b+0x60>
 800aa60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa68:	f8c9 0000 	str.w	r0, [r9]
 800aa6c:	6918      	ldr	r0, [r3, #16]
 800aa6e:	f7ff fd35 	bl	800a4dc <__hi0bits>
 800aa72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa76:	e7df      	b.n	800aa38 <__d2b+0x70>
 800aa78:	0800bbb7 	.word	0x0800bbb7
 800aa7c:	0800bbc8 	.word	0x0800bbc8

0800aa80 <_calloc_r>:
 800aa80:	b513      	push	{r0, r1, r4, lr}
 800aa82:	434a      	muls	r2, r1
 800aa84:	4611      	mov	r1, r2
 800aa86:	9201      	str	r2, [sp, #4]
 800aa88:	f000 f85a 	bl	800ab40 <_malloc_r>
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	b118      	cbz	r0, 800aa98 <_calloc_r+0x18>
 800aa90:	9a01      	ldr	r2, [sp, #4]
 800aa92:	2100      	movs	r1, #0
 800aa94:	f7fe f9e0 	bl	8008e58 <memset>
 800aa98:	4620      	mov	r0, r4
 800aa9a:	b002      	add	sp, #8
 800aa9c:	bd10      	pop	{r4, pc}
	...

0800aaa0 <_free_r>:
 800aaa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaa2:	2900      	cmp	r1, #0
 800aaa4:	d048      	beq.n	800ab38 <_free_r+0x98>
 800aaa6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaaa:	9001      	str	r0, [sp, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f1a1 0404 	sub.w	r4, r1, #4
 800aab2:	bfb8      	it	lt
 800aab4:	18e4      	addlt	r4, r4, r3
 800aab6:	f000 fa65 	bl	800af84 <__malloc_lock>
 800aaba:	4a20      	ldr	r2, [pc, #128]	; (800ab3c <_free_r+0x9c>)
 800aabc:	9801      	ldr	r0, [sp, #4]
 800aabe:	6813      	ldr	r3, [r2, #0]
 800aac0:	4615      	mov	r5, r2
 800aac2:	b933      	cbnz	r3, 800aad2 <_free_r+0x32>
 800aac4:	6063      	str	r3, [r4, #4]
 800aac6:	6014      	str	r4, [r2, #0]
 800aac8:	b003      	add	sp, #12
 800aaca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aace:	f000 ba5f 	b.w	800af90 <__malloc_unlock>
 800aad2:	42a3      	cmp	r3, r4
 800aad4:	d90b      	bls.n	800aaee <_free_r+0x4e>
 800aad6:	6821      	ldr	r1, [r4, #0]
 800aad8:	1862      	adds	r2, r4, r1
 800aada:	4293      	cmp	r3, r2
 800aadc:	bf04      	itt	eq
 800aade:	681a      	ldreq	r2, [r3, #0]
 800aae0:	685b      	ldreq	r3, [r3, #4]
 800aae2:	6063      	str	r3, [r4, #4]
 800aae4:	bf04      	itt	eq
 800aae6:	1852      	addeq	r2, r2, r1
 800aae8:	6022      	streq	r2, [r4, #0]
 800aaea:	602c      	str	r4, [r5, #0]
 800aaec:	e7ec      	b.n	800aac8 <_free_r+0x28>
 800aaee:	461a      	mov	r2, r3
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	b10b      	cbz	r3, 800aaf8 <_free_r+0x58>
 800aaf4:	42a3      	cmp	r3, r4
 800aaf6:	d9fa      	bls.n	800aaee <_free_r+0x4e>
 800aaf8:	6811      	ldr	r1, [r2, #0]
 800aafa:	1855      	adds	r5, r2, r1
 800aafc:	42a5      	cmp	r5, r4
 800aafe:	d10b      	bne.n	800ab18 <_free_r+0x78>
 800ab00:	6824      	ldr	r4, [r4, #0]
 800ab02:	4421      	add	r1, r4
 800ab04:	1854      	adds	r4, r2, r1
 800ab06:	42a3      	cmp	r3, r4
 800ab08:	6011      	str	r1, [r2, #0]
 800ab0a:	d1dd      	bne.n	800aac8 <_free_r+0x28>
 800ab0c:	681c      	ldr	r4, [r3, #0]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	6053      	str	r3, [r2, #4]
 800ab12:	4421      	add	r1, r4
 800ab14:	6011      	str	r1, [r2, #0]
 800ab16:	e7d7      	b.n	800aac8 <_free_r+0x28>
 800ab18:	d902      	bls.n	800ab20 <_free_r+0x80>
 800ab1a:	230c      	movs	r3, #12
 800ab1c:	6003      	str	r3, [r0, #0]
 800ab1e:	e7d3      	b.n	800aac8 <_free_r+0x28>
 800ab20:	6825      	ldr	r5, [r4, #0]
 800ab22:	1961      	adds	r1, r4, r5
 800ab24:	428b      	cmp	r3, r1
 800ab26:	bf04      	itt	eq
 800ab28:	6819      	ldreq	r1, [r3, #0]
 800ab2a:	685b      	ldreq	r3, [r3, #4]
 800ab2c:	6063      	str	r3, [r4, #4]
 800ab2e:	bf04      	itt	eq
 800ab30:	1949      	addeq	r1, r1, r5
 800ab32:	6021      	streq	r1, [r4, #0]
 800ab34:	6054      	str	r4, [r2, #4]
 800ab36:	e7c7      	b.n	800aac8 <_free_r+0x28>
 800ab38:	b003      	add	sp, #12
 800ab3a:	bd30      	pop	{r4, r5, pc}
 800ab3c:	2000022c 	.word	0x2000022c

0800ab40 <_malloc_r>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	1ccd      	adds	r5, r1, #3
 800ab44:	f025 0503 	bic.w	r5, r5, #3
 800ab48:	3508      	adds	r5, #8
 800ab4a:	2d0c      	cmp	r5, #12
 800ab4c:	bf38      	it	cc
 800ab4e:	250c      	movcc	r5, #12
 800ab50:	2d00      	cmp	r5, #0
 800ab52:	4606      	mov	r6, r0
 800ab54:	db01      	blt.n	800ab5a <_malloc_r+0x1a>
 800ab56:	42a9      	cmp	r1, r5
 800ab58:	d903      	bls.n	800ab62 <_malloc_r+0x22>
 800ab5a:	230c      	movs	r3, #12
 800ab5c:	6033      	str	r3, [r6, #0]
 800ab5e:	2000      	movs	r0, #0
 800ab60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab62:	f000 fa0f 	bl	800af84 <__malloc_lock>
 800ab66:	4921      	ldr	r1, [pc, #132]	; (800abec <_malloc_r+0xac>)
 800ab68:	680a      	ldr	r2, [r1, #0]
 800ab6a:	4614      	mov	r4, r2
 800ab6c:	b99c      	cbnz	r4, 800ab96 <_malloc_r+0x56>
 800ab6e:	4f20      	ldr	r7, [pc, #128]	; (800abf0 <_malloc_r+0xb0>)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	b923      	cbnz	r3, 800ab7e <_malloc_r+0x3e>
 800ab74:	4621      	mov	r1, r4
 800ab76:	4630      	mov	r0, r6
 800ab78:	f000 f998 	bl	800aeac <_sbrk_r>
 800ab7c:	6038      	str	r0, [r7, #0]
 800ab7e:	4629      	mov	r1, r5
 800ab80:	4630      	mov	r0, r6
 800ab82:	f000 f993 	bl	800aeac <_sbrk_r>
 800ab86:	1c43      	adds	r3, r0, #1
 800ab88:	d123      	bne.n	800abd2 <_malloc_r+0x92>
 800ab8a:	230c      	movs	r3, #12
 800ab8c:	6033      	str	r3, [r6, #0]
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f000 f9fe 	bl	800af90 <__malloc_unlock>
 800ab94:	e7e3      	b.n	800ab5e <_malloc_r+0x1e>
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	1b5b      	subs	r3, r3, r5
 800ab9a:	d417      	bmi.n	800abcc <_malloc_r+0x8c>
 800ab9c:	2b0b      	cmp	r3, #11
 800ab9e:	d903      	bls.n	800aba8 <_malloc_r+0x68>
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	441c      	add	r4, r3
 800aba4:	6025      	str	r5, [r4, #0]
 800aba6:	e004      	b.n	800abb2 <_malloc_r+0x72>
 800aba8:	6863      	ldr	r3, [r4, #4]
 800abaa:	42a2      	cmp	r2, r4
 800abac:	bf0c      	ite	eq
 800abae:	600b      	streq	r3, [r1, #0]
 800abb0:	6053      	strne	r3, [r2, #4]
 800abb2:	4630      	mov	r0, r6
 800abb4:	f000 f9ec 	bl	800af90 <__malloc_unlock>
 800abb8:	f104 000b 	add.w	r0, r4, #11
 800abbc:	1d23      	adds	r3, r4, #4
 800abbe:	f020 0007 	bic.w	r0, r0, #7
 800abc2:	1ac2      	subs	r2, r0, r3
 800abc4:	d0cc      	beq.n	800ab60 <_malloc_r+0x20>
 800abc6:	1a1b      	subs	r3, r3, r0
 800abc8:	50a3      	str	r3, [r4, r2]
 800abca:	e7c9      	b.n	800ab60 <_malloc_r+0x20>
 800abcc:	4622      	mov	r2, r4
 800abce:	6864      	ldr	r4, [r4, #4]
 800abd0:	e7cc      	b.n	800ab6c <_malloc_r+0x2c>
 800abd2:	1cc4      	adds	r4, r0, #3
 800abd4:	f024 0403 	bic.w	r4, r4, #3
 800abd8:	42a0      	cmp	r0, r4
 800abda:	d0e3      	beq.n	800aba4 <_malloc_r+0x64>
 800abdc:	1a21      	subs	r1, r4, r0
 800abde:	4630      	mov	r0, r6
 800abe0:	f000 f964 	bl	800aeac <_sbrk_r>
 800abe4:	3001      	adds	r0, #1
 800abe6:	d1dd      	bne.n	800aba4 <_malloc_r+0x64>
 800abe8:	e7cf      	b.n	800ab8a <_malloc_r+0x4a>
 800abea:	bf00      	nop
 800abec:	2000022c 	.word	0x2000022c
 800abf0:	20000230 	.word	0x20000230

0800abf4 <__ssputs_r>:
 800abf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abf8:	688e      	ldr	r6, [r1, #8]
 800abfa:	429e      	cmp	r6, r3
 800abfc:	4682      	mov	sl, r0
 800abfe:	460c      	mov	r4, r1
 800ac00:	4690      	mov	r8, r2
 800ac02:	461f      	mov	r7, r3
 800ac04:	d838      	bhi.n	800ac78 <__ssputs_r+0x84>
 800ac06:	898a      	ldrh	r2, [r1, #12]
 800ac08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac0c:	d032      	beq.n	800ac74 <__ssputs_r+0x80>
 800ac0e:	6825      	ldr	r5, [r4, #0]
 800ac10:	6909      	ldr	r1, [r1, #16]
 800ac12:	eba5 0901 	sub.w	r9, r5, r1
 800ac16:	6965      	ldr	r5, [r4, #20]
 800ac18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac20:	3301      	adds	r3, #1
 800ac22:	444b      	add	r3, r9
 800ac24:	106d      	asrs	r5, r5, #1
 800ac26:	429d      	cmp	r5, r3
 800ac28:	bf38      	it	cc
 800ac2a:	461d      	movcc	r5, r3
 800ac2c:	0553      	lsls	r3, r2, #21
 800ac2e:	d531      	bpl.n	800ac94 <__ssputs_r+0xa0>
 800ac30:	4629      	mov	r1, r5
 800ac32:	f7ff ff85 	bl	800ab40 <_malloc_r>
 800ac36:	4606      	mov	r6, r0
 800ac38:	b950      	cbnz	r0, 800ac50 <__ssputs_r+0x5c>
 800ac3a:	230c      	movs	r3, #12
 800ac3c:	f8ca 3000 	str.w	r3, [sl]
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	f04f 30ff 	mov.w	r0, #4294967295
 800ac4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac50:	6921      	ldr	r1, [r4, #16]
 800ac52:	464a      	mov	r2, r9
 800ac54:	f7fe f8f2 	bl	8008e3c <memcpy>
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac62:	81a3      	strh	r3, [r4, #12]
 800ac64:	6126      	str	r6, [r4, #16]
 800ac66:	6165      	str	r5, [r4, #20]
 800ac68:	444e      	add	r6, r9
 800ac6a:	eba5 0509 	sub.w	r5, r5, r9
 800ac6e:	6026      	str	r6, [r4, #0]
 800ac70:	60a5      	str	r5, [r4, #8]
 800ac72:	463e      	mov	r6, r7
 800ac74:	42be      	cmp	r6, r7
 800ac76:	d900      	bls.n	800ac7a <__ssputs_r+0x86>
 800ac78:	463e      	mov	r6, r7
 800ac7a:	4632      	mov	r2, r6
 800ac7c:	6820      	ldr	r0, [r4, #0]
 800ac7e:	4641      	mov	r1, r8
 800ac80:	f000 f966 	bl	800af50 <memmove>
 800ac84:	68a3      	ldr	r3, [r4, #8]
 800ac86:	6822      	ldr	r2, [r4, #0]
 800ac88:	1b9b      	subs	r3, r3, r6
 800ac8a:	4432      	add	r2, r6
 800ac8c:	60a3      	str	r3, [r4, #8]
 800ac8e:	6022      	str	r2, [r4, #0]
 800ac90:	2000      	movs	r0, #0
 800ac92:	e7db      	b.n	800ac4c <__ssputs_r+0x58>
 800ac94:	462a      	mov	r2, r5
 800ac96:	f000 f981 	bl	800af9c <_realloc_r>
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d1e1      	bne.n	800ac64 <__ssputs_r+0x70>
 800aca0:	6921      	ldr	r1, [r4, #16]
 800aca2:	4650      	mov	r0, sl
 800aca4:	f7ff fefc 	bl	800aaa0 <_free_r>
 800aca8:	e7c7      	b.n	800ac3a <__ssputs_r+0x46>
	...

0800acac <_svfiprintf_r>:
 800acac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb0:	4698      	mov	r8, r3
 800acb2:	898b      	ldrh	r3, [r1, #12]
 800acb4:	061b      	lsls	r3, r3, #24
 800acb6:	b09d      	sub	sp, #116	; 0x74
 800acb8:	4607      	mov	r7, r0
 800acba:	460d      	mov	r5, r1
 800acbc:	4614      	mov	r4, r2
 800acbe:	d50e      	bpl.n	800acde <_svfiprintf_r+0x32>
 800acc0:	690b      	ldr	r3, [r1, #16]
 800acc2:	b963      	cbnz	r3, 800acde <_svfiprintf_r+0x32>
 800acc4:	2140      	movs	r1, #64	; 0x40
 800acc6:	f7ff ff3b 	bl	800ab40 <_malloc_r>
 800acca:	6028      	str	r0, [r5, #0]
 800accc:	6128      	str	r0, [r5, #16]
 800acce:	b920      	cbnz	r0, 800acda <_svfiprintf_r+0x2e>
 800acd0:	230c      	movs	r3, #12
 800acd2:	603b      	str	r3, [r7, #0]
 800acd4:	f04f 30ff 	mov.w	r0, #4294967295
 800acd8:	e0d1      	b.n	800ae7e <_svfiprintf_r+0x1d2>
 800acda:	2340      	movs	r3, #64	; 0x40
 800acdc:	616b      	str	r3, [r5, #20]
 800acde:	2300      	movs	r3, #0
 800ace0:	9309      	str	r3, [sp, #36]	; 0x24
 800ace2:	2320      	movs	r3, #32
 800ace4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ace8:	f8cd 800c 	str.w	r8, [sp, #12]
 800acec:	2330      	movs	r3, #48	; 0x30
 800acee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae98 <_svfiprintf_r+0x1ec>
 800acf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acf6:	f04f 0901 	mov.w	r9, #1
 800acfa:	4623      	mov	r3, r4
 800acfc:	469a      	mov	sl, r3
 800acfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad02:	b10a      	cbz	r2, 800ad08 <_svfiprintf_r+0x5c>
 800ad04:	2a25      	cmp	r2, #37	; 0x25
 800ad06:	d1f9      	bne.n	800acfc <_svfiprintf_r+0x50>
 800ad08:	ebba 0b04 	subs.w	fp, sl, r4
 800ad0c:	d00b      	beq.n	800ad26 <_svfiprintf_r+0x7a>
 800ad0e:	465b      	mov	r3, fp
 800ad10:	4622      	mov	r2, r4
 800ad12:	4629      	mov	r1, r5
 800ad14:	4638      	mov	r0, r7
 800ad16:	f7ff ff6d 	bl	800abf4 <__ssputs_r>
 800ad1a:	3001      	adds	r0, #1
 800ad1c:	f000 80aa 	beq.w	800ae74 <_svfiprintf_r+0x1c8>
 800ad20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad22:	445a      	add	r2, fp
 800ad24:	9209      	str	r2, [sp, #36]	; 0x24
 800ad26:	f89a 3000 	ldrb.w	r3, [sl]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 80a2 	beq.w	800ae74 <_svfiprintf_r+0x1c8>
 800ad30:	2300      	movs	r3, #0
 800ad32:	f04f 32ff 	mov.w	r2, #4294967295
 800ad36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad3a:	f10a 0a01 	add.w	sl, sl, #1
 800ad3e:	9304      	str	r3, [sp, #16]
 800ad40:	9307      	str	r3, [sp, #28]
 800ad42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad46:	931a      	str	r3, [sp, #104]	; 0x68
 800ad48:	4654      	mov	r4, sl
 800ad4a:	2205      	movs	r2, #5
 800ad4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad50:	4851      	ldr	r0, [pc, #324]	; (800ae98 <_svfiprintf_r+0x1ec>)
 800ad52:	f7f5 fa7d 	bl	8000250 <memchr>
 800ad56:	9a04      	ldr	r2, [sp, #16]
 800ad58:	b9d8      	cbnz	r0, 800ad92 <_svfiprintf_r+0xe6>
 800ad5a:	06d0      	lsls	r0, r2, #27
 800ad5c:	bf44      	itt	mi
 800ad5e:	2320      	movmi	r3, #32
 800ad60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad64:	0711      	lsls	r1, r2, #28
 800ad66:	bf44      	itt	mi
 800ad68:	232b      	movmi	r3, #43	; 0x2b
 800ad6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad72:	2b2a      	cmp	r3, #42	; 0x2a
 800ad74:	d015      	beq.n	800ada2 <_svfiprintf_r+0xf6>
 800ad76:	9a07      	ldr	r2, [sp, #28]
 800ad78:	4654      	mov	r4, sl
 800ad7a:	2000      	movs	r0, #0
 800ad7c:	f04f 0c0a 	mov.w	ip, #10
 800ad80:	4621      	mov	r1, r4
 800ad82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad86:	3b30      	subs	r3, #48	; 0x30
 800ad88:	2b09      	cmp	r3, #9
 800ad8a:	d94e      	bls.n	800ae2a <_svfiprintf_r+0x17e>
 800ad8c:	b1b0      	cbz	r0, 800adbc <_svfiprintf_r+0x110>
 800ad8e:	9207      	str	r2, [sp, #28]
 800ad90:	e014      	b.n	800adbc <_svfiprintf_r+0x110>
 800ad92:	eba0 0308 	sub.w	r3, r0, r8
 800ad96:	fa09 f303 	lsl.w	r3, r9, r3
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	9304      	str	r3, [sp, #16]
 800ad9e:	46a2      	mov	sl, r4
 800ada0:	e7d2      	b.n	800ad48 <_svfiprintf_r+0x9c>
 800ada2:	9b03      	ldr	r3, [sp, #12]
 800ada4:	1d19      	adds	r1, r3, #4
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	9103      	str	r1, [sp, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	bfbb      	ittet	lt
 800adae:	425b      	neglt	r3, r3
 800adb0:	f042 0202 	orrlt.w	r2, r2, #2
 800adb4:	9307      	strge	r3, [sp, #28]
 800adb6:	9307      	strlt	r3, [sp, #28]
 800adb8:	bfb8      	it	lt
 800adba:	9204      	strlt	r2, [sp, #16]
 800adbc:	7823      	ldrb	r3, [r4, #0]
 800adbe:	2b2e      	cmp	r3, #46	; 0x2e
 800adc0:	d10c      	bne.n	800addc <_svfiprintf_r+0x130>
 800adc2:	7863      	ldrb	r3, [r4, #1]
 800adc4:	2b2a      	cmp	r3, #42	; 0x2a
 800adc6:	d135      	bne.n	800ae34 <_svfiprintf_r+0x188>
 800adc8:	9b03      	ldr	r3, [sp, #12]
 800adca:	1d1a      	adds	r2, r3, #4
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	9203      	str	r2, [sp, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	bfb8      	it	lt
 800add4:	f04f 33ff 	movlt.w	r3, #4294967295
 800add8:	3402      	adds	r4, #2
 800adda:	9305      	str	r3, [sp, #20]
 800addc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aea8 <_svfiprintf_r+0x1fc>
 800ade0:	7821      	ldrb	r1, [r4, #0]
 800ade2:	2203      	movs	r2, #3
 800ade4:	4650      	mov	r0, sl
 800ade6:	f7f5 fa33 	bl	8000250 <memchr>
 800adea:	b140      	cbz	r0, 800adfe <_svfiprintf_r+0x152>
 800adec:	2340      	movs	r3, #64	; 0x40
 800adee:	eba0 000a 	sub.w	r0, r0, sl
 800adf2:	fa03 f000 	lsl.w	r0, r3, r0
 800adf6:	9b04      	ldr	r3, [sp, #16]
 800adf8:	4303      	orrs	r3, r0
 800adfa:	3401      	adds	r4, #1
 800adfc:	9304      	str	r3, [sp, #16]
 800adfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae02:	4826      	ldr	r0, [pc, #152]	; (800ae9c <_svfiprintf_r+0x1f0>)
 800ae04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae08:	2206      	movs	r2, #6
 800ae0a:	f7f5 fa21 	bl	8000250 <memchr>
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	d038      	beq.n	800ae84 <_svfiprintf_r+0x1d8>
 800ae12:	4b23      	ldr	r3, [pc, #140]	; (800aea0 <_svfiprintf_r+0x1f4>)
 800ae14:	bb1b      	cbnz	r3, 800ae5e <_svfiprintf_r+0x1b2>
 800ae16:	9b03      	ldr	r3, [sp, #12]
 800ae18:	3307      	adds	r3, #7
 800ae1a:	f023 0307 	bic.w	r3, r3, #7
 800ae1e:	3308      	adds	r3, #8
 800ae20:	9303      	str	r3, [sp, #12]
 800ae22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae24:	4433      	add	r3, r6
 800ae26:	9309      	str	r3, [sp, #36]	; 0x24
 800ae28:	e767      	b.n	800acfa <_svfiprintf_r+0x4e>
 800ae2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae2e:	460c      	mov	r4, r1
 800ae30:	2001      	movs	r0, #1
 800ae32:	e7a5      	b.n	800ad80 <_svfiprintf_r+0xd4>
 800ae34:	2300      	movs	r3, #0
 800ae36:	3401      	adds	r4, #1
 800ae38:	9305      	str	r3, [sp, #20]
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	f04f 0c0a 	mov.w	ip, #10
 800ae40:	4620      	mov	r0, r4
 800ae42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae46:	3a30      	subs	r2, #48	; 0x30
 800ae48:	2a09      	cmp	r2, #9
 800ae4a:	d903      	bls.n	800ae54 <_svfiprintf_r+0x1a8>
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d0c5      	beq.n	800addc <_svfiprintf_r+0x130>
 800ae50:	9105      	str	r1, [sp, #20]
 800ae52:	e7c3      	b.n	800addc <_svfiprintf_r+0x130>
 800ae54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae58:	4604      	mov	r4, r0
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e7f0      	b.n	800ae40 <_svfiprintf_r+0x194>
 800ae5e:	ab03      	add	r3, sp, #12
 800ae60:	9300      	str	r3, [sp, #0]
 800ae62:	462a      	mov	r2, r5
 800ae64:	4b0f      	ldr	r3, [pc, #60]	; (800aea4 <_svfiprintf_r+0x1f8>)
 800ae66:	a904      	add	r1, sp, #16
 800ae68:	4638      	mov	r0, r7
 800ae6a:	f7fe f88d 	bl	8008f88 <_printf_float>
 800ae6e:	1c42      	adds	r2, r0, #1
 800ae70:	4606      	mov	r6, r0
 800ae72:	d1d6      	bne.n	800ae22 <_svfiprintf_r+0x176>
 800ae74:	89ab      	ldrh	r3, [r5, #12]
 800ae76:	065b      	lsls	r3, r3, #25
 800ae78:	f53f af2c 	bmi.w	800acd4 <_svfiprintf_r+0x28>
 800ae7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae7e:	b01d      	add	sp, #116	; 0x74
 800ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae84:	ab03      	add	r3, sp, #12
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	462a      	mov	r2, r5
 800ae8a:	4b06      	ldr	r3, [pc, #24]	; (800aea4 <_svfiprintf_r+0x1f8>)
 800ae8c:	a904      	add	r1, sp, #16
 800ae8e:	4638      	mov	r0, r7
 800ae90:	f7fe fb06 	bl	80094a0 <_printf_i>
 800ae94:	e7eb      	b.n	800ae6e <_svfiprintf_r+0x1c2>
 800ae96:	bf00      	nop
 800ae98:	0800bd24 	.word	0x0800bd24
 800ae9c:	0800bd2e 	.word	0x0800bd2e
 800aea0:	08008f89 	.word	0x08008f89
 800aea4:	0800abf5 	.word	0x0800abf5
 800aea8:	0800bd2a 	.word	0x0800bd2a

0800aeac <_sbrk_r>:
 800aeac:	b538      	push	{r3, r4, r5, lr}
 800aeae:	4d06      	ldr	r5, [pc, #24]	; (800aec8 <_sbrk_r+0x1c>)
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	4608      	mov	r0, r1
 800aeb6:	602b      	str	r3, [r5, #0]
 800aeb8:	f7f5 ff18 	bl	8000cec <_sbrk>
 800aebc:	1c43      	adds	r3, r0, #1
 800aebe:	d102      	bne.n	800aec6 <_sbrk_r+0x1a>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	b103      	cbz	r3, 800aec6 <_sbrk_r+0x1a>
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	bd38      	pop	{r3, r4, r5, pc}
 800aec8:	20000408 	.word	0x20000408

0800aecc <__assert_func>:
 800aecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aece:	4614      	mov	r4, r2
 800aed0:	461a      	mov	r2, r3
 800aed2:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <__assert_func+0x2c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4605      	mov	r5, r0
 800aed8:	68d8      	ldr	r0, [r3, #12]
 800aeda:	b14c      	cbz	r4, 800aef0 <__assert_func+0x24>
 800aedc:	4b07      	ldr	r3, [pc, #28]	; (800aefc <__assert_func+0x30>)
 800aede:	9100      	str	r1, [sp, #0]
 800aee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aee4:	4906      	ldr	r1, [pc, #24]	; (800af00 <__assert_func+0x34>)
 800aee6:	462b      	mov	r3, r5
 800aee8:	f000 f80e 	bl	800af08 <fiprintf>
 800aeec:	f000 faa4 	bl	800b438 <abort>
 800aef0:	4b04      	ldr	r3, [pc, #16]	; (800af04 <__assert_func+0x38>)
 800aef2:	461c      	mov	r4, r3
 800aef4:	e7f3      	b.n	800aede <__assert_func+0x12>
 800aef6:	bf00      	nop
 800aef8:	2000003c 	.word	0x2000003c
 800aefc:	0800bd35 	.word	0x0800bd35
 800af00:	0800bd42 	.word	0x0800bd42
 800af04:	0800bd70 	.word	0x0800bd70

0800af08 <fiprintf>:
 800af08:	b40e      	push	{r1, r2, r3}
 800af0a:	b503      	push	{r0, r1, lr}
 800af0c:	4601      	mov	r1, r0
 800af0e:	ab03      	add	r3, sp, #12
 800af10:	4805      	ldr	r0, [pc, #20]	; (800af28 <fiprintf+0x20>)
 800af12:	f853 2b04 	ldr.w	r2, [r3], #4
 800af16:	6800      	ldr	r0, [r0, #0]
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	f000 f88f 	bl	800b03c <_vfiprintf_r>
 800af1e:	b002      	add	sp, #8
 800af20:	f85d eb04 	ldr.w	lr, [sp], #4
 800af24:	b003      	add	sp, #12
 800af26:	4770      	bx	lr
 800af28:	2000003c 	.word	0x2000003c

0800af2c <__ascii_mbtowc>:
 800af2c:	b082      	sub	sp, #8
 800af2e:	b901      	cbnz	r1, 800af32 <__ascii_mbtowc+0x6>
 800af30:	a901      	add	r1, sp, #4
 800af32:	b142      	cbz	r2, 800af46 <__ascii_mbtowc+0x1a>
 800af34:	b14b      	cbz	r3, 800af4a <__ascii_mbtowc+0x1e>
 800af36:	7813      	ldrb	r3, [r2, #0]
 800af38:	600b      	str	r3, [r1, #0]
 800af3a:	7812      	ldrb	r2, [r2, #0]
 800af3c:	1e10      	subs	r0, r2, #0
 800af3e:	bf18      	it	ne
 800af40:	2001      	movne	r0, #1
 800af42:	b002      	add	sp, #8
 800af44:	4770      	bx	lr
 800af46:	4610      	mov	r0, r2
 800af48:	e7fb      	b.n	800af42 <__ascii_mbtowc+0x16>
 800af4a:	f06f 0001 	mvn.w	r0, #1
 800af4e:	e7f8      	b.n	800af42 <__ascii_mbtowc+0x16>

0800af50 <memmove>:
 800af50:	4288      	cmp	r0, r1
 800af52:	b510      	push	{r4, lr}
 800af54:	eb01 0402 	add.w	r4, r1, r2
 800af58:	d902      	bls.n	800af60 <memmove+0x10>
 800af5a:	4284      	cmp	r4, r0
 800af5c:	4623      	mov	r3, r4
 800af5e:	d807      	bhi.n	800af70 <memmove+0x20>
 800af60:	1e43      	subs	r3, r0, #1
 800af62:	42a1      	cmp	r1, r4
 800af64:	d008      	beq.n	800af78 <memmove+0x28>
 800af66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af6e:	e7f8      	b.n	800af62 <memmove+0x12>
 800af70:	4402      	add	r2, r0
 800af72:	4601      	mov	r1, r0
 800af74:	428a      	cmp	r2, r1
 800af76:	d100      	bne.n	800af7a <memmove+0x2a>
 800af78:	bd10      	pop	{r4, pc}
 800af7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af82:	e7f7      	b.n	800af74 <memmove+0x24>

0800af84 <__malloc_lock>:
 800af84:	4801      	ldr	r0, [pc, #4]	; (800af8c <__malloc_lock+0x8>)
 800af86:	f000 bc17 	b.w	800b7b8 <__retarget_lock_acquire_recursive>
 800af8a:	bf00      	nop
 800af8c:	20000410 	.word	0x20000410

0800af90 <__malloc_unlock>:
 800af90:	4801      	ldr	r0, [pc, #4]	; (800af98 <__malloc_unlock+0x8>)
 800af92:	f000 bc12 	b.w	800b7ba <__retarget_lock_release_recursive>
 800af96:	bf00      	nop
 800af98:	20000410 	.word	0x20000410

0800af9c <_realloc_r>:
 800af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9e:	4607      	mov	r7, r0
 800afa0:	4614      	mov	r4, r2
 800afa2:	460e      	mov	r6, r1
 800afa4:	b921      	cbnz	r1, 800afb0 <_realloc_r+0x14>
 800afa6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800afaa:	4611      	mov	r1, r2
 800afac:	f7ff bdc8 	b.w	800ab40 <_malloc_r>
 800afb0:	b922      	cbnz	r2, 800afbc <_realloc_r+0x20>
 800afb2:	f7ff fd75 	bl	800aaa0 <_free_r>
 800afb6:	4625      	mov	r5, r4
 800afb8:	4628      	mov	r0, r5
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afbc:	f000 fc62 	bl	800b884 <_malloc_usable_size_r>
 800afc0:	42a0      	cmp	r0, r4
 800afc2:	d20f      	bcs.n	800afe4 <_realloc_r+0x48>
 800afc4:	4621      	mov	r1, r4
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7ff fdba 	bl	800ab40 <_malloc_r>
 800afcc:	4605      	mov	r5, r0
 800afce:	2800      	cmp	r0, #0
 800afd0:	d0f2      	beq.n	800afb8 <_realloc_r+0x1c>
 800afd2:	4631      	mov	r1, r6
 800afd4:	4622      	mov	r2, r4
 800afd6:	f7fd ff31 	bl	8008e3c <memcpy>
 800afda:	4631      	mov	r1, r6
 800afdc:	4638      	mov	r0, r7
 800afde:	f7ff fd5f 	bl	800aaa0 <_free_r>
 800afe2:	e7e9      	b.n	800afb8 <_realloc_r+0x1c>
 800afe4:	4635      	mov	r5, r6
 800afe6:	e7e7      	b.n	800afb8 <_realloc_r+0x1c>

0800afe8 <__sfputc_r>:
 800afe8:	6893      	ldr	r3, [r2, #8]
 800afea:	3b01      	subs	r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	b410      	push	{r4}
 800aff0:	6093      	str	r3, [r2, #8]
 800aff2:	da08      	bge.n	800b006 <__sfputc_r+0x1e>
 800aff4:	6994      	ldr	r4, [r2, #24]
 800aff6:	42a3      	cmp	r3, r4
 800aff8:	db01      	blt.n	800affe <__sfputc_r+0x16>
 800affa:	290a      	cmp	r1, #10
 800affc:	d103      	bne.n	800b006 <__sfputc_r+0x1e>
 800affe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b002:	f000 b94b 	b.w	800b29c <__swbuf_r>
 800b006:	6813      	ldr	r3, [r2, #0]
 800b008:	1c58      	adds	r0, r3, #1
 800b00a:	6010      	str	r0, [r2, #0]
 800b00c:	7019      	strb	r1, [r3, #0]
 800b00e:	4608      	mov	r0, r1
 800b010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b014:	4770      	bx	lr

0800b016 <__sfputs_r>:
 800b016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b018:	4606      	mov	r6, r0
 800b01a:	460f      	mov	r7, r1
 800b01c:	4614      	mov	r4, r2
 800b01e:	18d5      	adds	r5, r2, r3
 800b020:	42ac      	cmp	r4, r5
 800b022:	d101      	bne.n	800b028 <__sfputs_r+0x12>
 800b024:	2000      	movs	r0, #0
 800b026:	e007      	b.n	800b038 <__sfputs_r+0x22>
 800b028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b02c:	463a      	mov	r2, r7
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff ffda 	bl	800afe8 <__sfputc_r>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d1f3      	bne.n	800b020 <__sfputs_r+0xa>
 800b038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b03c <_vfiprintf_r>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	460d      	mov	r5, r1
 800b042:	b09d      	sub	sp, #116	; 0x74
 800b044:	4614      	mov	r4, r2
 800b046:	4698      	mov	r8, r3
 800b048:	4606      	mov	r6, r0
 800b04a:	b118      	cbz	r0, 800b054 <_vfiprintf_r+0x18>
 800b04c:	6983      	ldr	r3, [r0, #24]
 800b04e:	b90b      	cbnz	r3, 800b054 <_vfiprintf_r+0x18>
 800b050:	f000 fb14 	bl	800b67c <__sinit>
 800b054:	4b89      	ldr	r3, [pc, #548]	; (800b27c <_vfiprintf_r+0x240>)
 800b056:	429d      	cmp	r5, r3
 800b058:	d11b      	bne.n	800b092 <_vfiprintf_r+0x56>
 800b05a:	6875      	ldr	r5, [r6, #4]
 800b05c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b05e:	07d9      	lsls	r1, r3, #31
 800b060:	d405      	bmi.n	800b06e <_vfiprintf_r+0x32>
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	059a      	lsls	r2, r3, #22
 800b066:	d402      	bmi.n	800b06e <_vfiprintf_r+0x32>
 800b068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b06a:	f000 fba5 	bl	800b7b8 <__retarget_lock_acquire_recursive>
 800b06e:	89ab      	ldrh	r3, [r5, #12]
 800b070:	071b      	lsls	r3, r3, #28
 800b072:	d501      	bpl.n	800b078 <_vfiprintf_r+0x3c>
 800b074:	692b      	ldr	r3, [r5, #16]
 800b076:	b9eb      	cbnz	r3, 800b0b4 <_vfiprintf_r+0x78>
 800b078:	4629      	mov	r1, r5
 800b07a:	4630      	mov	r0, r6
 800b07c:	f000 f96e 	bl	800b35c <__swsetup_r>
 800b080:	b1c0      	cbz	r0, 800b0b4 <_vfiprintf_r+0x78>
 800b082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b084:	07dc      	lsls	r4, r3, #31
 800b086:	d50e      	bpl.n	800b0a6 <_vfiprintf_r+0x6a>
 800b088:	f04f 30ff 	mov.w	r0, #4294967295
 800b08c:	b01d      	add	sp, #116	; 0x74
 800b08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b092:	4b7b      	ldr	r3, [pc, #492]	; (800b280 <_vfiprintf_r+0x244>)
 800b094:	429d      	cmp	r5, r3
 800b096:	d101      	bne.n	800b09c <_vfiprintf_r+0x60>
 800b098:	68b5      	ldr	r5, [r6, #8]
 800b09a:	e7df      	b.n	800b05c <_vfiprintf_r+0x20>
 800b09c:	4b79      	ldr	r3, [pc, #484]	; (800b284 <_vfiprintf_r+0x248>)
 800b09e:	429d      	cmp	r5, r3
 800b0a0:	bf08      	it	eq
 800b0a2:	68f5      	ldreq	r5, [r6, #12]
 800b0a4:	e7da      	b.n	800b05c <_vfiprintf_r+0x20>
 800b0a6:	89ab      	ldrh	r3, [r5, #12]
 800b0a8:	0598      	lsls	r0, r3, #22
 800b0aa:	d4ed      	bmi.n	800b088 <_vfiprintf_r+0x4c>
 800b0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0ae:	f000 fb84 	bl	800b7ba <__retarget_lock_release_recursive>
 800b0b2:	e7e9      	b.n	800b088 <_vfiprintf_r+0x4c>
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0b8:	2320      	movs	r3, #32
 800b0ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0c2:	2330      	movs	r3, #48	; 0x30
 800b0c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b288 <_vfiprintf_r+0x24c>
 800b0c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0cc:	f04f 0901 	mov.w	r9, #1
 800b0d0:	4623      	mov	r3, r4
 800b0d2:	469a      	mov	sl, r3
 800b0d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0d8:	b10a      	cbz	r2, 800b0de <_vfiprintf_r+0xa2>
 800b0da:	2a25      	cmp	r2, #37	; 0x25
 800b0dc:	d1f9      	bne.n	800b0d2 <_vfiprintf_r+0x96>
 800b0de:	ebba 0b04 	subs.w	fp, sl, r4
 800b0e2:	d00b      	beq.n	800b0fc <_vfiprintf_r+0xc0>
 800b0e4:	465b      	mov	r3, fp
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ff93 	bl	800b016 <__sfputs_r>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	f000 80aa 	beq.w	800b24a <_vfiprintf_r+0x20e>
 800b0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0f8:	445a      	add	r2, fp
 800b0fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b100:	2b00      	cmp	r3, #0
 800b102:	f000 80a2 	beq.w	800b24a <_vfiprintf_r+0x20e>
 800b106:	2300      	movs	r3, #0
 800b108:	f04f 32ff 	mov.w	r2, #4294967295
 800b10c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b110:	f10a 0a01 	add.w	sl, sl, #1
 800b114:	9304      	str	r3, [sp, #16]
 800b116:	9307      	str	r3, [sp, #28]
 800b118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b11c:	931a      	str	r3, [sp, #104]	; 0x68
 800b11e:	4654      	mov	r4, sl
 800b120:	2205      	movs	r2, #5
 800b122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b126:	4858      	ldr	r0, [pc, #352]	; (800b288 <_vfiprintf_r+0x24c>)
 800b128:	f7f5 f892 	bl	8000250 <memchr>
 800b12c:	9a04      	ldr	r2, [sp, #16]
 800b12e:	b9d8      	cbnz	r0, 800b168 <_vfiprintf_r+0x12c>
 800b130:	06d1      	lsls	r1, r2, #27
 800b132:	bf44      	itt	mi
 800b134:	2320      	movmi	r3, #32
 800b136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b13a:	0713      	lsls	r3, r2, #28
 800b13c:	bf44      	itt	mi
 800b13e:	232b      	movmi	r3, #43	; 0x2b
 800b140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b144:	f89a 3000 	ldrb.w	r3, [sl]
 800b148:	2b2a      	cmp	r3, #42	; 0x2a
 800b14a:	d015      	beq.n	800b178 <_vfiprintf_r+0x13c>
 800b14c:	9a07      	ldr	r2, [sp, #28]
 800b14e:	4654      	mov	r4, sl
 800b150:	2000      	movs	r0, #0
 800b152:	f04f 0c0a 	mov.w	ip, #10
 800b156:	4621      	mov	r1, r4
 800b158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b15c:	3b30      	subs	r3, #48	; 0x30
 800b15e:	2b09      	cmp	r3, #9
 800b160:	d94e      	bls.n	800b200 <_vfiprintf_r+0x1c4>
 800b162:	b1b0      	cbz	r0, 800b192 <_vfiprintf_r+0x156>
 800b164:	9207      	str	r2, [sp, #28]
 800b166:	e014      	b.n	800b192 <_vfiprintf_r+0x156>
 800b168:	eba0 0308 	sub.w	r3, r0, r8
 800b16c:	fa09 f303 	lsl.w	r3, r9, r3
 800b170:	4313      	orrs	r3, r2
 800b172:	9304      	str	r3, [sp, #16]
 800b174:	46a2      	mov	sl, r4
 800b176:	e7d2      	b.n	800b11e <_vfiprintf_r+0xe2>
 800b178:	9b03      	ldr	r3, [sp, #12]
 800b17a:	1d19      	adds	r1, r3, #4
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	9103      	str	r1, [sp, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	bfbb      	ittet	lt
 800b184:	425b      	neglt	r3, r3
 800b186:	f042 0202 	orrlt.w	r2, r2, #2
 800b18a:	9307      	strge	r3, [sp, #28]
 800b18c:	9307      	strlt	r3, [sp, #28]
 800b18e:	bfb8      	it	lt
 800b190:	9204      	strlt	r2, [sp, #16]
 800b192:	7823      	ldrb	r3, [r4, #0]
 800b194:	2b2e      	cmp	r3, #46	; 0x2e
 800b196:	d10c      	bne.n	800b1b2 <_vfiprintf_r+0x176>
 800b198:	7863      	ldrb	r3, [r4, #1]
 800b19a:	2b2a      	cmp	r3, #42	; 0x2a
 800b19c:	d135      	bne.n	800b20a <_vfiprintf_r+0x1ce>
 800b19e:	9b03      	ldr	r3, [sp, #12]
 800b1a0:	1d1a      	adds	r2, r3, #4
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	9203      	str	r2, [sp, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	bfb8      	it	lt
 800b1aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1ae:	3402      	adds	r4, #2
 800b1b0:	9305      	str	r3, [sp, #20]
 800b1b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b298 <_vfiprintf_r+0x25c>
 800b1b6:	7821      	ldrb	r1, [r4, #0]
 800b1b8:	2203      	movs	r2, #3
 800b1ba:	4650      	mov	r0, sl
 800b1bc:	f7f5 f848 	bl	8000250 <memchr>
 800b1c0:	b140      	cbz	r0, 800b1d4 <_vfiprintf_r+0x198>
 800b1c2:	2340      	movs	r3, #64	; 0x40
 800b1c4:	eba0 000a 	sub.w	r0, r0, sl
 800b1c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b1cc:	9b04      	ldr	r3, [sp, #16]
 800b1ce:	4303      	orrs	r3, r0
 800b1d0:	3401      	adds	r4, #1
 800b1d2:	9304      	str	r3, [sp, #16]
 800b1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1d8:	482c      	ldr	r0, [pc, #176]	; (800b28c <_vfiprintf_r+0x250>)
 800b1da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1de:	2206      	movs	r2, #6
 800b1e0:	f7f5 f836 	bl	8000250 <memchr>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	d03f      	beq.n	800b268 <_vfiprintf_r+0x22c>
 800b1e8:	4b29      	ldr	r3, [pc, #164]	; (800b290 <_vfiprintf_r+0x254>)
 800b1ea:	bb1b      	cbnz	r3, 800b234 <_vfiprintf_r+0x1f8>
 800b1ec:	9b03      	ldr	r3, [sp, #12]
 800b1ee:	3307      	adds	r3, #7
 800b1f0:	f023 0307 	bic.w	r3, r3, #7
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	9303      	str	r3, [sp, #12]
 800b1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1fa:	443b      	add	r3, r7
 800b1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1fe:	e767      	b.n	800b0d0 <_vfiprintf_r+0x94>
 800b200:	fb0c 3202 	mla	r2, ip, r2, r3
 800b204:	460c      	mov	r4, r1
 800b206:	2001      	movs	r0, #1
 800b208:	e7a5      	b.n	800b156 <_vfiprintf_r+0x11a>
 800b20a:	2300      	movs	r3, #0
 800b20c:	3401      	adds	r4, #1
 800b20e:	9305      	str	r3, [sp, #20]
 800b210:	4619      	mov	r1, r3
 800b212:	f04f 0c0a 	mov.w	ip, #10
 800b216:	4620      	mov	r0, r4
 800b218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b21c:	3a30      	subs	r2, #48	; 0x30
 800b21e:	2a09      	cmp	r2, #9
 800b220:	d903      	bls.n	800b22a <_vfiprintf_r+0x1ee>
 800b222:	2b00      	cmp	r3, #0
 800b224:	d0c5      	beq.n	800b1b2 <_vfiprintf_r+0x176>
 800b226:	9105      	str	r1, [sp, #20]
 800b228:	e7c3      	b.n	800b1b2 <_vfiprintf_r+0x176>
 800b22a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b22e:	4604      	mov	r4, r0
 800b230:	2301      	movs	r3, #1
 800b232:	e7f0      	b.n	800b216 <_vfiprintf_r+0x1da>
 800b234:	ab03      	add	r3, sp, #12
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	462a      	mov	r2, r5
 800b23a:	4b16      	ldr	r3, [pc, #88]	; (800b294 <_vfiprintf_r+0x258>)
 800b23c:	a904      	add	r1, sp, #16
 800b23e:	4630      	mov	r0, r6
 800b240:	f7fd fea2 	bl	8008f88 <_printf_float>
 800b244:	4607      	mov	r7, r0
 800b246:	1c78      	adds	r0, r7, #1
 800b248:	d1d6      	bne.n	800b1f8 <_vfiprintf_r+0x1bc>
 800b24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b24c:	07d9      	lsls	r1, r3, #31
 800b24e:	d405      	bmi.n	800b25c <_vfiprintf_r+0x220>
 800b250:	89ab      	ldrh	r3, [r5, #12]
 800b252:	059a      	lsls	r2, r3, #22
 800b254:	d402      	bmi.n	800b25c <_vfiprintf_r+0x220>
 800b256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b258:	f000 faaf 	bl	800b7ba <__retarget_lock_release_recursive>
 800b25c:	89ab      	ldrh	r3, [r5, #12]
 800b25e:	065b      	lsls	r3, r3, #25
 800b260:	f53f af12 	bmi.w	800b088 <_vfiprintf_r+0x4c>
 800b264:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b266:	e711      	b.n	800b08c <_vfiprintf_r+0x50>
 800b268:	ab03      	add	r3, sp, #12
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	462a      	mov	r2, r5
 800b26e:	4b09      	ldr	r3, [pc, #36]	; (800b294 <_vfiprintf_r+0x258>)
 800b270:	a904      	add	r1, sp, #16
 800b272:	4630      	mov	r0, r6
 800b274:	f7fe f914 	bl	80094a0 <_printf_i>
 800b278:	e7e4      	b.n	800b244 <_vfiprintf_r+0x208>
 800b27a:	bf00      	nop
 800b27c:	0800be9c 	.word	0x0800be9c
 800b280:	0800bebc 	.word	0x0800bebc
 800b284:	0800be7c 	.word	0x0800be7c
 800b288:	0800bd24 	.word	0x0800bd24
 800b28c:	0800bd2e 	.word	0x0800bd2e
 800b290:	08008f89 	.word	0x08008f89
 800b294:	0800b017 	.word	0x0800b017
 800b298:	0800bd2a 	.word	0x0800bd2a

0800b29c <__swbuf_r>:
 800b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29e:	460e      	mov	r6, r1
 800b2a0:	4614      	mov	r4, r2
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	b118      	cbz	r0, 800b2ae <__swbuf_r+0x12>
 800b2a6:	6983      	ldr	r3, [r0, #24]
 800b2a8:	b90b      	cbnz	r3, 800b2ae <__swbuf_r+0x12>
 800b2aa:	f000 f9e7 	bl	800b67c <__sinit>
 800b2ae:	4b21      	ldr	r3, [pc, #132]	; (800b334 <__swbuf_r+0x98>)
 800b2b0:	429c      	cmp	r4, r3
 800b2b2:	d12b      	bne.n	800b30c <__swbuf_r+0x70>
 800b2b4:	686c      	ldr	r4, [r5, #4]
 800b2b6:	69a3      	ldr	r3, [r4, #24]
 800b2b8:	60a3      	str	r3, [r4, #8]
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	071a      	lsls	r2, r3, #28
 800b2be:	d52f      	bpl.n	800b320 <__swbuf_r+0x84>
 800b2c0:	6923      	ldr	r3, [r4, #16]
 800b2c2:	b36b      	cbz	r3, 800b320 <__swbuf_r+0x84>
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	6820      	ldr	r0, [r4, #0]
 800b2c8:	1ac0      	subs	r0, r0, r3
 800b2ca:	6963      	ldr	r3, [r4, #20]
 800b2cc:	b2f6      	uxtb	r6, r6
 800b2ce:	4283      	cmp	r3, r0
 800b2d0:	4637      	mov	r7, r6
 800b2d2:	dc04      	bgt.n	800b2de <__swbuf_r+0x42>
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	f000 f93c 	bl	800b554 <_fflush_r>
 800b2dc:	bb30      	cbnz	r0, 800b32c <__swbuf_r+0x90>
 800b2de:	68a3      	ldr	r3, [r4, #8]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	60a3      	str	r3, [r4, #8]
 800b2e4:	6823      	ldr	r3, [r4, #0]
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	6022      	str	r2, [r4, #0]
 800b2ea:	701e      	strb	r6, [r3, #0]
 800b2ec:	6963      	ldr	r3, [r4, #20]
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	4283      	cmp	r3, r0
 800b2f2:	d004      	beq.n	800b2fe <__swbuf_r+0x62>
 800b2f4:	89a3      	ldrh	r3, [r4, #12]
 800b2f6:	07db      	lsls	r3, r3, #31
 800b2f8:	d506      	bpl.n	800b308 <__swbuf_r+0x6c>
 800b2fa:	2e0a      	cmp	r6, #10
 800b2fc:	d104      	bne.n	800b308 <__swbuf_r+0x6c>
 800b2fe:	4621      	mov	r1, r4
 800b300:	4628      	mov	r0, r5
 800b302:	f000 f927 	bl	800b554 <_fflush_r>
 800b306:	b988      	cbnz	r0, 800b32c <__swbuf_r+0x90>
 800b308:	4638      	mov	r0, r7
 800b30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b30c:	4b0a      	ldr	r3, [pc, #40]	; (800b338 <__swbuf_r+0x9c>)
 800b30e:	429c      	cmp	r4, r3
 800b310:	d101      	bne.n	800b316 <__swbuf_r+0x7a>
 800b312:	68ac      	ldr	r4, [r5, #8]
 800b314:	e7cf      	b.n	800b2b6 <__swbuf_r+0x1a>
 800b316:	4b09      	ldr	r3, [pc, #36]	; (800b33c <__swbuf_r+0xa0>)
 800b318:	429c      	cmp	r4, r3
 800b31a:	bf08      	it	eq
 800b31c:	68ec      	ldreq	r4, [r5, #12]
 800b31e:	e7ca      	b.n	800b2b6 <__swbuf_r+0x1a>
 800b320:	4621      	mov	r1, r4
 800b322:	4628      	mov	r0, r5
 800b324:	f000 f81a 	bl	800b35c <__swsetup_r>
 800b328:	2800      	cmp	r0, #0
 800b32a:	d0cb      	beq.n	800b2c4 <__swbuf_r+0x28>
 800b32c:	f04f 37ff 	mov.w	r7, #4294967295
 800b330:	e7ea      	b.n	800b308 <__swbuf_r+0x6c>
 800b332:	bf00      	nop
 800b334:	0800be9c 	.word	0x0800be9c
 800b338:	0800bebc 	.word	0x0800bebc
 800b33c:	0800be7c 	.word	0x0800be7c

0800b340 <__ascii_wctomb>:
 800b340:	b149      	cbz	r1, 800b356 <__ascii_wctomb+0x16>
 800b342:	2aff      	cmp	r2, #255	; 0xff
 800b344:	bf85      	ittet	hi
 800b346:	238a      	movhi	r3, #138	; 0x8a
 800b348:	6003      	strhi	r3, [r0, #0]
 800b34a:	700a      	strbls	r2, [r1, #0]
 800b34c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b350:	bf98      	it	ls
 800b352:	2001      	movls	r0, #1
 800b354:	4770      	bx	lr
 800b356:	4608      	mov	r0, r1
 800b358:	4770      	bx	lr
	...

0800b35c <__swsetup_r>:
 800b35c:	4b32      	ldr	r3, [pc, #200]	; (800b428 <__swsetup_r+0xcc>)
 800b35e:	b570      	push	{r4, r5, r6, lr}
 800b360:	681d      	ldr	r5, [r3, #0]
 800b362:	4606      	mov	r6, r0
 800b364:	460c      	mov	r4, r1
 800b366:	b125      	cbz	r5, 800b372 <__swsetup_r+0x16>
 800b368:	69ab      	ldr	r3, [r5, #24]
 800b36a:	b913      	cbnz	r3, 800b372 <__swsetup_r+0x16>
 800b36c:	4628      	mov	r0, r5
 800b36e:	f000 f985 	bl	800b67c <__sinit>
 800b372:	4b2e      	ldr	r3, [pc, #184]	; (800b42c <__swsetup_r+0xd0>)
 800b374:	429c      	cmp	r4, r3
 800b376:	d10f      	bne.n	800b398 <__swsetup_r+0x3c>
 800b378:	686c      	ldr	r4, [r5, #4]
 800b37a:	89a3      	ldrh	r3, [r4, #12]
 800b37c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b380:	0719      	lsls	r1, r3, #28
 800b382:	d42c      	bmi.n	800b3de <__swsetup_r+0x82>
 800b384:	06dd      	lsls	r5, r3, #27
 800b386:	d411      	bmi.n	800b3ac <__swsetup_r+0x50>
 800b388:	2309      	movs	r3, #9
 800b38a:	6033      	str	r3, [r6, #0]
 800b38c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b390:	81a3      	strh	r3, [r4, #12]
 800b392:	f04f 30ff 	mov.w	r0, #4294967295
 800b396:	e03e      	b.n	800b416 <__swsetup_r+0xba>
 800b398:	4b25      	ldr	r3, [pc, #148]	; (800b430 <__swsetup_r+0xd4>)
 800b39a:	429c      	cmp	r4, r3
 800b39c:	d101      	bne.n	800b3a2 <__swsetup_r+0x46>
 800b39e:	68ac      	ldr	r4, [r5, #8]
 800b3a0:	e7eb      	b.n	800b37a <__swsetup_r+0x1e>
 800b3a2:	4b24      	ldr	r3, [pc, #144]	; (800b434 <__swsetup_r+0xd8>)
 800b3a4:	429c      	cmp	r4, r3
 800b3a6:	bf08      	it	eq
 800b3a8:	68ec      	ldreq	r4, [r5, #12]
 800b3aa:	e7e6      	b.n	800b37a <__swsetup_r+0x1e>
 800b3ac:	0758      	lsls	r0, r3, #29
 800b3ae:	d512      	bpl.n	800b3d6 <__swsetup_r+0x7a>
 800b3b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3b2:	b141      	cbz	r1, 800b3c6 <__swsetup_r+0x6a>
 800b3b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3b8:	4299      	cmp	r1, r3
 800b3ba:	d002      	beq.n	800b3c2 <__swsetup_r+0x66>
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f7ff fb6f 	bl	800aaa0 <_free_r>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	6363      	str	r3, [r4, #52]	; 0x34
 800b3c6:	89a3      	ldrh	r3, [r4, #12]
 800b3c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3cc:	81a3      	strh	r3, [r4, #12]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	6063      	str	r3, [r4, #4]
 800b3d2:	6923      	ldr	r3, [r4, #16]
 800b3d4:	6023      	str	r3, [r4, #0]
 800b3d6:	89a3      	ldrh	r3, [r4, #12]
 800b3d8:	f043 0308 	orr.w	r3, r3, #8
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	6923      	ldr	r3, [r4, #16]
 800b3e0:	b94b      	cbnz	r3, 800b3f6 <__swsetup_r+0x9a>
 800b3e2:	89a3      	ldrh	r3, [r4, #12]
 800b3e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3ec:	d003      	beq.n	800b3f6 <__swsetup_r+0x9a>
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f000 fa07 	bl	800b804 <__smakebuf_r>
 800b3f6:	89a0      	ldrh	r0, [r4, #12]
 800b3f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3fc:	f010 0301 	ands.w	r3, r0, #1
 800b400:	d00a      	beq.n	800b418 <__swsetup_r+0xbc>
 800b402:	2300      	movs	r3, #0
 800b404:	60a3      	str	r3, [r4, #8]
 800b406:	6963      	ldr	r3, [r4, #20]
 800b408:	425b      	negs	r3, r3
 800b40a:	61a3      	str	r3, [r4, #24]
 800b40c:	6923      	ldr	r3, [r4, #16]
 800b40e:	b943      	cbnz	r3, 800b422 <__swsetup_r+0xc6>
 800b410:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b414:	d1ba      	bne.n	800b38c <__swsetup_r+0x30>
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	0781      	lsls	r1, r0, #30
 800b41a:	bf58      	it	pl
 800b41c:	6963      	ldrpl	r3, [r4, #20]
 800b41e:	60a3      	str	r3, [r4, #8]
 800b420:	e7f4      	b.n	800b40c <__swsetup_r+0xb0>
 800b422:	2000      	movs	r0, #0
 800b424:	e7f7      	b.n	800b416 <__swsetup_r+0xba>
 800b426:	bf00      	nop
 800b428:	2000003c 	.word	0x2000003c
 800b42c:	0800be9c 	.word	0x0800be9c
 800b430:	0800bebc 	.word	0x0800bebc
 800b434:	0800be7c 	.word	0x0800be7c

0800b438 <abort>:
 800b438:	b508      	push	{r3, lr}
 800b43a:	2006      	movs	r0, #6
 800b43c:	f000 fa52 	bl	800b8e4 <raise>
 800b440:	2001      	movs	r0, #1
 800b442:	f7f5 fbdb 	bl	8000bfc <_exit>
	...

0800b448 <__sflush_r>:
 800b448:	898a      	ldrh	r2, [r1, #12]
 800b44a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b44e:	4605      	mov	r5, r0
 800b450:	0710      	lsls	r0, r2, #28
 800b452:	460c      	mov	r4, r1
 800b454:	d458      	bmi.n	800b508 <__sflush_r+0xc0>
 800b456:	684b      	ldr	r3, [r1, #4]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	dc05      	bgt.n	800b468 <__sflush_r+0x20>
 800b45c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b45e:	2b00      	cmp	r3, #0
 800b460:	dc02      	bgt.n	800b468 <__sflush_r+0x20>
 800b462:	2000      	movs	r0, #0
 800b464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	d0f9      	beq.n	800b462 <__sflush_r+0x1a>
 800b46e:	2300      	movs	r3, #0
 800b470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b474:	682f      	ldr	r7, [r5, #0]
 800b476:	602b      	str	r3, [r5, #0]
 800b478:	d032      	beq.n	800b4e0 <__sflush_r+0x98>
 800b47a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b47c:	89a3      	ldrh	r3, [r4, #12]
 800b47e:	075a      	lsls	r2, r3, #29
 800b480:	d505      	bpl.n	800b48e <__sflush_r+0x46>
 800b482:	6863      	ldr	r3, [r4, #4]
 800b484:	1ac0      	subs	r0, r0, r3
 800b486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b488:	b10b      	cbz	r3, 800b48e <__sflush_r+0x46>
 800b48a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b48c:	1ac0      	subs	r0, r0, r3
 800b48e:	2300      	movs	r3, #0
 800b490:	4602      	mov	r2, r0
 800b492:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b494:	6a21      	ldr	r1, [r4, #32]
 800b496:	4628      	mov	r0, r5
 800b498:	47b0      	blx	r6
 800b49a:	1c43      	adds	r3, r0, #1
 800b49c:	89a3      	ldrh	r3, [r4, #12]
 800b49e:	d106      	bne.n	800b4ae <__sflush_r+0x66>
 800b4a0:	6829      	ldr	r1, [r5, #0]
 800b4a2:	291d      	cmp	r1, #29
 800b4a4:	d82c      	bhi.n	800b500 <__sflush_r+0xb8>
 800b4a6:	4a2a      	ldr	r2, [pc, #168]	; (800b550 <__sflush_r+0x108>)
 800b4a8:	40ca      	lsrs	r2, r1
 800b4aa:	07d6      	lsls	r6, r2, #31
 800b4ac:	d528      	bpl.n	800b500 <__sflush_r+0xb8>
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	6062      	str	r2, [r4, #4]
 800b4b2:	04d9      	lsls	r1, r3, #19
 800b4b4:	6922      	ldr	r2, [r4, #16]
 800b4b6:	6022      	str	r2, [r4, #0]
 800b4b8:	d504      	bpl.n	800b4c4 <__sflush_r+0x7c>
 800b4ba:	1c42      	adds	r2, r0, #1
 800b4bc:	d101      	bne.n	800b4c2 <__sflush_r+0x7a>
 800b4be:	682b      	ldr	r3, [r5, #0]
 800b4c0:	b903      	cbnz	r3, 800b4c4 <__sflush_r+0x7c>
 800b4c2:	6560      	str	r0, [r4, #84]	; 0x54
 800b4c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4c6:	602f      	str	r7, [r5, #0]
 800b4c8:	2900      	cmp	r1, #0
 800b4ca:	d0ca      	beq.n	800b462 <__sflush_r+0x1a>
 800b4cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4d0:	4299      	cmp	r1, r3
 800b4d2:	d002      	beq.n	800b4da <__sflush_r+0x92>
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f7ff fae3 	bl	800aaa0 <_free_r>
 800b4da:	2000      	movs	r0, #0
 800b4dc:	6360      	str	r0, [r4, #52]	; 0x34
 800b4de:	e7c1      	b.n	800b464 <__sflush_r+0x1c>
 800b4e0:	6a21      	ldr	r1, [r4, #32]
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	47b0      	blx	r6
 800b4e8:	1c41      	adds	r1, r0, #1
 800b4ea:	d1c7      	bne.n	800b47c <__sflush_r+0x34>
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d0c4      	beq.n	800b47c <__sflush_r+0x34>
 800b4f2:	2b1d      	cmp	r3, #29
 800b4f4:	d001      	beq.n	800b4fa <__sflush_r+0xb2>
 800b4f6:	2b16      	cmp	r3, #22
 800b4f8:	d101      	bne.n	800b4fe <__sflush_r+0xb6>
 800b4fa:	602f      	str	r7, [r5, #0]
 800b4fc:	e7b1      	b.n	800b462 <__sflush_r+0x1a>
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b504:	81a3      	strh	r3, [r4, #12]
 800b506:	e7ad      	b.n	800b464 <__sflush_r+0x1c>
 800b508:	690f      	ldr	r7, [r1, #16]
 800b50a:	2f00      	cmp	r7, #0
 800b50c:	d0a9      	beq.n	800b462 <__sflush_r+0x1a>
 800b50e:	0793      	lsls	r3, r2, #30
 800b510:	680e      	ldr	r6, [r1, #0]
 800b512:	bf08      	it	eq
 800b514:	694b      	ldreq	r3, [r1, #20]
 800b516:	600f      	str	r7, [r1, #0]
 800b518:	bf18      	it	ne
 800b51a:	2300      	movne	r3, #0
 800b51c:	eba6 0807 	sub.w	r8, r6, r7
 800b520:	608b      	str	r3, [r1, #8]
 800b522:	f1b8 0f00 	cmp.w	r8, #0
 800b526:	dd9c      	ble.n	800b462 <__sflush_r+0x1a>
 800b528:	6a21      	ldr	r1, [r4, #32]
 800b52a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b52c:	4643      	mov	r3, r8
 800b52e:	463a      	mov	r2, r7
 800b530:	4628      	mov	r0, r5
 800b532:	47b0      	blx	r6
 800b534:	2800      	cmp	r0, #0
 800b536:	dc06      	bgt.n	800b546 <__sflush_r+0xfe>
 800b538:	89a3      	ldrh	r3, [r4, #12]
 800b53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b53e:	81a3      	strh	r3, [r4, #12]
 800b540:	f04f 30ff 	mov.w	r0, #4294967295
 800b544:	e78e      	b.n	800b464 <__sflush_r+0x1c>
 800b546:	4407      	add	r7, r0
 800b548:	eba8 0800 	sub.w	r8, r8, r0
 800b54c:	e7e9      	b.n	800b522 <__sflush_r+0xda>
 800b54e:	bf00      	nop
 800b550:	20400001 	.word	0x20400001

0800b554 <_fflush_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	690b      	ldr	r3, [r1, #16]
 800b558:	4605      	mov	r5, r0
 800b55a:	460c      	mov	r4, r1
 800b55c:	b913      	cbnz	r3, 800b564 <_fflush_r+0x10>
 800b55e:	2500      	movs	r5, #0
 800b560:	4628      	mov	r0, r5
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	b118      	cbz	r0, 800b56e <_fflush_r+0x1a>
 800b566:	6983      	ldr	r3, [r0, #24]
 800b568:	b90b      	cbnz	r3, 800b56e <_fflush_r+0x1a>
 800b56a:	f000 f887 	bl	800b67c <__sinit>
 800b56e:	4b14      	ldr	r3, [pc, #80]	; (800b5c0 <_fflush_r+0x6c>)
 800b570:	429c      	cmp	r4, r3
 800b572:	d11b      	bne.n	800b5ac <_fflush_r+0x58>
 800b574:	686c      	ldr	r4, [r5, #4]
 800b576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0ef      	beq.n	800b55e <_fflush_r+0xa>
 800b57e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b580:	07d0      	lsls	r0, r2, #31
 800b582:	d404      	bmi.n	800b58e <_fflush_r+0x3a>
 800b584:	0599      	lsls	r1, r3, #22
 800b586:	d402      	bmi.n	800b58e <_fflush_r+0x3a>
 800b588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b58a:	f000 f915 	bl	800b7b8 <__retarget_lock_acquire_recursive>
 800b58e:	4628      	mov	r0, r5
 800b590:	4621      	mov	r1, r4
 800b592:	f7ff ff59 	bl	800b448 <__sflush_r>
 800b596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b598:	07da      	lsls	r2, r3, #31
 800b59a:	4605      	mov	r5, r0
 800b59c:	d4e0      	bmi.n	800b560 <_fflush_r+0xc>
 800b59e:	89a3      	ldrh	r3, [r4, #12]
 800b5a0:	059b      	lsls	r3, r3, #22
 800b5a2:	d4dd      	bmi.n	800b560 <_fflush_r+0xc>
 800b5a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5a6:	f000 f908 	bl	800b7ba <__retarget_lock_release_recursive>
 800b5aa:	e7d9      	b.n	800b560 <_fflush_r+0xc>
 800b5ac:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <_fflush_r+0x70>)
 800b5ae:	429c      	cmp	r4, r3
 800b5b0:	d101      	bne.n	800b5b6 <_fflush_r+0x62>
 800b5b2:	68ac      	ldr	r4, [r5, #8]
 800b5b4:	e7df      	b.n	800b576 <_fflush_r+0x22>
 800b5b6:	4b04      	ldr	r3, [pc, #16]	; (800b5c8 <_fflush_r+0x74>)
 800b5b8:	429c      	cmp	r4, r3
 800b5ba:	bf08      	it	eq
 800b5bc:	68ec      	ldreq	r4, [r5, #12]
 800b5be:	e7da      	b.n	800b576 <_fflush_r+0x22>
 800b5c0:	0800be9c 	.word	0x0800be9c
 800b5c4:	0800bebc 	.word	0x0800bebc
 800b5c8:	0800be7c 	.word	0x0800be7c

0800b5cc <std>:
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	b510      	push	{r4, lr}
 800b5d0:	4604      	mov	r4, r0
 800b5d2:	e9c0 3300 	strd	r3, r3, [r0]
 800b5d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5da:	6083      	str	r3, [r0, #8]
 800b5dc:	8181      	strh	r1, [r0, #12]
 800b5de:	6643      	str	r3, [r0, #100]	; 0x64
 800b5e0:	81c2      	strh	r2, [r0, #14]
 800b5e2:	6183      	str	r3, [r0, #24]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	2208      	movs	r2, #8
 800b5e8:	305c      	adds	r0, #92	; 0x5c
 800b5ea:	f7fd fc35 	bl	8008e58 <memset>
 800b5ee:	4b05      	ldr	r3, [pc, #20]	; (800b604 <std+0x38>)
 800b5f0:	6263      	str	r3, [r4, #36]	; 0x24
 800b5f2:	4b05      	ldr	r3, [pc, #20]	; (800b608 <std+0x3c>)
 800b5f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5f6:	4b05      	ldr	r3, [pc, #20]	; (800b60c <std+0x40>)
 800b5f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5fa:	4b05      	ldr	r3, [pc, #20]	; (800b610 <std+0x44>)
 800b5fc:	6224      	str	r4, [r4, #32]
 800b5fe:	6323      	str	r3, [r4, #48]	; 0x30
 800b600:	bd10      	pop	{r4, pc}
 800b602:	bf00      	nop
 800b604:	0800b91d 	.word	0x0800b91d
 800b608:	0800b93f 	.word	0x0800b93f
 800b60c:	0800b977 	.word	0x0800b977
 800b610:	0800b99b 	.word	0x0800b99b

0800b614 <_cleanup_r>:
 800b614:	4901      	ldr	r1, [pc, #4]	; (800b61c <_cleanup_r+0x8>)
 800b616:	f000 b8af 	b.w	800b778 <_fwalk_reent>
 800b61a:	bf00      	nop
 800b61c:	0800b555 	.word	0x0800b555

0800b620 <__sfmoreglue>:
 800b620:	b570      	push	{r4, r5, r6, lr}
 800b622:	1e4a      	subs	r2, r1, #1
 800b624:	2568      	movs	r5, #104	; 0x68
 800b626:	4355      	muls	r5, r2
 800b628:	460e      	mov	r6, r1
 800b62a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b62e:	f7ff fa87 	bl	800ab40 <_malloc_r>
 800b632:	4604      	mov	r4, r0
 800b634:	b140      	cbz	r0, 800b648 <__sfmoreglue+0x28>
 800b636:	2100      	movs	r1, #0
 800b638:	e9c0 1600 	strd	r1, r6, [r0]
 800b63c:	300c      	adds	r0, #12
 800b63e:	60a0      	str	r0, [r4, #8]
 800b640:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b644:	f7fd fc08 	bl	8008e58 <memset>
 800b648:	4620      	mov	r0, r4
 800b64a:	bd70      	pop	{r4, r5, r6, pc}

0800b64c <__sfp_lock_acquire>:
 800b64c:	4801      	ldr	r0, [pc, #4]	; (800b654 <__sfp_lock_acquire+0x8>)
 800b64e:	f000 b8b3 	b.w	800b7b8 <__retarget_lock_acquire_recursive>
 800b652:	bf00      	nop
 800b654:	20000414 	.word	0x20000414

0800b658 <__sfp_lock_release>:
 800b658:	4801      	ldr	r0, [pc, #4]	; (800b660 <__sfp_lock_release+0x8>)
 800b65a:	f000 b8ae 	b.w	800b7ba <__retarget_lock_release_recursive>
 800b65e:	bf00      	nop
 800b660:	20000414 	.word	0x20000414

0800b664 <__sinit_lock_acquire>:
 800b664:	4801      	ldr	r0, [pc, #4]	; (800b66c <__sinit_lock_acquire+0x8>)
 800b666:	f000 b8a7 	b.w	800b7b8 <__retarget_lock_acquire_recursive>
 800b66a:	bf00      	nop
 800b66c:	2000040f 	.word	0x2000040f

0800b670 <__sinit_lock_release>:
 800b670:	4801      	ldr	r0, [pc, #4]	; (800b678 <__sinit_lock_release+0x8>)
 800b672:	f000 b8a2 	b.w	800b7ba <__retarget_lock_release_recursive>
 800b676:	bf00      	nop
 800b678:	2000040f 	.word	0x2000040f

0800b67c <__sinit>:
 800b67c:	b510      	push	{r4, lr}
 800b67e:	4604      	mov	r4, r0
 800b680:	f7ff fff0 	bl	800b664 <__sinit_lock_acquire>
 800b684:	69a3      	ldr	r3, [r4, #24]
 800b686:	b11b      	cbz	r3, 800b690 <__sinit+0x14>
 800b688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b68c:	f7ff bff0 	b.w	800b670 <__sinit_lock_release>
 800b690:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b694:	6523      	str	r3, [r4, #80]	; 0x50
 800b696:	4b13      	ldr	r3, [pc, #76]	; (800b6e4 <__sinit+0x68>)
 800b698:	4a13      	ldr	r2, [pc, #76]	; (800b6e8 <__sinit+0x6c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b69e:	42a3      	cmp	r3, r4
 800b6a0:	bf04      	itt	eq
 800b6a2:	2301      	moveq	r3, #1
 800b6a4:	61a3      	streq	r3, [r4, #24]
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 f820 	bl	800b6ec <__sfp>
 800b6ac:	6060      	str	r0, [r4, #4]
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f000 f81c 	bl	800b6ec <__sfp>
 800b6b4:	60a0      	str	r0, [r4, #8]
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f000 f818 	bl	800b6ec <__sfp>
 800b6bc:	2200      	movs	r2, #0
 800b6be:	60e0      	str	r0, [r4, #12]
 800b6c0:	2104      	movs	r1, #4
 800b6c2:	6860      	ldr	r0, [r4, #4]
 800b6c4:	f7ff ff82 	bl	800b5cc <std>
 800b6c8:	68a0      	ldr	r0, [r4, #8]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	2109      	movs	r1, #9
 800b6ce:	f7ff ff7d 	bl	800b5cc <std>
 800b6d2:	68e0      	ldr	r0, [r4, #12]
 800b6d4:	2202      	movs	r2, #2
 800b6d6:	2112      	movs	r1, #18
 800b6d8:	f7ff ff78 	bl	800b5cc <std>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	61a3      	str	r3, [r4, #24]
 800b6e0:	e7d2      	b.n	800b688 <__sinit+0xc>
 800b6e2:	bf00      	nop
 800b6e4:	0800bafc 	.word	0x0800bafc
 800b6e8:	0800b615 	.word	0x0800b615

0800b6ec <__sfp>:
 800b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ee:	4607      	mov	r7, r0
 800b6f0:	f7ff ffac 	bl	800b64c <__sfp_lock_acquire>
 800b6f4:	4b1e      	ldr	r3, [pc, #120]	; (800b770 <__sfp+0x84>)
 800b6f6:	681e      	ldr	r6, [r3, #0]
 800b6f8:	69b3      	ldr	r3, [r6, #24]
 800b6fa:	b913      	cbnz	r3, 800b702 <__sfp+0x16>
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7ff ffbd 	bl	800b67c <__sinit>
 800b702:	3648      	adds	r6, #72	; 0x48
 800b704:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b708:	3b01      	subs	r3, #1
 800b70a:	d503      	bpl.n	800b714 <__sfp+0x28>
 800b70c:	6833      	ldr	r3, [r6, #0]
 800b70e:	b30b      	cbz	r3, 800b754 <__sfp+0x68>
 800b710:	6836      	ldr	r6, [r6, #0]
 800b712:	e7f7      	b.n	800b704 <__sfp+0x18>
 800b714:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b718:	b9d5      	cbnz	r5, 800b750 <__sfp+0x64>
 800b71a:	4b16      	ldr	r3, [pc, #88]	; (800b774 <__sfp+0x88>)
 800b71c:	60e3      	str	r3, [r4, #12]
 800b71e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b722:	6665      	str	r5, [r4, #100]	; 0x64
 800b724:	f000 f847 	bl	800b7b6 <__retarget_lock_init_recursive>
 800b728:	f7ff ff96 	bl	800b658 <__sfp_lock_release>
 800b72c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b730:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b734:	6025      	str	r5, [r4, #0]
 800b736:	61a5      	str	r5, [r4, #24]
 800b738:	2208      	movs	r2, #8
 800b73a:	4629      	mov	r1, r5
 800b73c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b740:	f7fd fb8a 	bl	8008e58 <memset>
 800b744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b74c:	4620      	mov	r0, r4
 800b74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b750:	3468      	adds	r4, #104	; 0x68
 800b752:	e7d9      	b.n	800b708 <__sfp+0x1c>
 800b754:	2104      	movs	r1, #4
 800b756:	4638      	mov	r0, r7
 800b758:	f7ff ff62 	bl	800b620 <__sfmoreglue>
 800b75c:	4604      	mov	r4, r0
 800b75e:	6030      	str	r0, [r6, #0]
 800b760:	2800      	cmp	r0, #0
 800b762:	d1d5      	bne.n	800b710 <__sfp+0x24>
 800b764:	f7ff ff78 	bl	800b658 <__sfp_lock_release>
 800b768:	230c      	movs	r3, #12
 800b76a:	603b      	str	r3, [r7, #0]
 800b76c:	e7ee      	b.n	800b74c <__sfp+0x60>
 800b76e:	bf00      	nop
 800b770:	0800bafc 	.word	0x0800bafc
 800b774:	ffff0001 	.word	0xffff0001

0800b778 <_fwalk_reent>:
 800b778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b77c:	4606      	mov	r6, r0
 800b77e:	4688      	mov	r8, r1
 800b780:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b784:	2700      	movs	r7, #0
 800b786:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b78a:	f1b9 0901 	subs.w	r9, r9, #1
 800b78e:	d505      	bpl.n	800b79c <_fwalk_reent+0x24>
 800b790:	6824      	ldr	r4, [r4, #0]
 800b792:	2c00      	cmp	r4, #0
 800b794:	d1f7      	bne.n	800b786 <_fwalk_reent+0xe>
 800b796:	4638      	mov	r0, r7
 800b798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b79c:	89ab      	ldrh	r3, [r5, #12]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d907      	bls.n	800b7b2 <_fwalk_reent+0x3a>
 800b7a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	d003      	beq.n	800b7b2 <_fwalk_reent+0x3a>
 800b7aa:	4629      	mov	r1, r5
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	47c0      	blx	r8
 800b7b0:	4307      	orrs	r7, r0
 800b7b2:	3568      	adds	r5, #104	; 0x68
 800b7b4:	e7e9      	b.n	800b78a <_fwalk_reent+0x12>

0800b7b6 <__retarget_lock_init_recursive>:
 800b7b6:	4770      	bx	lr

0800b7b8 <__retarget_lock_acquire_recursive>:
 800b7b8:	4770      	bx	lr

0800b7ba <__retarget_lock_release_recursive>:
 800b7ba:	4770      	bx	lr

0800b7bc <__swhatbuf_r>:
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	460e      	mov	r6, r1
 800b7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c4:	2900      	cmp	r1, #0
 800b7c6:	b096      	sub	sp, #88	; 0x58
 800b7c8:	4614      	mov	r4, r2
 800b7ca:	461d      	mov	r5, r3
 800b7cc:	da07      	bge.n	800b7de <__swhatbuf_r+0x22>
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	602b      	str	r3, [r5, #0]
 800b7d2:	89b3      	ldrh	r3, [r6, #12]
 800b7d4:	061a      	lsls	r2, r3, #24
 800b7d6:	d410      	bmi.n	800b7fa <__swhatbuf_r+0x3e>
 800b7d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7dc:	e00e      	b.n	800b7fc <__swhatbuf_r+0x40>
 800b7de:	466a      	mov	r2, sp
 800b7e0:	f000 f902 	bl	800b9e8 <_fstat_r>
 800b7e4:	2800      	cmp	r0, #0
 800b7e6:	dbf2      	blt.n	800b7ce <__swhatbuf_r+0x12>
 800b7e8:	9a01      	ldr	r2, [sp, #4]
 800b7ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7f2:	425a      	negs	r2, r3
 800b7f4:	415a      	adcs	r2, r3
 800b7f6:	602a      	str	r2, [r5, #0]
 800b7f8:	e7ee      	b.n	800b7d8 <__swhatbuf_r+0x1c>
 800b7fa:	2340      	movs	r3, #64	; 0x40
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	6023      	str	r3, [r4, #0]
 800b800:	b016      	add	sp, #88	; 0x58
 800b802:	bd70      	pop	{r4, r5, r6, pc}

0800b804 <__smakebuf_r>:
 800b804:	898b      	ldrh	r3, [r1, #12]
 800b806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b808:	079d      	lsls	r5, r3, #30
 800b80a:	4606      	mov	r6, r0
 800b80c:	460c      	mov	r4, r1
 800b80e:	d507      	bpl.n	800b820 <__smakebuf_r+0x1c>
 800b810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	6123      	str	r3, [r4, #16]
 800b818:	2301      	movs	r3, #1
 800b81a:	6163      	str	r3, [r4, #20]
 800b81c:	b002      	add	sp, #8
 800b81e:	bd70      	pop	{r4, r5, r6, pc}
 800b820:	ab01      	add	r3, sp, #4
 800b822:	466a      	mov	r2, sp
 800b824:	f7ff ffca 	bl	800b7bc <__swhatbuf_r>
 800b828:	9900      	ldr	r1, [sp, #0]
 800b82a:	4605      	mov	r5, r0
 800b82c:	4630      	mov	r0, r6
 800b82e:	f7ff f987 	bl	800ab40 <_malloc_r>
 800b832:	b948      	cbnz	r0, 800b848 <__smakebuf_r+0x44>
 800b834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b838:	059a      	lsls	r2, r3, #22
 800b83a:	d4ef      	bmi.n	800b81c <__smakebuf_r+0x18>
 800b83c:	f023 0303 	bic.w	r3, r3, #3
 800b840:	f043 0302 	orr.w	r3, r3, #2
 800b844:	81a3      	strh	r3, [r4, #12]
 800b846:	e7e3      	b.n	800b810 <__smakebuf_r+0xc>
 800b848:	4b0d      	ldr	r3, [pc, #52]	; (800b880 <__smakebuf_r+0x7c>)
 800b84a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	6020      	str	r0, [r4, #0]
 800b850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b854:	81a3      	strh	r3, [r4, #12]
 800b856:	9b00      	ldr	r3, [sp, #0]
 800b858:	6163      	str	r3, [r4, #20]
 800b85a:	9b01      	ldr	r3, [sp, #4]
 800b85c:	6120      	str	r0, [r4, #16]
 800b85e:	b15b      	cbz	r3, 800b878 <__smakebuf_r+0x74>
 800b860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b864:	4630      	mov	r0, r6
 800b866:	f000 f8d1 	bl	800ba0c <_isatty_r>
 800b86a:	b128      	cbz	r0, 800b878 <__smakebuf_r+0x74>
 800b86c:	89a3      	ldrh	r3, [r4, #12]
 800b86e:	f023 0303 	bic.w	r3, r3, #3
 800b872:	f043 0301 	orr.w	r3, r3, #1
 800b876:	81a3      	strh	r3, [r4, #12]
 800b878:	89a0      	ldrh	r0, [r4, #12]
 800b87a:	4305      	orrs	r5, r0
 800b87c:	81a5      	strh	r5, [r4, #12]
 800b87e:	e7cd      	b.n	800b81c <__smakebuf_r+0x18>
 800b880:	0800b615 	.word	0x0800b615

0800b884 <_malloc_usable_size_r>:
 800b884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b888:	1f18      	subs	r0, r3, #4
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	bfbc      	itt	lt
 800b88e:	580b      	ldrlt	r3, [r1, r0]
 800b890:	18c0      	addlt	r0, r0, r3
 800b892:	4770      	bx	lr

0800b894 <_raise_r>:
 800b894:	291f      	cmp	r1, #31
 800b896:	b538      	push	{r3, r4, r5, lr}
 800b898:	4604      	mov	r4, r0
 800b89a:	460d      	mov	r5, r1
 800b89c:	d904      	bls.n	800b8a8 <_raise_r+0x14>
 800b89e:	2316      	movs	r3, #22
 800b8a0:	6003      	str	r3, [r0, #0]
 800b8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a6:	bd38      	pop	{r3, r4, r5, pc}
 800b8a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b8aa:	b112      	cbz	r2, 800b8b2 <_raise_r+0x1e>
 800b8ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8b0:	b94b      	cbnz	r3, 800b8c6 <_raise_r+0x32>
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 f830 	bl	800b918 <_getpid_r>
 800b8b8:	462a      	mov	r2, r5
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	4620      	mov	r0, r4
 800b8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8c2:	f000 b817 	b.w	800b8f4 <_kill_r>
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d00a      	beq.n	800b8e0 <_raise_r+0x4c>
 800b8ca:	1c59      	adds	r1, r3, #1
 800b8cc:	d103      	bne.n	800b8d6 <_raise_r+0x42>
 800b8ce:	2316      	movs	r3, #22
 800b8d0:	6003      	str	r3, [r0, #0]
 800b8d2:	2001      	movs	r0, #1
 800b8d4:	e7e7      	b.n	800b8a6 <_raise_r+0x12>
 800b8d6:	2400      	movs	r4, #0
 800b8d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8dc:	4628      	mov	r0, r5
 800b8de:	4798      	blx	r3
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	e7e0      	b.n	800b8a6 <_raise_r+0x12>

0800b8e4 <raise>:
 800b8e4:	4b02      	ldr	r3, [pc, #8]	; (800b8f0 <raise+0xc>)
 800b8e6:	4601      	mov	r1, r0
 800b8e8:	6818      	ldr	r0, [r3, #0]
 800b8ea:	f7ff bfd3 	b.w	800b894 <_raise_r>
 800b8ee:	bf00      	nop
 800b8f0:	2000003c 	.word	0x2000003c

0800b8f4 <_kill_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d07      	ldr	r5, [pc, #28]	; (800b914 <_kill_r+0x20>)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	4611      	mov	r1, r2
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	f7f5 f96b 	bl	8000bdc <_kill>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d102      	bne.n	800b910 <_kill_r+0x1c>
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	b103      	cbz	r3, 800b910 <_kill_r+0x1c>
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	20000408 	.word	0x20000408

0800b918 <_getpid_r>:
 800b918:	f7f5 b958 	b.w	8000bcc <_getpid>

0800b91c <__sread>:
 800b91c:	b510      	push	{r4, lr}
 800b91e:	460c      	mov	r4, r1
 800b920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b924:	f000 f894 	bl	800ba50 <_read_r>
 800b928:	2800      	cmp	r0, #0
 800b92a:	bfab      	itete	ge
 800b92c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b92e:	89a3      	ldrhlt	r3, [r4, #12]
 800b930:	181b      	addge	r3, r3, r0
 800b932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b936:	bfac      	ite	ge
 800b938:	6563      	strge	r3, [r4, #84]	; 0x54
 800b93a:	81a3      	strhlt	r3, [r4, #12]
 800b93c:	bd10      	pop	{r4, pc}

0800b93e <__swrite>:
 800b93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b942:	461f      	mov	r7, r3
 800b944:	898b      	ldrh	r3, [r1, #12]
 800b946:	05db      	lsls	r3, r3, #23
 800b948:	4605      	mov	r5, r0
 800b94a:	460c      	mov	r4, r1
 800b94c:	4616      	mov	r6, r2
 800b94e:	d505      	bpl.n	800b95c <__swrite+0x1e>
 800b950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b954:	2302      	movs	r3, #2
 800b956:	2200      	movs	r2, #0
 800b958:	f000 f868 	bl	800ba2c <_lseek_r>
 800b95c:	89a3      	ldrh	r3, [r4, #12]
 800b95e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b966:	81a3      	strh	r3, [r4, #12]
 800b968:	4632      	mov	r2, r6
 800b96a:	463b      	mov	r3, r7
 800b96c:	4628      	mov	r0, r5
 800b96e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b972:	f000 b817 	b.w	800b9a4 <_write_r>

0800b976 <__sseek>:
 800b976:	b510      	push	{r4, lr}
 800b978:	460c      	mov	r4, r1
 800b97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b97e:	f000 f855 	bl	800ba2c <_lseek_r>
 800b982:	1c43      	adds	r3, r0, #1
 800b984:	89a3      	ldrh	r3, [r4, #12]
 800b986:	bf15      	itete	ne
 800b988:	6560      	strne	r0, [r4, #84]	; 0x54
 800b98a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b98e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b992:	81a3      	strheq	r3, [r4, #12]
 800b994:	bf18      	it	ne
 800b996:	81a3      	strhne	r3, [r4, #12]
 800b998:	bd10      	pop	{r4, pc}

0800b99a <__sclose>:
 800b99a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b99e:	f000 b813 	b.w	800b9c8 <_close_r>
	...

0800b9a4 <_write_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4d07      	ldr	r5, [pc, #28]	; (800b9c4 <_write_r+0x20>)
 800b9a8:	4604      	mov	r4, r0
 800b9aa:	4608      	mov	r0, r1
 800b9ac:	4611      	mov	r1, r2
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	602a      	str	r2, [r5, #0]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f7f5 f949 	bl	8000c4a <_write>
 800b9b8:	1c43      	adds	r3, r0, #1
 800b9ba:	d102      	bne.n	800b9c2 <_write_r+0x1e>
 800b9bc:	682b      	ldr	r3, [r5, #0]
 800b9be:	b103      	cbz	r3, 800b9c2 <_write_r+0x1e>
 800b9c0:	6023      	str	r3, [r4, #0]
 800b9c2:	bd38      	pop	{r3, r4, r5, pc}
 800b9c4:	20000408 	.word	0x20000408

0800b9c8 <_close_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4d06      	ldr	r5, [pc, #24]	; (800b9e4 <_close_r+0x1c>)
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	4608      	mov	r0, r1
 800b9d2:	602b      	str	r3, [r5, #0]
 800b9d4:	f7f5 f955 	bl	8000c82 <_close>
 800b9d8:	1c43      	adds	r3, r0, #1
 800b9da:	d102      	bne.n	800b9e2 <_close_r+0x1a>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	b103      	cbz	r3, 800b9e2 <_close_r+0x1a>
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	20000408 	.word	0x20000408

0800b9e8 <_fstat_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	4d07      	ldr	r5, [pc, #28]	; (800ba08 <_fstat_r+0x20>)
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	4608      	mov	r0, r1
 800b9f2:	4611      	mov	r1, r2
 800b9f4:	602b      	str	r3, [r5, #0]
 800b9f6:	f7f5 f950 	bl	8000c9a <_fstat>
 800b9fa:	1c43      	adds	r3, r0, #1
 800b9fc:	d102      	bne.n	800ba04 <_fstat_r+0x1c>
 800b9fe:	682b      	ldr	r3, [r5, #0]
 800ba00:	b103      	cbz	r3, 800ba04 <_fstat_r+0x1c>
 800ba02:	6023      	str	r3, [r4, #0]
 800ba04:	bd38      	pop	{r3, r4, r5, pc}
 800ba06:	bf00      	nop
 800ba08:	20000408 	.word	0x20000408

0800ba0c <_isatty_r>:
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	4d06      	ldr	r5, [pc, #24]	; (800ba28 <_isatty_r+0x1c>)
 800ba10:	2300      	movs	r3, #0
 800ba12:	4604      	mov	r4, r0
 800ba14:	4608      	mov	r0, r1
 800ba16:	602b      	str	r3, [r5, #0]
 800ba18:	f7f5 f94f 	bl	8000cba <_isatty>
 800ba1c:	1c43      	adds	r3, r0, #1
 800ba1e:	d102      	bne.n	800ba26 <_isatty_r+0x1a>
 800ba20:	682b      	ldr	r3, [r5, #0]
 800ba22:	b103      	cbz	r3, 800ba26 <_isatty_r+0x1a>
 800ba24:	6023      	str	r3, [r4, #0]
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	20000408 	.word	0x20000408

0800ba2c <_lseek_r>:
 800ba2c:	b538      	push	{r3, r4, r5, lr}
 800ba2e:	4d07      	ldr	r5, [pc, #28]	; (800ba4c <_lseek_r+0x20>)
 800ba30:	4604      	mov	r4, r0
 800ba32:	4608      	mov	r0, r1
 800ba34:	4611      	mov	r1, r2
 800ba36:	2200      	movs	r2, #0
 800ba38:	602a      	str	r2, [r5, #0]
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	f7f5 f948 	bl	8000cd0 <_lseek>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d102      	bne.n	800ba4a <_lseek_r+0x1e>
 800ba44:	682b      	ldr	r3, [r5, #0]
 800ba46:	b103      	cbz	r3, 800ba4a <_lseek_r+0x1e>
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	bd38      	pop	{r3, r4, r5, pc}
 800ba4c:	20000408 	.word	0x20000408

0800ba50 <_read_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d07      	ldr	r5, [pc, #28]	; (800ba70 <_read_r+0x20>)
 800ba54:	4604      	mov	r4, r0
 800ba56:	4608      	mov	r0, r1
 800ba58:	4611      	mov	r1, r2
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	602a      	str	r2, [r5, #0]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	f7f5 f8d6 	bl	8000c10 <_read>
 800ba64:	1c43      	adds	r3, r0, #1
 800ba66:	d102      	bne.n	800ba6e <_read_r+0x1e>
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	b103      	cbz	r3, 800ba6e <_read_r+0x1e>
 800ba6c:	6023      	str	r3, [r4, #0]
 800ba6e:	bd38      	pop	{r3, r4, r5, pc}
 800ba70:	20000408 	.word	0x20000408

0800ba74 <_init>:
 800ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba76:	bf00      	nop
 800ba78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba7a:	bc08      	pop	{r3}
 800ba7c:	469e      	mov	lr, r3
 800ba7e:	4770      	bx	lr

0800ba80 <_fini>:
 800ba80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba82:	bf00      	nop
 800ba84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba86:	bc08      	pop	{r3}
 800ba88:	469e      	mov	lr, r3
 800ba8a:	4770      	bx	lr
